[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Diethelm Wuertz. Author.            original code Tobias Setz. Author. Yohan Chalabi. Author. Martin Maechler. Contributor. CRAN Team. Contributor. Georgi N. Boshnakov. Maintainer, contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wuertz D, Setz T, Chalabi Y (2022). fBasics: Rmetrics - Markets Basic Statistics. https://r-forge.r-project.org/scm/viewvc.php/pkg/fBasics/?root=rmetrics )devel), https://www.rmetrics.org.","code":"@Manual{,   title = {fBasics: Rmetrics - Markets and Basic Statistics},   author = {Diethelm Wuertz and Tobias Setz and Yohan Chalabi},   year = {2022},   note = {https://r-forge.r-project.org/scm/viewvc.php/pkg/fBasics/?root=rmetrics )devel), https://www.rmetrics.org}, }"},{"path":"/reference/00fBasics-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Portfolio Modelling, Optimization and Backtesting — fBasics-package","title":"Portfolio Modelling, Optimization and Backtesting — fBasics-package","text":"Rmetrics \"fBasics\" package collection functions      explore investigate basic properties financial returns      related quantities. covered fields include techniques explorative data analysis     investigation distributional properties, including     parameter estimation hypothesis testing. Evenmore     several utility functions data handling managemnet.","code":""},{"path":"/reference/00fBasics-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Portfolio Modelling, Optimization and Backtesting — fBasics-package","text":"","code":"Package:    \\tab fBasics\\cr         Type:       \\tab Package\\cr         Date:       \\tab 2014\\cr         License:    \\tab GPL Version 2 or later\\cr         Copyright:  \\tab (c) 1999-2014 Rmetrics Association\\cr         Repository: \\tab R-FORGE\\cr         URL:        \\tab \\url{https://www.rmetrics.org}"},{"path":"/reference/00fBasics-package.html","id":"-introduction","dir":"Reference","previous_headings":"","what":"1 Introduction","title":"Portfolio Modelling, Optimization and Backtesting — fBasics-package","text":"fBasics package contains basics tools often required   computational finance financial engineering. topics   : basic statistics functions, financial return distributions,   hypothesis testing, plotting routines, matrix computations    linear algebra, usefule utility functions.","code":""},{"path":"/reference/00fBasics-package.html","id":"-basic-statistics-functions","dir":"Reference","previous_headings":"","what":"2 Basic Statistics Functions","title":"Portfolio Modelling, Optimization and Backtesting — fBasics-package","text":"Financial Return Statistics  Distribution Function Maximum Drawdowns  Calculation Sample Moments  Bivariate Interpolation:  Utility Statistics Functions:","code":"basicStats            Returns a basic statistics summary dmaxdd                Density function of mean Max-Drawdowns     pmaxdd                Probability function of mean Max-Drawdowns     rmaxdd                Random Variates of mean Max-Drawdowns     maxddStats            Expectation of Drawdowns for BM with drift sampleLmoments        Computes sample L-moments     sampleMED             Returns sample median     sampleIQR             returns sample inter quartal range     sampleSKEW            returns robust sample skewness     sampleKURT            returns robust sample kurtosis akimaInterp           Interpolates irregularly spaced points     akimaInterpp          Interpolates and smoothes pointwise     krigeInterp           Kriges irregularly spaced data points     linearInterp          Interpolates irregularly spaced points     linearInterpp         Interpolates linearly pointwise colStats              Computes sample statistics by col     colSums               Computes sums of values in each col     colMeans              Computes means of values in each col     colSds                Computes standard deviation of each col     colVars               Computes sample variance by col     colSkewness           Computes sample skewness by col     colKurtosis           Computes sample kurtosis by col     colMaxs               Computes maximum values in each col     colMins               Computes minimum values in each col     colProds              Computes product of values in each col     colQuantiles          Computes product of values in each col rowStats              Computes sample statistics by row     rowSums               Computes sums of values in each row     rowMeans              Computes means of values in each row     rowSds                Computes standard deviation of each row     rowVars               Computes sample variance by row     rowSkewness           Computes sample skewness by row     rowKurtosis           Computes sample kurtosis by row     rowMaxs               Computes maximum values in each row     rowMins               Computes minimum values in each row     rowProds              Computes product of values in each row     rowQuantiles          Computes product of values in each row"},{"path":"/reference/00fBasics-package.html","id":"-financial-return-distributions","dir":"Reference","previous_headings":"","what":"3 Financial Return Distributions","title":"Portfolio Modelling, Optimization and Backtesting — fBasics-package","text":"Generalized Hyperbolic Distribution:  Hyperbolic Distribution:  Normal Inverse Gaussian:  Generalized Hyperbolic Student-t Distribution:  Stable Distribution:  Generalized Lambda Distribution:  Spline Smoothed Distribution:","code":"dghReturns            Density for the GH distribution     pghreturns            Probability for the GH distribution     qghreturns            Quantiles for the GH distribution     rghreturns            Random variates for the GH distribution     ghFitFits             Fits parameters of the GH distribution     ghMode                Computes mode of the GH distribution.      ghMean                Returns true mean of the GH distribution     ghVar                 Returns true variance of the GH distribution     ghSkew                Returns true skewness of the GH distribution     ghKurt                Returns true kurtosis of the GH distribution     ghMoments             Returns true n-th moment of the GH distribution     ghMED                 Returns true median of te GH distribution     ghIQR                 Returns true inter quartal range of te GH     ghSKEW                Returns true robust skewness of te GH     ghKURT                Returns true robust kurtosis of te GH dhyp                  Returns density for the HYP distribution     phyp                  Returns probability for the HYP distribution     qhyp                  Returns quantiles for the HYP distribution     rhyp                  Returns random variates for the HYP distribution     hypFit                Fits parameters of the HYP distribution     hypMode               Computes mode of the HYP distribution     hypMean               Returns true mean of the HYP distribution     hypVar R              Returns true variance of the HYP distribution     hypSkew               Returns true skewness of the HYP distribution     hypKurt               Returns true kurtosis of the HYP distribution     hypMoments            Returns true n-th moment of the HYP distribution     hypMED                Returns true median of the HYP distribution     hypIQR                Returns true inter quartal range of the HYP     hypSKEW               Returns true robust skewness of the HYP     hypKURT               Returns true robust kurtosis of the HYP dnig                  Returns density for the NIG distribution     pnig                  Returns probability for the NIG distribution     qnig                  Returns quantiles for the NIG distribution     rnig                  Returns random variates for the NIG distribution       .pnigC              fast C Implementation of function pnig()       .qnigC              fast CImplementation of function qnig()     nigFit                Fits parameters of a NIG distribution       .nigFit.mle         Uses max Log-likelihood estimation       .nigFit.gmm         Uses generalized method of moments       .nigFit.mps         Maximum product spacings estimation       .nigFit.vmps        Minimum variance mps estimation     nigMode               Computes mode of the NIG distribution     nigMean               Returns true mean of the NIG distribution     nigVar                Returns true variance of the NIG distribution     nigSkew               Returns true skewness of the NIG distribution     nigKurt               Returns true kurtosis of the NIG distribution     nigMoments            Returns true n-th moment of the NIG distribution     nigMED                Returns true median of the NIG distribution     nigIQR                Returns true inter quartal range of the NIG     nigSKEW               Returns true robust skewness of the NIG     nigKURT               Returns true robust kurtosis of the NIG dght                  Returns density for the GHT distribution     pght                  Returns probability for the GHT distribution     qght                  Returns quantiles for the GHT distribution     rght                  Returns random variates for the GHT distribution     ghtFit                Fits parameters of the GHT distribution     ghtMode               Computes mode of the GHT distribution     ghtMean               Returns true mean of the NIG distribution     ghtVar                Returns true variance of the GHT distribution     ghtSkew               Returns true skewness of the GHT distribution     ghtKurt               Returns true kurtosis of the GHT distribution     ghtMoments            Returns true n-th moment of the GHT distribution     ghtMED                Returns true median of the GHT distribution     ghtIQR                Returns true inter quartal range of the GHT     ghtSKEW               Returns true robust skewness of the GHT     ghtKURT               Returns true robust kurtosis of the GHT dstable               Returns density for the stable distribution     pstable               Returns probability for the stable distribution     qstable               Returns quantiles for the stable distribution     rstable               Returns random variates for the dtsble distribution     stableFit             Fits parameters of a the stable distribution       .phiStable          Creates contour table for McCulloch estimators       .PhiStable          Contour table created by function .phiStable()       .qStableFit         Estimates parameters by McCulloch's approach       .mleStableFit       Estimates stable parameters by MLE approach       .stablePlot         Plots results of stable parameter estimates     stableMode            Computes mode of the stable distribution dgld                  Returns density for the GLD distribution     pgld                  Returns probability for the GLD distribution     qgld                  Returns quantiles for the GLD distribution     rgld                  Returns random variates for the GLD distribution     gldFit                Fits parameters of the GLD distribution       .gldFit.mle         fits GLD using maximum log-likelihood       .gldFit.mps         fits GLD using maximum product spacings        .gldFit.gof         fits GLD using Goodness of Fit statistics                                                                                        .gldFit.hist        fits GLD using a histogram fit       .gldFit.rob         fits GLD using robust moments fit     gldMode               Computes mode of the GLD distribution.     gldMED                Returns true median of the GLD distribution     gldIQR                Returns true inter quartal range of the GLD     gldSKEW               Returns true robust skewness of the GLD     gldKURT               Returns true robust kurtosis of the GLD dssd                  Returns spline smoothed density function     pssd                  Returns spline smoothed probability function     qssd                  Returns spline smoothed quantile function     rssd                  Returns spline smoothed random variates.     ssdFit                Fits parameters for a spline smoothed distribution"},{"path":"/reference/00fBasics-package.html","id":"-hypthesis-testing","dir":"Reference","previous_headings":"","what":"4 Hypthesis Testing","title":"Portfolio Modelling, Optimization and Backtesting — fBasics-package","text":"One Sample Nornality Tests:  One Sample Location, Scale variance Tests:  Two Sample Tests:  Test Utilities:","code":"ksnormTest            One sample Kolmogorov-Smirnov normality test     shapiroTest           Shapiro-Wilk normality test     jarqueberaTest        Jarque-Bera normality test     normalTest            Normality tests S-Plus compatible call     dagoTest              D'Agostino normality test     adTest                Anderson-Darling normality test     cvmTest               Cramer-von Mises normality test     lillieTest            Lilliefors (KS) normality test      pchiTest              Pearson chi-square normality test      sfTest                Shapiro-Francia normality test          jbTest                Finite sample adjusted JB LM and ALM test locationTest          Performs locations tests on two samples       .tTest              Unpaired t test for differences in mean       .kw2Test            Kruskal-Wallis test for differences in locations     scaleTest             Performs scale tests on two samples       .ansariTest         Ansari-Bradley test for differences in scale       .moodTest           Mood test for differences in scale     varianceTest          Performs variance tests on two samples       .varfTest           F test for differences in variances       .bartlett2Test      Bartlett's test for differences in variances       .fligner2Test       Fligner-Killeen test for differences in variances ks2Test               Performs a two sample Kolmogorov-Smirnov test     correlationTest       Performs correlation tests on two samples     pearsonTest           Pearson product moment correlation coefficient     kendallTest           Kendall's tau correlation test     spearmanTest          Spearman's rho correlation test 'fHTEST'              S4 Class Representation     show.fHTEST           S4 Print Method       .jbALM              Jarque Bera Augmented Lagrange Multiplier Data       .jbLM               Jarque-Bera Lagrange Multiplier Data       .jbTable            Finite sample p values for the Jarque Bera test       .jbPlot             Plots probabilities       .pjb                Returns probabilities for JB given quantiles       .qjb                Returns quantiles for JB given probabilities"},{"path":"/reference/00fBasics-package.html","id":"-plotting-routines","dir":"Reference","previous_headings":"","what":"5 Plotting Routines","title":"Portfolio Modelling, Optimization and Backtesting — fBasics-package","text":"Financial Time Series Plots:  Correlation Plots:  Distribution Plots:  Time Series Aggregation Plots:","code":"seriesPlot            Dispalys a time series plot     cumulatedPlot         Displays cumulated series give returns     returnPlot            Displays returns given cumulated series     drawdownPlot          Displays drawdown series from returns acfPlot               Displays tailored ACF plot     pacfPlot              Displays tailored partial ACF plot     teffectPlot           Displays the Taylor effect     lacfPlot              Displays lagged autocorrelations histPlot              Returns tailored histogram plot     densityPlot           Returns tailored density plot      logDensityPlot        Returns tailored log density plot     boxPlot               Returns side-by-side standard box plot     boxPercentile         Plotreturns box-percentile plot     qqnormPlot            Returns normal quantile-quantile plot     qqnigPlot             Returns NIG quantile-quantile plot     qqghtPlot             Rreturns  GHT quantile-quantile plot     qqgldPlot             Returns GLD quantile-quantile plot scalinglawPlot        Displays scaling law behavior"},{"path":"/reference/00fBasics-package.html","id":"-matrix-computations-and-linear-algebra","dir":"Reference","previous_headings":"","what":"5. Matrix Computations and Linear Algebra","title":"Portfolio Modelling, Optimization and Backtesting — fBasics-package","text":"Elementar Matrix Operation Addons:  Linear Algebra Addons:  General Matrix Utility Addons:  Selected Matrix Examples:","code":"kron                  Returns the Kronecker product     vec                   Stacks a matrix as column vector     vech                  Stacks a lower triangle matrix     pdl                   Returns regressor matrix for polynomial lags     tslag                 Returns Lagged/leading vector/matrix inv                   Returns the inverse of a matrix     norm                  Returns the norm of a matrix     rk                    Returns the rank of a matrix     tr                    Returns the trace of a matrix isPositiveDefinite    Checks if a matrix is positive definite     makePositiveDefinite  Forces a matrix to be positive definite     colVec                Creates a column vector from a data vector     rowVec                Creates a row vector from a data vector     gridVector            Creates from two vectors rectangular grid     triang                Extracs lower tridiagonal part from a matrix     Triang                Extracs upper tridiagonal part from a matrix hilbert               Creates a Hilbert matrix     pascal                Creates a Pascal matrix"},{"path":"/reference/00fBasics-package.html","id":"-utility-functions","dir":"Reference","previous_headings":"","what":"6 Utility Functions","title":"Portfolio Modelling, Optimization and Backtesting — fBasics-package","text":"Color Utilities:  Graphics Utilities:  Special Function Utilities:  Utilities:","code":"colorLocator            Plots Rs 657 named colors for selection     colorMatrix             Returns matrix of R's color names.     colorTable              Table of Color Codes and Plot Colors itself     rainbowPalette          Contiguous rainbow color palette     heatPalette             Contiguous heat color palette     terrainPalette          Contiguous terrain color palette     topoPalette             Contiguous topo color palette     cmPalette               Contiguous cm color palette     greyPalette             R's gamma-corrected gray palette     timPalette              Tim's Matlab like color palette     rampPalette             Color ramp palettes     seqPalette              Sequential color brewer palettes     divPalette              Diverging color brewer palettes     qualiPalette            Qualified color brewer palettes     focusPalette            Red, green blue focus palettes     monoPalette             Red, green blue mono palettes symbolTable             Shows a table of plot symbols     characterTable          Shows a table of character codes     decor                   Adds horizontal grid and L shaped box     hgrid                   Adds horizontal grid lines     vgrid                   Adds vertical grid lines     boxL                    Adds L-shaped box     box                     Adds unterlined box       .xrug                 Adds rugs on x axis       .yrug                 Adds rugs on y axis     copyright               Adds copyright notice     interactivePlot         Plots several graphs interactively Heaviside               Computes Heaviside unit step function     Sign                    Another signum function     Delta                   Computes delta function     Boxcar                  Computes boxcar function     Ramp                    Computes ramp function     tsHessian               Computes Two Sided Hessian matrix .unirootNA              Computes zero of a function without error exit     getModel                Extracts the model slot from a S4 object     getTitle                Extracts the title slot from a S4 object     getDescription          Extracts the description slot     getSlot                 Extracts a specified slot from a S4 object"},{"path":"/reference/00fBasics-package.html","id":"about-builtin-functions","dir":"Reference","previous_headings":"","what":"About Builtin Functions","title":"Portfolio Modelling, Optimization and Backtesting — fBasics-package","text":"Builtin functions borrowed contributed R packages      sources.     several reasons modified copied code      sources included package. * builtin code available Debian, Linux users       easy acces code. * original code conflicts code package        conflicts Rmetrics design objectives. * need small piece functionality original       package may depend packages needed. * package builtin code current        development, functions often change thus leads       unexpectect behavior Rmetrics packages. * package may incompatible since uses time date       time series classes 'timeDate' 'timeSeries' objects       methods Rmetrics. put code script files named builtin-funPackage.R     \"fun\" denotes (optional) major function name,      \"Package\" name contributed package      copied original code. Builtin functions include:","code":"gelGmm                gll function from gmm package     gmmGMM                gmm function from gmm package     kweightsSandwhich     kweights from sandwhich package     glGld                 gl functions from gld package     ssdenGss              ssden from the gss package     hypHyperbolicDist     hyp from HyperbolicDist package"},{"path":"/reference/00fBasics-package.html","id":"compiled-fortran-and-c-code-","dir":"Reference","previous_headings":"","what":"Compiled Fortran and C Code:","title":"Portfolio Modelling, Optimization and Backtesting — fBasics-package","text":"","code":"gld.c                 source code from gld package     nig.c                 source code from Kersti Aas     gss.f                 source code fromsandwhich package"},{"path":"/reference/00fBasics-package.html","id":"about-rmetrics-","dir":"Reference","previous_headings":"","what":"About Rmetrics:","title":"Portfolio Modelling, Optimization and Backtesting — fBasics-package","text":"fBasics Rmetrics package written educational      support teaching \"Computational Finance Financial Engineering\"      licensed GPL.","code":""},{"path":"/reference/baseMethods.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic Functions Extensions — baseMethods","title":"Generic Functions Extensions — baseMethods","text":"Basic extensions add /modify     additional functionality available     R's basic packages. Added /modified functions:","code":""},{"path":"/reference/baseMethods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic Functions Extensions — baseMethods","text":"","code":"# S3 method for default stdev(x, na.rm = FALSE)  # S3 method for default termPlot(model, ...)     # S3 method for default volatility(object, ...)"},{"path":"/reference/baseMethods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic Functions Extensions — baseMethods","text":"na.rm logical value - NA values removed. model fitted model object. object object extract volatility. x [align] -          x-coordinates points aligned.         [log][sort][var] -          first argument.         [print.control] - cr         prints unlisted object class control.         [.matrix.ts][.matrix.mts] -          univariate multivariate time series object         class \"ts\" \"mts\"         transformed one-column multi-column rectangular         object class \"matrix\".         [.POSIXlt] -          object converted. ... arguments passed.","code":""},{"path":"/reference/baseMethods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generic Functions Extensions — baseMethods","text":"details refer original help pages.","code":""},{"path":"/reference/data-examples.html","id":null,"dir":"Reference","previous_headings":"","what":"fBasics Data Sets — fBasicsData","title":"fBasics Data Sets — fBasicsData","text":"following data sets part package:","code":""},{"path":"/reference/data-examples.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"fBasics Data Sets — fBasicsData","text":"Capitalization:Capitalization  contains market capitalization domestic companies  2003 - 2008 USD millions. cars2:cars2  contains price, country, reliability, mileage, type, weight,  engine displacement net horsepower various car  models. DowJones30:DowJones30  contains daily observations Dow Jones 30 Index series.  thirty columns represents closing price   stock Index. HedgeFund:HedgeFund  contains monthly percentual returns various hedge fund  strategies Hennessee Group LLC. msft.dat:msft.dat  contains daily prices (open, high, low close)  volumes Microsoft stocks. nyse:nyse  contains daily records NYSE Composite Index. PensionFund:PensionFund  daily data set Swiss pension fund benchmark LPP-2005.  data set ranges 2005-11-01 2007-04-11.  columns named: SBI, SPI, SII, LMI, MPI, ALT, LPP25, LPP40, LPP60 swissEconomy:swissEconomy  contains GDP per capita, exports, imports, interest rates, inflation,  unemployment population years 1964 - 1999 Switzerland. SWXLP:SWXLP  daily data set Swiss pension fund benchmark LPP-2000.  data set ranges 2000-01-03 2007-05-08.  columns named: SBI, SPI, SII, LP25, LP40, LP60. usdthb:usdthb  Tick data US Dollar (USD) Thailand Bhat (THB) colleted  Reuters. Format: YYYYMMDDhhmm. Column variables: delay time,  contributer, bid ask prices, quality flag. covers   Asia FX crisis June 1997.","code":""},{"path":"/reference/data-examples.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"fBasics Data Sets — fBasicsData","text":"Capitalization:World Federation Stock Exchanges,  http://www.world-exchanges.org/statistics. cars2:  Derived car90 dataset within rpart package.  car90 dataset based car.dataset S-PLUS.  Original data comes :  April 1990, Consumer Reports Magazine,  pages 235-255, 281-285 287-288. DowJones30  http://www.yahoo.com. HedgeFund:  http://www.hennesseegroup.com/indices/returns/year/2005.html. msft.dat:  http://www.yahoo.com. nyse:  http://www.nyse.com. PensionFund:  SBI, SPI, SII: SIX (Swiss Exchange Zurich);  LPP25, LPP40, LPP60: Banque Pictet Geneva;  LMI, MPI, ALT: Recalculated indices benchmarks swissEconomy:  http://www.oecd.org/ http://www.imf.org/. SWXLP:  SBI, SPI, SII: SIX (Swiss Exchange Zurich);  LPP25, LPP40, LPP60: Banque Pictet Geneva usdthb:  Reuters Select Feed Terminal (1997).","code":""},{"path":"/reference/data-examples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"fBasics Data Sets — fBasicsData","text":"","code":"## Plot DowJones30 Example Data Set    series <- timeSeries::as.timeSeries(DowJones30)    head(series) #> GMT #>              AA  AXP     T    BA  CAT    C   KO    DD    EK   XOM   GE    GM #> 1990-12-31 5.92 4.70 14.67 21.77 9.30 1.87 9.88 13.15 23.02 12.09 4.63 19.72 #> 1991-01-02 5.92 4.70 14.67 21.77 9.30 1.87 9.88 13.15 23.02 12.09 4.63 19.72 #> 1991-01-03 5.88 4.73 14.73 21.71 9.15 1.87 9.60 12.83 22.95 12.15 4.53 19.57 #> 1991-01-04 5.76 4.73 14.79 22.50 9.00 1.92 9.85 13.06 22.74 12.27 4.47 19.00 #> 1991-01-07 5.72 4.58 14.67 21.65 8.87 1.89 9.69 12.83 22.11 12.12 4.40 18.35 #> 1991-01-08 5.63 4.53 14.73 21.34 9.05 1.85 9.60 12.60 22.18 12.09 4.44 18.28 #>             HWP   HD  HON INTC   IBM    IP  JPM  JNJ  MCD   MRK MSFT   MMM #> 1990-12-31 3.91 2.80 5.70 1.20 27.86 20.45 2.67 7.31 7.08 11.83 2.08 31.41 #> 1991-01-02 3.91 2.80 5.70 1.20 27.86 20.45 2.67 7.31 7.08 11.83 2.08 31.41 #> 1991-01-03 3.91 2.74 5.67 1.20 27.95 20.21 2.67 7.23 6.99 11.45 2.09 30.90 #> 1991-01-04 3.85 2.75 5.65 1.20 27.86 20.50 2.69 7.18 7.02 11.27 2.11 30.80 #> 1991-01-07 3.88 2.65 5.50 1.19 27.39 20.45 2.58 6.96 6.80 10.97 2.08 30.43 #> 1991-01-08 3.90 2.59 5.47 1.18 27.08 20.26 2.58 7.02 6.83 11.01 2.04 29.65 #>               MO    PG  SBC  UTX  WMT  DIS #> 1990-12-31 10.55 20.91 9.75 9.31 7.05 7.86 #> 1991-01-02 10.55 20.91 9.75 9.31 7.05 7.86 #> 1991-01-03 10.27 20.70 9.64 9.19 7.05 7.82 #> 1991-01-04 10.24 20.48 9.56 9.24 6.97 7.79 #> 1991-01-07 10.08 20.05 9.40 8.95 6.82 7.58 #> 1991-01-08 10.11 20.02 9.32 8.78 6.85 7.41    plot(series[,1:6], type = \"l\")"},{"path":"/reference/dist-DistributionFits.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameter Fit of a Distribution — DistributionFits","title":"Parameter Fit of a Distribution — DistributionFits","text":"collection description moment maximum      likelihood estimators fit parameters      distribution. functions :","code":""},{"path":"/reference/dist-DistributionFits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameter Fit of a Distribution — DistributionFits","text":"","code":"nFit(x, doplot = TRUE, span = \"auto\", title = NULL, description = NULL, ...)  tFit(x, df = 4, doplot = TRUE, span = \"auto\", trace = FALSE, title = NULL,      description = NULL, ...)      stableFit(x, alpha = 1.75, beta = 0, gamma = 1, delta = 0,      type = c(\"q\", \"mle\"), doplot = TRUE, control = list(),     trace = FALSE, title = NULL, description = NULL)       # S4 method for fDISTFIT show(object)"},{"path":"/reference/dist-DistributionFits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameter Fit of a Distribution — DistributionFits","text":"control [stableFit] -          list control parameters, see function nlminb. alpha, beta, gamma, delta [stable] -          parameters alpha, beta, gamma,          delta:         value index parameter alpha alpha = (0,2];         skewness parameter beta, range [-1, 1];         scale parameter gamma;         shift parameter delta. description character string allows brief description. df number degrees freedom Student distribution,          df > 2, maybe non-integer. default value 4         assumed. object [show] -          S4 class object returned fitting functions. doplot logical flag. plot displayed? span x-coordinates plot, default 100 values          automatically selected ranging 0.001,          0.999 quantiles. Alternatively, can specify         range expression like span=seq(min, max,         times = n), , min max          left right endpoints range, n gives          number intermediate points. title character string allows project title. trace logical flag. parameter estimation process         traced? type character string allows select method         parameter estimation: \"mle\", maximum log likelihood         approach, \"qm\", McCulloch's quantile method. x numeric vector. ... parameters parsed.","code":""},{"path":"/reference/dist-DistributionFits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parameter Fit of a Distribution — DistributionFits","text":"functions tFit, hypFit nigFit return      list following components: estimate point maximum value log liklihood          function obtained. minimum value estimated maximum, .e. value         log liklihood function. code integer indicating optimization process terminated. gradient gradient estimated maximum. Remark: parameter estimation stable distribution via      maximum Log-Likelihood approach may take quite long time.","code":""},{"path":"/reference/dist-DistributionFits.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parameter Fit of a Distribution — DistributionFits","text":"Stable Parameter Estimation: Estimation techniques based quantiles empirical sample      first suggested Fama Roll [1971]. However technique      limited symmetric distributions suffered small      asymptotic bias. McCulloch [1986] developed technique uses      five quantiles sample estimate alpha beta     without asymptotic bias. Unfortunately, estimators provided     McCulloch restriction alpha>0.6.","code":""},{"path":"/reference/dist-DistributionFits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parameter Fit of a Distribution — DistributionFits","text":"","code":"## nFit -    # Simulate random normal variates N(0.5, 2.0):    set.seed(1953)    s = rnorm(n = 1000, 0.5, 2)   ## nigFit -      # Fit Parameters:    nFit(s, doplot = TRUE)   #>  #> Title: #>  Normal Parameter Estimation  #>  #> Call: #>  nFit(x = s, doplot = TRUE) #>  #> Model: #>  Normal Distribution #>  #> Estimated Parameter(s): #>      mean        sd  #> 0.4952318 2.0767958  #>  #> Description: #>  Mon Aug  8 08:09:34 2022 by user: georgi  #>"},{"path":"/reference/dist-distCheck.html","id":null,"dir":"Reference","previous_headings":"","what":"Distribution Check — distCheck","title":"Distribution Check — distCheck","text":"Tests properties R implementation distribution, .e.   four “dpqr” functions.","code":""},{"path":"/reference/dist-distCheck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distribution Check — distCheck","text":"","code":"distCheck(fun = \"norm\", n = 1000, robust = TRUE, subdivisions = 100, ...)"},{"path":"/reference/dist-distCheck.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distribution Check — distCheck","text":"fun character string denoting name distribution. n integer specifying number random variates         generated. robust logical flag, robust estimates used?         default TRUE. subdivisions integer specifying numbers subdivisions       integration. ... distributional parameters.","code":""},{"path":"/reference/dist-distCheck.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distribution Check — distCheck","text":"","code":"distCheck(\"norm\", mean = 1, sd = 1) #>  #> Distribution Check for: norm  #>  Call: distCheck(fun = \"norm\", mean = 1, sd = 1) #>  #> 1. Normalization Check: #>  NORM 1 with absolute error < 1.6e-05 #>  #> 2. [p-pfun(qfun(p))]^2 Check: #>     [,1] [,2] [,3] [,4] [,5] [,6]  [,7] #> p 0.001 0.01  0.1  0.5  0.9 0.99 0.999 #> P 0.001 0.01  0.1  0.5  0.9 0.99 0.999 #>         RMSE  #> 2.205081e-17  #>  #> 3. r(1000) Check: #>         MEAN   VAR #> SAMPLE 0.991 0.896 #>    X   1 with absolute error < 4.4e-07 #>    X^2 2 with absolute error < 7.9e-07 #>        MEAN VAR #> EXACT     1   1 #>  #>    normCheck    rmseCheck meanvarCheck  #>         TRUE         TRUE        FALSE   distCheck(\"lnorm\", meanlog = 0.5, sdlog = 2, robust=FALSE) #>  #> Distribution Check for: lnorm  #>  Call: distCheck(fun = \"lnorm\", robust = FALSE, meanlog = 0.5, sdlog = 2) #>  #> 1. Normalization Check: #>  NORM 0.9999976 with absolute error < 7.6e-05 #>  #> 2. [p-pfun(qfun(p))]^2 Check: #>     [,1] [,2] [,3] [,4] [,5] [,6]  [,7] #> p 0.001 0.01  0.1  0.5  0.9 0.99 0.999 #> P 0.001 0.01  0.1  0.5  0.9 0.99 0.999 #>         RMSE  #> 2.205081e-17  #>  #> 3. r(1000) Check: #>        MEAN  VAR #> SAMPLE  9.1 2170 #>    X   12.18247 with absolute error < 0.0012 #>    X^2 8103.065 with absolute error < 0.64 #>        MEAN  VAR #> EXACT  12.2 7950 #>  #>    normCheck    rmseCheck meanvarCheck  #>         TRUE         TRUE        FALSE  ## here, true E(X) = exp(mu + 1/2 sigma^2) = exp(.5 + 2) = exp(2.5) = 12.182 ## and      Var(X) = exp(2*mu + sigma^2)*(exp(sigma^2) - 1) =       7954.67"},{"path":"/reference/dist-gh.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized Hyperbolic Distribution — gh","title":"Generalized Hyperbolic Distribution — gh","text":"Calculates moments generalized hyperbbolic     distribution function.","code":""},{"path":"/reference/dist-gh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized Hyperbolic Distribution — gh","text":"","code":"dgh(x, alpha = 1, beta = 0, delta = 1, mu = 0, lambda = -1/2, log = FALSE) pgh(q, alpha = 1, beta = 0, delta = 1, mu = 0, lambda = -1/2) qgh(p, alpha = 1, beta = 0, delta = 1, mu = 0, lambda = -1/2) rgh(n, alpha = 1, beta = 0, delta = 1, mu = 0, lambda = -1/2)"},{"path":"/reference/dist-gh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized Hyperbolic Distribution — gh","text":"alpha, beta, delta, mu, lambda numeric values.         alpha first shape parameter;         beta second shape parameter range (0, alpha);         delta scale parameter, must zero positive;          mu location parameter, default 0;         lambda defines sublclass, default -1/2.         meanings parameters first              parameterization pm=1 default              parameterization.         second parameterization, pm=2 alpha             beta take meaning shape parameters             (usually named) zeta rho.         third parameterization, pm=3 alpha             beta take meaning shape parameters             (usually named) xi chi.         fourth parameterization, pm=4 alpha             beta take meaning shape parameters             (usually named) .bar b.bar. log logical flag default FALSE.          labels main title drawn plot? n number observations. p numeric vector probabilities. x, q numeric vector quantiles.","code":""},{"path":"/reference/dist-gh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalized Hyperbolic Distribution — gh","text":"values *gh functions numeric vectors:  d* returns density, p* returns distribution function, q* returns quantile function, r* generates random deviates.     values attributes named \"param\" listing     values distributional parameters.","code":""},{"path":"/reference/dist-gh.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generalized Hyperbolic Distribution — gh","text":"generator rgh based GH algorithm given      Scott (2004).","code":""},{"path":"/reference/dist-gh.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generalized Hyperbolic Distribution — gh","text":"Atkinson, .C. (1982);      simulation generalized inverse Gaussian hyperbolic      random variables,     SIAM J. Sci. Stat. Comput. 3, 502--515. Barndorff-Nielsen O. (1977);     Exponentially decreasing distributions logarithm      particle size,      Proc. Roy. Soc. Lond., A353, 401--419. Barndorff-Nielsen O., Blaesild, P. (1983);      Hyperbolic distributions. Encyclopedia Statistical      Sciences,      Eds., Johnson N.L., Kotz S. Read C.B.,      Vol. 3, pp. 700--707. New York: Wiley. Raible S. (2000);     Levy Processes Finance: Theory, Numerics Empirical Facts,     PhD Thesis, University Freiburg, Germany, 161 pages.","code":""},{"path":"/reference/dist-gh.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generalized Hyperbolic Distribution — gh","text":"David Scott code implemented R's      contributed package HyperbolicDist.","code":""},{"path":"/reference/dist-gh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalized Hyperbolic Distribution — gh","text":"","code":"## rgh -    set.seed(1953)    r = rgh(5000, alpha = 1, beta = 0.3, delta = 1)    plot(r, type = \"l\", col = \"steelblue\",      main = \"gh: alpha=1 beta=0.3 delta=1\")    ## dgh -     # Plot empirical density and compare with true density:    hist(r, n = 25, probability = TRUE, border = \"white\", col = \"steelblue\")    x = seq(-5, 5, 0.25)    lines(x, dgh(x, alpha = 1, beta = 0.3, delta = 1))    ## pgh -      # Plot df and compare with true df:    plot(sort(r), (1:5000/5000), main = \"Probability\", col = \"steelblue\")    lines(x, pgh(x, alpha = 1, beta = 0.3, delta = 1))      ## qgh -    # Compute Quantiles:    qgh(pgh(seq(-5, 5, 1), alpha = 1, beta = 0.3, delta = 1),       alpha = 1, beta = 0.3, delta = 1)  #>  [1] -5.000001e+00 -4.000000e+00 -3.000006e+00 -1.999996e+00 -1.000010e+00 #>  [6] -8.504243e-06  1.000003e+00  1.999972e+00  3.000000e+00  3.999998e+00 #> [11]  4.999976e+00"},{"path":"/reference/dist-ghFit.html","id":null,"dir":"Reference","previous_headings":"","what":"GH Distribution Fit — ghFit","title":"GH Distribution Fit — ghFit","text":"Estimates distrinbutional parameters      generalized hyperbolic distribution.","code":""},{"path":"/reference/dist-ghFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GH Distribution Fit — ghFit","text":"","code":"ghFit(x, alpha = 1, beta = 0, delta = 1, mu = 0, lambda = -1/2,      scale = TRUE, doplot = TRUE, span = \"auto\", trace = TRUE,      title = NULL, description = NULL, ...)"},{"path":"/reference/dist-ghFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GH Distribution Fit — ghFit","text":"x numeric vector. alpha, beta, delta, mu, lambda parameters alpha, beta, delta,          mu, lambda:         shape parameter alpha;         skewness parameter beta, abs(beta)          range (0, alpha);         scale parameter delta, delta must zero          positive;          location parameter mu, default 0;         lambda parameter lambda, default -1/2. scale logical flag, default TRUE. time series         scaled standard deviation achieve stable         optimization? doplot logical flag. plot displayed? span x-coordinates plot, default 100 values          automatically selected ranging 0.001,          0.999 quantiles. Alternatively, can specify         range expression like span=seq(min, max,         times = n), , min max          left right endpoints range, n gives          number intermediate points. trace logical flag. parameter estimation process         traced? title character string allows project title. description character string allows brief description. ... parameters parsed.","code":""},{"path":"/reference/dist-ghFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GH Distribution Fit — ghFit","text":"returns list following components: estimate point maximum value log liklihood          function obtained. minimum value estimated maximum, .e. value         log liklihood function. code integer indicating optimization process terminated.         1: relative gradient close zero, current iterate probably              solution;          2: successive iterates within tolerance, current iterate probably              solution;          3: last global step failed locate point lower estimate.              Either estimate approximate local minimum              function steptol small;          4: iteration limit exceeded;          5: maximum step size stepmax exceeded five consecutive times.              Either function unbounded , becomes asymptotic              finite value direction stepmax              small. gradient gradient estimated maximum. steps number function calls.","code":""},{"path":"/reference/dist-ghFit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GH Distribution Fit — ghFit","text":"function nlm used minimize \"negative\"      maximum log-likelihood function. nlm carries minimization      using Newton-type algorithm.","code":""},{"path":"/reference/dist-ghFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GH Distribution Fit — ghFit","text":"","code":"## ghFit -    # Simulate Random Variates:    set.seed(1953)    s = rgh(n = 1000, alpha = 1.5, beta = 0.3, delta = 0.5, mu = -1.0)   ## ghFit -      # Fit Parameters:    ghFit(s, alpha = 1, beta = 0, delta = 1, mu = mean(s), doplot = TRUE)  #>  #>  Objective Function Value:   -1633.099 #>  Parameter Estimates:        1 0 1 -0.9306297 -0.5  #>  #>  Objective Function Value:   -1633.099 #>  Parameter Estimates:        1 0 1 -0.9306297 -0.5  #>  #>  Objective Function Value:   -1633.099 #>  Parameter Estimates:        1 1.490116e-08 1 -0.9306297 -0.5  #>  #>  Objective Function Value:   -1633.099 #>  Parameter Estimates:        1 0 1 -0.9306297 -0.5  #>  #>  Objective Function Value:   -1633.099 #>  Parameter Estimates:        1 0 1 -0.9306297 -0.5  #>  #>  Objective Function Value:   -1633.099 #>  Parameter Estimates:        1 0 1 -0.9306297 -0.5  #>  #>  Objective Function Value:   -1778.891 #>  Parameter Estimates:        0.8909726 -0.5885522 1.221979 -1.691269 -0.38222  #>  #>  Objective Function Value:   -1396.398 #>  Parameter Estimates:        0.9522285 -0.2578805 1.097262 -1.263912 -0.4483934  #>  #>  Objective Function Value:   -1396.396 #>  Parameter Estimates:        0.9522637 -0.2578805 1.097262 -1.263912 -0.4483934  #>  #>  Objective Function Value:   -1396.397 #>  Parameter Estimates:        0.9522285 -0.2578453 1.097262 -1.263912 -0.4483934  #>  #>  Objective Function Value:   -1396.397 #>  Parameter Estimates:        0.9522285 -0.2578805 1.097227 -1.263912 -0.4483934  #>  #>  Objective Function Value:   -1396.402 #>  Parameter Estimates:        0.9522285 -0.2578805 1.097262 -1.263877 -0.4483934  #>  #>  Objective Function Value:   -1396.397 #>  Parameter Estimates:        0.9522285 -0.2578805 1.097262 -1.263912 -0.4484287  #>  #>  Objective Function Value:   -1377.816 #>  Parameter Estimates:        1.150277 -0.1235652 0.9740887 -1.589474 -0.5648356  #>  #>  Objective Function Value:   -1377.816 #>  Parameter Estimates:        1.150273 -0.1235652 0.9740887 -1.589474 -0.5648356  #>  #>  Objective Function Value:   -1377.817 #>  Parameter Estimates:        1.150277 -0.1235664 0.9740887 -1.589474 -0.5648356  #>  #>  Objective Function Value:   -1377.816 #>  Parameter Estimates:        1.150277 -0.1235652 0.9740914 -1.589474 -0.5648356  #>  #>  Objective Function Value:   -1377.816 #>  Parameter Estimates:        1.150277 -0.1235652 0.9740887 -1.589473 -0.5648356  #>  #>  Objective Function Value:   -1377.816 #>  Parameter Estimates:        1.150277 -0.1235652 0.9740887 -1.589474 -0.5648311  #>  #>  Objective Function Value:   -1393.589 #>  Parameter Estimates:        1.092873 0.2660124 1.148241 -1.569046 -0.4862696  #>  #>  Objective Function Value:   -1370.468 #>  Parameter Estimates:        1.118516 0.007471272 1.017016 -1.479727 -0.5389681  #>  #>  Objective Function Value:   -1370.468 #>  Parameter Estimates:        1.118519 0.007471272 1.017016 -1.479727 -0.5389681  #>  #>  Objective Function Value:   -1370.468 #>  Parameter Estimates:        1.118516 0.007468454 1.017016 -1.479727 -0.5389681  #>  #>  Objective Function Value:   -1370.468 #>  Parameter Estimates:        1.118516 0.007471272 1.017012 -1.479727 -0.5389681  #>  #>  Objective Function Value:   -1370.468 #>  Parameter Estimates:        1.118516 0.007471272 1.017016 -1.479729 -0.5389681  #>  #>  Objective Function Value:   -1370.468 #>  Parameter Estimates:        1.118516 0.007471272 1.017016 -1.479727 -0.538973  #>  #>  Objective Function Value:   -1359.095 #>  Parameter Estimates:        1.085615 0.0576953 1.073831 -1.637861 -0.5090277  #>  #>  Objective Function Value:   -1359.095 #>  Parameter Estimates:        1.085622 0.0576953 1.073831 -1.637861 -0.5090277  #>  #>  Objective Function Value:   -1359.095 #>  Parameter Estimates:        1.085615 0.05769653 1.073831 -1.637861 -0.5090277  #>  #>  Objective Function Value:   -1359.095 #>  Parameter Estimates:        1.085615 0.0576953 1.073825 -1.637861 -0.5090277  #>  #>  Objective Function Value:   -1359.095 #>  Parameter Estimates:        1.085615 0.0576953 1.073831 -1.63786 -0.5090277  #>  #>  Objective Function Value:   -1359.095 #>  Parameter Estimates:        1.085615 0.0576953 1.073831 -1.637861 -0.5090367  #>  #>  Objective Function Value:   -1360.175 #>  Parameter Estimates:        1.015117 0.2130074 1.045539 -1.68825 -0.4915842  #>  #>  Objective Function Value:   -1358.102 #>  Parameter Estimates:        1.068019 0.1300522 1.055076 -1.642706 -0.508582  #>  #>  Objective Function Value:   -1358.102 #>  Parameter Estimates:        1.068014 0.1300522 1.055076 -1.642706 -0.508582  #>  #>  Objective Function Value:   -1358.102 #>  Parameter Estimates:        1.068019 0.1300505 1.055076 -1.642706 -0.508582  #>  #>  Objective Function Value:   -1358.102 #>  Parameter Estimates:        1.068019 0.1300522 1.05508 -1.642706 -0.508582  #>  #>  Objective Function Value:   -1358.102 #>  Parameter Estimates:        1.068019 0.1300522 1.055076 -1.642707 -0.508582  #>  #>  Objective Function Value:   -1358.102 #>  Parameter Estimates:        1.068019 0.1300522 1.055076 -1.642706 -0.5085764  #>  #>  Objective Function Value:   -1356.626 #>  Parameter Estimates:        1.027971 0.1253015 1.006321 -1.686489 -0.5088187  #>  #>  Objective Function Value:   -1356.626 #>  Parameter Estimates:        1.027964 0.1253015 1.006321 -1.686489 -0.5088187  #>  #>  Objective Function Value:   -1356.626 #>  Parameter Estimates:        1.027971 0.1253026 1.006321 -1.686489 -0.5088187  #>  #>  Objective Function Value:   -1356.626 #>  Parameter Estimates:        1.027971 0.1253015 1.006328 -1.686489 -0.5088187  #>  #>  Objective Function Value:   -1356.626 #>  Parameter Estimates:        1.027971 0.1253015 1.006321 -1.686488 -0.5088187  #>  #>  Objective Function Value:   -1356.626 #>  Parameter Estimates:        1.027971 0.1253015 1.006321 -1.686489 -0.5088091  #>  #>  Objective Function Value:   -1356.135 #>  Parameter Estimates:        0.977486 0.155564 0.9568522 -1.685198 -0.5061335  #>  #>  Objective Function Value:   -1356.136 #>  Parameter Estimates:        0.9774794 0.155564 0.9568522 -1.685198 -0.5061335  #>  #>  Objective Function Value:   -1356.135 #>  Parameter Estimates:        0.977486 0.1555628 0.9568522 -1.685198 -0.5061335  #>  #>  Objective Function Value:   -1356.136 #>  Parameter Estimates:        0.977486 0.155564 0.9568569 -1.685198 -0.5061335  #>  #>  Objective Function Value:   -1356.135 #>  Parameter Estimates:        0.977486 0.155564 0.9568522 -1.685199 -0.5061335  #>  #>  Objective Function Value:   -1356.136 #>  Parameter Estimates:        0.977486 0.155564 0.9568522 -1.685198 -0.5061256  #>  #>  Objective Function Value:   -1356.554 #>  Parameter Estimates:        0.9360177 0.1885819 0.9526273 -1.740295 -0.4985724  #>  #>  Objective Function Value:   -1356.014 #>  Parameter Estimates:        0.9736088 0.1562217 0.9518937 -1.708769 -0.5075161  #>  #>  Objective Function Value:   -1356.014 #>  Parameter Estimates:        0.9736023 0.1562217 0.9518937 -1.708769 -0.5075161  #>  #>  Objective Function Value:   -1356.014 #>  Parameter Estimates:        0.9736088 0.1562229 0.9518937 -1.708769 -0.5075161  #>  #>  Objective Function Value:   -1356.014 #>  Parameter Estimates:        0.9736088 0.1562217 0.9518997 -1.708769 -0.5075161  #>  #>  Objective Function Value:   -1356.014 #>  Parameter Estimates:        0.9736088 0.1562217 0.9518937 -1.708768 -0.5075161  #>  #>  Objective Function Value:   -1356.014 #>  Parameter Estimates:        0.9736088 0.1562217 0.9518937 -1.708769 -0.5075064  #>  #>  Objective Function Value:   -1355.907 #>  Parameter Estimates:        0.9826586 0.1748042 0.9646734 -1.711391 -0.507946  #>  #>  Objective Function Value:   -1355.907 #>  Parameter Estimates:        0.9826509 0.1748042 0.9646734 -1.711391 -0.507946  #>  #>  Objective Function Value:   -1355.907 #>  Parameter Estimates:        0.9826586 0.174803 0.9646734 -1.711391 -0.507946  #>  #>  Objective Function Value:   -1355.907 #>  Parameter Estimates:        0.9826586 0.1748042 0.9646782 -1.711391 -0.507946  #>  #>  Objective Function Value:   -1355.907 #>  Parameter Estimates:        0.9826586 0.1748042 0.9646734 -1.711392 -0.507946  #>  #>  Objective Function Value:   -1355.907 #>  Parameter Estimates:        0.9826586 0.1748042 0.9646734 -1.711391 -0.5079377  #>  #>  Objective Function Value:   -1355.88 #>  Parameter Estimates:        0.997781 0.1724361 0.9504171 -1.710491 -0.5205651  #>  #>  Objective Function Value:   -1355.88 #>  Parameter Estimates:        0.997777 0.1724361 0.9504171 -1.710491 -0.5205651  #>  #>  Objective Function Value:   -1355.88 #>  Parameter Estimates:        0.997781 0.1724372 0.9504171 -1.710491 -0.5205651  #>  #>  Objective Function Value:   -1355.88 #>  Parameter Estimates:        0.997781 0.1724361 0.9504198 -1.710491 -0.5205651  #>  #>  Objective Function Value:   -1355.88 #>  Parameter Estimates:        0.997781 0.1724361 0.9504171 -1.71049 -0.5205651  #>  #>  Objective Function Value:   -1355.88 #>  Parameter Estimates:        0.997781 0.1724361 0.9504171 -1.710491 -0.5205606  #>  #>  Objective Function Value:   -1355.785 #>  Parameter Estimates:        1.007121 0.184865 0.9657667 -1.72045 -0.5159722  #>  #>  Objective Function Value:   -1355.785 #>  Parameter Estimates:        1.007123 0.184865 0.9657667 -1.72045 -0.5159722  #>  #>  Objective Function Value:   -1355.785 #>  Parameter Estimates:        1.007121 0.1848631 0.9657667 -1.72045 -0.5159722  #>  #>  Objective Function Value:   -1355.785 #>  Parameter Estimates:        1.007121 0.184865 0.965765 -1.72045 -0.5159722  #>  #>  Objective Function Value:   -1355.785 #>  Parameter Estimates:        1.007121 0.184865 0.9657667 -1.720453 -0.5159722  #>  #>  Objective Function Value:   -1355.785 #>  Parameter Estimates:        1.007121 0.184865 0.9657667 -1.72045 -0.5159749  #>  #>  Objective Function Value:   -1356.04 #>  Parameter Estimates:        1.000971 0.2029004 0.9544148 -1.713217 -0.5086708  #>  #>  Objective Function Value:   -1355.781 #>  Parameter Estimates:        1.007128 0.1875924 0.9654358 -1.719619 -0.5160412  #>  #>  Objective Function Value:   -1355.781 #>  Parameter Estimates:        1.007153 0.1875924 0.9654358 -1.719619 -0.5160412  #>  #>  Objective Function Value:   -1355.781 #>  Parameter Estimates:        1.007103 0.1875924 0.9654358 -1.719619 -0.5160412  #>  #>  Objective Function Value:   -1355.781 #>  Parameter Estimates:        1.007128 0.18759 0.9654358 -1.719619 -0.5160412  #>  #>  Objective Function Value:   -1355.781 #>  Parameter Estimates:        1.007128 0.1875924 0.9654375 -1.719619 -0.5160412  #>  #>  Objective Function Value:   -1355.781 #>  Parameter Estimates:        1.007128 0.1875924 0.9654358 -1.719625 -0.5160412  #>  #>  Objective Function Value:   -1355.781 #>  Parameter Estimates:        1.007128 0.1875924 0.9654358 -1.719619 -0.5160379  #>  #>  Objective Function Value:   -1355.781 #>  Parameter Estimates:        1.007128 0.1875924 0.9654358 -1.719619 -0.5160444  #>  #>  Objective Function Value:   -1355.777 #>  Parameter Estimates:        1.007521 0.1880382 0.9644741 -1.722252 -0.5162199  #>  #>  Objective Function Value:   -1355.777 #>  Parameter Estimates:        1.007519 0.1880382 0.9644741 -1.722252 -0.5162199  #>  #>  Objective Function Value:   -1355.777 #>  Parameter Estimates:        1.007521 0.18804 0.9644741 -1.722252 -0.5162199  #>  #>  Objective Function Value:   -1355.777 #>  Parameter Estimates:        1.007521 0.1880364 0.9644741 -1.722252 -0.5162199  #>  #>  Objective Function Value:   -1355.777 #>  Parameter Estimates:        1.007521 0.1880382 0.9644758 -1.722252 -0.5162199  #>  #>  Objective Function Value:   -1355.777 #>  Parameter Estimates:        1.007521 0.1880382 0.9644741 -1.722251 -0.5162199  #>  #>  Objective Function Value:   -1355.777 #>  Parameter Estimates:        1.007521 0.1880382 0.9644741 -1.722252 -0.5162171  #>  #>  Objective Function Value:   -1355.773 #>  Parameter Estimates:        1.007719 0.1907975 0.9641427 -1.722277 -0.5155267  #>  #>  Objective Function Value:   -1355.773 #>  Parameter Estimates:        1.007723 0.1907975 0.9641427 -1.722277 -0.5155267  #>  #>  Objective Function Value:   -1355.773 #>  Parameter Estimates:        1.007715 0.1907975 0.9641427 -1.722277 -0.5155267  #>  #>  Objective Function Value:   -1355.773 #>  Parameter Estimates:        1.007719 0.1907962 0.9641427 -1.722277 -0.5155267  #>  #>  Objective Function Value:   -1355.773 #>  Parameter Estimates:        1.007719 0.1907975 0.9641543 -1.722277 -0.5155267  #>  #>  Objective Function Value:   -1355.773 #>  Parameter Estimates:        1.007719 0.1907975 0.9641312 -1.722277 -0.5155267  #>  #>  Objective Function Value:   -1355.773 #>  Parameter Estimates:        1.007719 0.1907975 0.9641427 -1.722278 -0.5155267  #>  #>  Objective Function Value:   -1355.773 #>  Parameter Estimates:        1.007719 0.1907975 0.9641427 -1.722277 -0.5155234  #>  #>  Objective Function Value:   -1355.773 #>  Parameter Estimates:        1.007719 0.1907975 0.9641427 -1.722277 -0.5155301  #>  #>  Objective Function Value:   -1355.77 #>  Parameter Estimates:        1.009216 0.191497 0.9637515 -1.724439 -0.5146967  #>  #>  Objective Function Value:   -1355.77 #>  Parameter Estimates:        1.009213 0.191497 0.9637515 -1.724439 -0.5146967  #>  #>  Objective Function Value:   -1355.77 #>  Parameter Estimates:        1.009216 0.1915003 0.9637515 -1.724439 -0.5146967  #>  #>  Objective Function Value:   -1355.77 #>  Parameter Estimates:        1.009216 0.1914937 0.9637515 -1.724439 -0.5146967  #>  #>  Objective Function Value:   -1355.77 #>  Parameter Estimates:        1.009216 0.191497 0.9637532 -1.724439 -0.5146967  #>  #>  Objective Function Value:   -1355.77 #>  Parameter Estimates:        1.009216 0.191497 0.9637515 -1.724438 -0.5146967  #>  #>  Objective Function Value:   -1355.77 #>  Parameter Estimates:        1.009216 0.191497 0.9637515 -1.724439 -0.5146939  #>  #>  Objective Function Value:   -1355.769 #>  Parameter Estimates:        1.011014 0.1932954 0.9640442 -1.724564 -0.5134024  #>  #>  Objective Function Value:   -1355.769 #>  Parameter Estimates:        1.011021 0.1932954 0.9640442 -1.724564 -0.5134024  #>  #>  Objective Function Value:   -1355.769 #>  Parameter Estimates:        1.011007 0.1932954 0.9640442 -1.724564 -0.5134024  #>  #>  Objective Function Value:   -1355.769 #>  Parameter Estimates:        1.011014 0.1932942 0.9640442 -1.724564 -0.5134024  #>  #>  Objective Function Value:   -1355.769 #>  Parameter Estimates:        1.011014 0.1932954 0.9640614 -1.724564 -0.5134024  #>  #>  Objective Function Value:   -1355.769 #>  Parameter Estimates:        1.011014 0.1932954 0.9640271 -1.724564 -0.5134024  #>  #>  Objective Function Value:   -1355.769 #>  Parameter Estimates:        1.011014 0.1932954 0.9640442 -1.724563 -0.5134024  #>  #>  Objective Function Value:   -1355.769 #>  Parameter Estimates:        1.011014 0.1932954 0.9640442 -1.724565 -0.5134024  #>  #>  Objective Function Value:   -1355.769 #>  Parameter Estimates:        1.011014 0.1932954 0.9640442 -1.724564 -0.5133971  #>  #>  Objective Function Value:   -1355.769 #>  Parameter Estimates:        1.011014 0.1932954 0.9640442 -1.724564 -0.5134077  #>  #>  Objective Function Value:   -1355.768 #>  Parameter Estimates:        1.013004 0.1937688 0.9638913 -1.725825 -0.511838  #>  #>  Objective Function Value:   -1355.768 #>  Parameter Estimates:        1.013001 0.1937688 0.9638913 -1.725825 -0.511838  #>  #>  Objective Function Value:   -1355.768 #>  Parameter Estimates:        1.013004 0.1937746 0.9638913 -1.725825 -0.511838  #>  #>  Objective Function Value:   -1355.768 #>  Parameter Estimates:        1.013004 0.193763 0.9638913 -1.725825 -0.511838  #>  #>  Objective Function Value:   -1355.768 #>  Parameter Estimates:        1.013004 0.1937688 0.9638924 -1.725825 -0.511838  #>  #>  Objective Function Value:   -1355.768 #>  Parameter Estimates:        1.013004 0.1937688 0.9638903 -1.725825 -0.511838  #>  #>  Objective Function Value:   -1355.768 #>  Parameter Estimates:        1.013004 0.1937688 0.9638913 -1.725824 -0.511838  #>  #>  Objective Function Value:   -1355.768 #>  Parameter Estimates:        1.013004 0.1937688 0.9638913 -1.725825 -0.5118357  #>  #>  Objective Function Value:   -1355.768 #>  Parameter Estimates:        1.013004 0.1937688 0.9638913 -1.725825 -0.5118402  #>  #>  Objective Function Value:   -1355.767 #>  Parameter Estimates:        1.014354 0.1948619 0.9634138 -1.725947 -0.5096059  #>  #>  Objective Function Value:   -1355.767 #>  Parameter Estimates:        1.014381 0.1948619 0.9634138 -1.725947 -0.5096059  #>  #>  Objective Function Value:   -1355.767 #>  Parameter Estimates:        1.014327 0.1948619 0.9634138 -1.725947 -0.5096059  #>  #>  Objective Function Value:   -1355.767 #>  Parameter Estimates:        1.014354 0.1948607 0.9634138 -1.725947 -0.5096059  #>  #>  Objective Function Value:   -1355.767 #>  Parameter Estimates:        1.014354 0.1948619 0.9634421 -1.725947 -0.5096059  #>  #>  Objective Function Value:   -1355.767 #>  Parameter Estimates:        1.014354 0.1948619 0.9633855 -1.725947 -0.5096059  #>  #>  Objective Function Value:   -1355.767 #>  Parameter Estimates:        1.014354 0.1948619 0.9634138 -1.725946 -0.5096059  #>  #>  Objective Function Value:   -1355.767 #>  Parameter Estimates:        1.014354 0.1948619 0.9634138 -1.725949 -0.5096059  #>  #>  Objective Function Value:   -1355.767 #>  Parameter Estimates:        1.014354 0.1948619 0.9634138 -1.725947 -0.5096013  #>  #>  Objective Function Value:   -1355.767 #>  Parameter Estimates:        1.014354 0.1948619 0.9634138 -1.725947 -0.5096104  #>  #>  Objective Function Value:   -1355.766 #>  Parameter Estimates:        1.015659 0.195163 0.9625951 -1.726725 -0.5073308  #>  #>  Objective Function Value:   -1355.766 #>  Parameter Estimates:        1.015661 0.195163 0.9625951 -1.726725 -0.5073308  #>  #>  Objective Function Value:   -1355.766 #>  Parameter Estimates:        1.015657 0.195163 0.9625951 -1.726725 -0.5073308  #>  #>  Objective Function Value:   -1355.766 #>  Parameter Estimates:        1.015659 0.1951661 0.9625951 -1.726725 -0.5073308  #>  #>  Objective Function Value:   -1355.766 #>  Parameter Estimates:        1.015659 0.19516 0.9625951 -1.726725 -0.5073308  #>  #>  Objective Function Value:   -1355.766 #>  Parameter Estimates:        1.015659 0.195163 0.9625967 -1.726725 -0.5073308  #>  #>  Objective Function Value:   -1355.766 #>  Parameter Estimates:        1.015659 0.195163 0.9625935 -1.726725 -0.5073308  #>  #>  Objective Function Value:   -1355.766 #>  Parameter Estimates:        1.015659 0.195163 0.9625951 -1.726724 -0.5073308  #>  #>  Objective Function Value:   -1355.766 #>  Parameter Estimates:        1.015659 0.195163 0.9625951 -1.726725 -0.507326  #>  #>  Objective Function Value:   -1355.766 #>  Parameter Estimates:        1.015659 0.195163 0.9625951 -1.726725 -0.5073356  #>  #>  Objective Function Value:   -1355.766 #>  Parameter Estimates:        1.017107 0.1958253 0.9620928 -1.726784 -0.5049956  #>  #>  Objective Function Value:   -1355.766 #>  Parameter Estimates:        1.017114 0.1958253 0.9620928 -1.726784 -0.5049956  #>  #>  Objective Function Value:   -1355.766 #>  Parameter Estimates:        1.017099 0.1958253 0.9620928 -1.726784 -0.5049956  #>  #>  Objective Function Value:   -1355.766 #>  Parameter Estimates:        1.017107 0.1958241 0.9620928 -1.726784 -0.5049956  #>  #>  Objective Function Value:   -1355.766 #>  Parameter Estimates:        1.017107 0.1958253 0.9621289 -1.726784 -0.5049956  #>  #>  Objective Function Value:   -1355.766 #>  Parameter Estimates:        1.017107 0.1958253 0.9620568 -1.726784 -0.5049956  #>  #>  Objective Function Value:   -1355.766 #>  Parameter Estimates:        1.017107 0.1958253 0.9620928 -1.72678 -0.5049956  #>  #>  Objective Function Value:   -1355.766 #>  Parameter Estimates:        1.017107 0.1958253 0.9620928 -1.726788 -0.5049956  #>  #>  Objective Function Value:   -1355.766 #>  Parameter Estimates:        1.017107 0.1958253 0.9620928 -1.726784 -0.5049896  #>  #>  Objective Function Value:   -1355.766 #>  Parameter Estimates:        1.017107 0.1958253 0.9620928 -1.726784 -0.5050016  #>  #>  Objective Function Value:   -1355.765 #>  Parameter Estimates:        1.018516 0.1960552 0.9614032 -1.727313 -0.5026612  #>  #>  Objective Function Value:   -1355.765 #>  Parameter Estimates:        1.019882 0.1961716 0.9607939 -1.72732 -0.5001777  #>  #>  Objective Function Value:   -1355.764 #>  Parameter Estimates:        1.02582 0.1966961 0.9581343 -1.727439 -0.4894185  #>  #>  Objective Function Value:   -1355.764 #>  Parameter Estimates:        1.039965 0.1981099 0.9517078 -1.728502 -0.4641297  #>  #>  Objective Function Value:   -1355.764 #>  Parameter Estimates:        1.039967 0.1981099 0.9517078 -1.728502 -0.4641297  #>  #>  Objective Function Value:   -1355.764 #>  Parameter Estimates:        1.039962 0.1981099 0.9517078 -1.728502 -0.4641297  #>  #>  Objective Function Value:   -1355.764 #>  Parameter Estimates:        1.039965 0.1981125 0.9517078 -1.728502 -0.4641297  #>  #>  Objective Function Value:   -1355.764 #>  Parameter Estimates:        1.039965 0.1981073 0.9517078 -1.728502 -0.4641297  #>  #>  Objective Function Value:   -1355.764 #>  Parameter Estimates:        1.039965 0.1981099 0.9517106 -1.728502 -0.4641297  #>  #>  Objective Function Value:   -1355.764 #>  Parameter Estimates:        1.039965 0.1981099 0.951705 -1.728502 -0.4641297  #>  #>  Objective Function Value:   -1355.764 #>  Parameter Estimates:        1.039965 0.1981099 0.9517078 -1.728502 -0.4641297  #>  #>  Objective Function Value:   -1355.764 #>  Parameter Estimates:        1.039965 0.1981099 0.9517078 -1.728503 -0.4641297  #>  #>  Objective Function Value:   -1355.764 #>  Parameter Estimates:        1.039965 0.1981099 0.9517078 -1.728502 -0.4641117  #>  #>  Objective Function Value:   -1355.764 #>  Parameter Estimates:        1.039965 0.1981099 0.9517078 -1.728502 -0.4641477  #>  #>  Objective Function Value:   -1355.763 #>  Parameter Estimates:        1.051707 0.2005741 0.9338701 -1.730529 -0.4212078  #>  #>  Objective Function Value:   -1355.763 #>  Parameter Estimates:        1.05171 0.2005741 0.9338701 -1.730529 -0.4212078  #>  #>  Objective Function Value:   -1355.763 #>  Parameter Estimates:        1.051707 0.2005752 0.9338701 -1.730529 -0.4212078  #>  #>  Objective Function Value:   -1355.763 #>  Parameter Estimates:        1.051707 0.2005729 0.9338701 -1.730529 -0.4212078  #>  #>  Objective Function Value:   -1355.763 #>  Parameter Estimates:        1.051707 0.2005741 0.9338809 -1.730529 -0.4212078  #>  #>  Objective Function Value:   -1355.763 #>  Parameter Estimates:        1.051707 0.2005741 0.9338593 -1.730529 -0.4212078  #>  #>  Objective Function Value:   -1355.763 #>  Parameter Estimates:        1.051707 0.2005741 0.9338701 -1.730528 -0.4212078  #>  #>  Objective Function Value:   -1355.763 #>  Parameter Estimates:        1.051707 0.2005741 0.9338701 -1.730531 -0.4212078  #>  #>  Objective Function Value:   -1355.763 #>  Parameter Estimates:        1.051707 0.2005741 0.9338701 -1.730529 -0.4212061  #>  #>  Objective Function Value:   -1355.763 #>  Parameter Estimates:        1.051707 0.2005741 0.9338701 -1.730529 -0.4212096  #>  #>  Objective Function Value:   -1355.762 #>  Parameter Estimates:        1.054887 0.1987621 0.9313222 -1.729026 -0.4139287  #>  #>  Objective Function Value:   -1355.762 #>  Parameter Estimates:        1.054885 0.1987621 0.9313222 -1.729026 -0.4139287  #>  #>  Objective Function Value:   -1355.762 #>  Parameter Estimates:        1.054887 0.1987627 0.9313222 -1.729026 -0.4139287  #>  #>  Objective Function Value:   -1355.762 #>  Parameter Estimates:        1.054887 0.1987614 0.9313222 -1.729026 -0.4139287  #>  #>  Objective Function Value:   -1355.762 #>  Parameter Estimates:        1.054887 0.1987621 0.9313241 -1.729026 -0.4139287  #>  #>  Objective Function Value:   -1355.762 #>  Parameter Estimates:        1.054887 0.1987621 0.9313202 -1.729026 -0.4139287  #>  #>  Objective Function Value:   -1355.762 #>  Parameter Estimates:        1.054887 0.1987621 0.9313222 -1.729024 -0.4139287  #>  #>  Objective Function Value:   -1355.762 #>  Parameter Estimates:        1.054887 0.1987621 0.9313222 -1.729028 -0.4139287  #>  #>  Objective Function Value:   -1355.762 #>  Parameter Estimates:        1.054887 0.1987621 0.9313222 -1.729026 -0.4139267  #>  #>  Objective Function Value:   -1355.762 #>  Parameter Estimates:        1.054887 0.1987621 0.9313222 -1.729026 -0.4139308  #>  #>  Objective Function Value:   -1355.762 #>  Parameter Estimates:        1.054848 0.1986281 0.9317153 -1.729022 -0.4140371  #>  #>  Objective Function Value:   -1355.762 #>  Parameter Estimates:        1.054853 0.1986281 0.9317153 -1.729022 -0.4140371  #>  #>  Objective Function Value:   -1355.762 #>  Parameter Estimates:        1.054844 0.1986281 0.9317153 -1.729022 -0.4140371  #>  #>  Objective Function Value:   -1355.762 #>  Parameter Estimates:        1.054848 0.1986334 0.9317153 -1.729022 -0.4140371  #>  #>  Objective Function Value:   -1355.762 #>  Parameter Estimates:        1.054848 0.1986228 0.9317153 -1.729022 -0.4140371  #>  #>  Objective Function Value:   -1355.762 #>  Parameter Estimates:        1.054848 0.1986281 0.9317179 -1.729022 -0.4140371  #>  #>  Objective Function Value:   -1355.762 #>  Parameter Estimates:        1.054848 0.1986281 0.9317126 -1.729022 -0.4140371  #>  #>  Objective Function Value:   -1355.762 #>  Parameter Estimates:        1.054848 0.1986281 0.9317153 -1.729018 -0.4140371  #>  #>  Objective Function Value:   -1355.762 #>  Parameter Estimates:        1.054848 0.1986281 0.9317153 -1.729026 -0.4140371  #>  #>  Objective Function Value:   -1355.762 #>  Parameter Estimates:        1.054848 0.1986281 0.9317153 -1.729022 -0.4140326  #>  #>  Objective Function Value:   -1355.762 #>  Parameter Estimates:        1.054848 0.1986281 0.9317153 -1.729022 -0.4140416  #>  #>  Objective Function Value:   -1355.762 #>  Parameter Estimates:        1.055076 0.1986509 0.9313534 -1.729031 -0.4132708  #>  #>  Objective Function Value:   -1355.762 #>  Parameter Estimates:        1.055103 0.1986509 0.9313534 -1.729031 -0.4132708  #>  #>  Objective Function Value:   -1355.762 #>  Parameter Estimates:        1.055049 0.1986509 0.9313534 -1.729031 -0.4132708  #>  #>  Objective Function Value:   -1355.762 #>  Parameter Estimates:        1.055076 0.1986697 0.9313534 -1.729031 -0.4132708  #>  #>  Objective Function Value:   -1355.762 #>  Parameter Estimates:        1.055076 0.1986321 0.9313534 -1.729031 -0.4132708  #>  #>  Objective Function Value:   -1355.762 #>  Parameter Estimates:        1.055076 0.1986509 0.9313658 -1.729031 -0.4132708  #>  #>  Objective Function Value:   -1355.762 #>  Parameter Estimates:        1.055076 0.1986509 0.9313409 -1.729031 -0.4132708  #>  #>  Objective Function Value:   -1355.762 #>  Parameter Estimates:        1.055076 0.1986509 0.9313534 -1.729012 -0.4132708  #>  #>  Objective Function Value:   -1355.762 #>  Parameter Estimates:        1.055076 0.1986509 0.9313534 -1.72905 -0.4132708  #>  #>  Objective Function Value:   -1355.762 #>  Parameter Estimates:        1.055076 0.1986509 0.9313534 -1.729031 -0.4132455  #>  #>  Objective Function Value:   -1355.762 #>  Parameter Estimates:        1.055076 0.1986509 0.9313534 -1.729031 -0.413296  #>  #>  Objective Function Value:   -1355.762 #>  Parameter Estimates:        1.055073 0.1986496 0.9313537 -1.72903 -0.4132735  #>  #>  Objective Function Value:   -1355.762 #>  Parameter Estimates:        1.055122 0.1986496 0.9313537 -1.72903 -0.4132735  #>  #>  Objective Function Value:   -1355.762 #>  Parameter Estimates:        1.055024 0.1986496 0.9313537 -1.72903 -0.4132735  #>  #>  Objective Function Value:   -1355.762 #>  Parameter Estimates:        1.055073 0.198674 0.9313537 -1.72903 -0.4132735  #>  #>  Objective Function Value:   -1355.762 #>  Parameter Estimates:        1.055073 0.1986252 0.9313537 -1.72903 -0.4132735  #>  #>  Objective Function Value:   -1355.762 #>  Parameter Estimates:        1.055073 0.1986496 0.9313903 -1.72903 -0.4132735  #>  #>  Objective Function Value:   -1355.762 #>  Parameter Estimates:        1.055073 0.1986496 0.9313172 -1.72903 -0.4132735  #>  #>  Objective Function Value:   -1355.762 #>  Parameter Estimates:        1.055073 0.1986496 0.9313537 -1.729009 -0.4132735  #>  #>  Objective Function Value:   -1355.762 #>  Parameter Estimates:        1.055073 0.1986496 0.9313537 -1.729051 -0.4132735  #>  #>  Objective Function Value:   -1355.762 #>  Parameter Estimates:        1.055073 0.1986496 0.9313537 -1.72903 -0.4132134  #>  #>  Objective Function Value:   -1355.762 #>  Parameter Estimates:        1.055073 0.1986496 0.9313537 -1.72903 -0.4133335  #>  #>  Objective Function Value:   -1355.762 #>  Parameter Estimates:        1.055073 0.1986496 0.9313537 -1.72903 -0.4132735  #>  #>  Objective Function Value:   -852.99 #>  Parameter Estimates:        1.744351 0.3284269 0.5633309 -1.045807 -0.4132735   #>  #> Title: #>  Generalized Hyperbolic Parameter Estimation  #>  #> Call: #>  ghFit(x = s, alpha = 1, beta = 0, delta = 1, mu = mean(s), doplot = TRUE) #>  #> Model: #>  Generalized Hyperbolic Distribution #>  #> Estimated Parameter(s): #>      alpha       beta      delta         mu     lambda  #>  1.7443507  0.3284269  0.5633309 -1.0458067 -0.4132735  #>  #> Description: #>  Mon Aug  8 08:09:35 2022 by user: georgi  #>"},{"path":"/reference/dist-ghMode.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized Hyperbolic Mode — ghMode","title":"Generalized Hyperbolic Mode — ghMode","text":"Computes mode generalized hyperbolic function.","code":""},{"path":"/reference/dist-ghMode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized Hyperbolic Mode — ghMode","text":"","code":"ghMode(alpha = 1, beta = 0, delta = 1, mu = 0, lambda = -1/2)"},{"path":"/reference/dist-ghMode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized Hyperbolic Mode — ghMode","text":"alpha, beta, delta, mu, lambda shape parameter alpha;         skewness parameter beta, abs(beta)          range (0, alpha);         scale parameter delta, delta must zero          positive;          location parameter mu, default 0.         meaning parameters first          parameterization pm=1 default          parameterization selection.         second parameterization, pm=2 alpha         beta take meaning shape parameters         (usually named) zeta rho.         third parameterization, pm=3 alpha         beta take meaning shape parameters         (usually named) xi chi.         fourth parameterization, pm=4 alpha         beta take meaning shape parameters         (usually named) .bar b.bar.","code":""},{"path":"/reference/dist-ghMode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalized Hyperbolic Mode — ghMode","text":"returns mode generalized hyperbolic distribution.      numeric value.","code":""},{"path":"/reference/dist-ghMode.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generalized Hyperbolic Mode — ghMode","text":"Atkinson, .C. (1982);      simulation generalized inverse Gaussian hyperbolic      random variables,     SIAM J. Sci. Stat. Comput. 3, 502--515. Barndorff-Nielsen O. (1977);     Exponentially decreasing distributions logarithm      particle size,      Proc. Roy. Soc. Lond., A353, 401--419. Barndorff-Nielsen O., Blaesild, P. (1983);      Hyperbolic distributions. Encyclopedia Statistical      Sciences,      Eds., Johnson N.L., Kotz S. Read C.B.,      Vol. 3, pp. 700--707. New York: Wiley. Raible S. (2000);     Levy Processes Finance: Theory, Numerics Empirical Facts,     PhD Thesis, University Freiburg, Germany, 161 pages.","code":""},{"path":"/reference/dist-ghMode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalized Hyperbolic Mode — ghMode","text":"","code":"## ghMode -    ghMode() #> [1] -1.344762e-08"},{"path":"/reference/dist-ghMoments.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized Hyperbolic Distribution Moments — ghMoments","title":"Generalized Hyperbolic Distribution Moments — ghMoments","text":"Calculates moments generalized hyperbbolic     distribution function","code":""},{"path":"/reference/dist-ghMoments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized Hyperbolic Distribution Moments — ghMoments","text":"","code":"ghMean(alpha=1, beta=0, delta=1, mu=0, lambda=-1/2) ghVar(alpha=1, beta=0, delta=1, mu=0, lambda=-1/2) ghSkew(alpha=1, beta=0, delta=1, mu=0, lambda=-1/2) ghKurt(alpha=1, beta=0, delta=1, mu=0, lambda=-1/2)  ghMoments(order, type = c(\"raw\", \"central\", \"mu\"),     alpha = 1, beta=0, delta=1, mu=0, lambda=-1/2)"},{"path":"/reference/dist-ghMoments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized Hyperbolic Distribution Moments — ghMoments","text":"alpha, beta, delta, mu, lambda numeric values.         alpha first shape parameter;         beta second shape parameter range (0, alpha);         delta scale parameter, must zero positive;          mu location parameter, default 0;         lambda defines sublclass, default -1/2. order integer value, order moment. type character value,          \"raw\" returns moments zero,         \"central\" returns central moments mean,         \"mu\" returns moments location parameter mu.","code":""},{"path":"/reference/dist-ghMoments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalized Hyperbolic Distribution Moments — ghMoments","text":"numerical value.","code":""},{"path":"/reference/dist-ghMoments.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generalized Hyperbolic Distribution Moments — ghMoments","text":"Scott, D. J., Wuertz, D. Tran, T. T. (2008)      Moments Generalized Hyperbolic Distribution.      Preprint.","code":""},{"path":"/reference/dist-ghMoments.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generalized Hyperbolic Distribution Moments — ghMoments","text":"Diethelm Wuertz.","code":""},{"path":"/reference/dist-ghMoments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalized Hyperbolic Distribution Moments — ghMoments","text":"","code":"## ghMean -    ghMean(alpha=1.1, beta=0.1, delta=0.8, mu=-0.3, lambda=1) #> [1] -0.08410502     ## ghKurt -    ghKurt(alpha=1.1, beta=0.1, delta=0.8, mu=-0.3, lambda=1) #> [1] 2.044599     ## ghMoments -    ghMoments(4,       alpha=1.1, beta=0.1, delta=0.8, mu=-0.3, lambda=1) #> [1] 23.96634    ghMoments(4, \"central\",      alpha=1.1, beta=0.1, delta=0.8, mu=-0.3, lambda=1) #> [1] 24.18639"},{"path":"/reference/dist-ghRobMoments.html","id":null,"dir":"Reference","previous_headings":"","what":"Robust Moments for the GH — ghRobMoments","title":"Robust Moments for the GH — ghRobMoments","text":"Computes first four robust moments   generalized hyperbolic distribution..","code":""},{"path":"/reference/dist-ghRobMoments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Robust Moments for the GH — ghRobMoments","text":"","code":"ghMED(alpha = 1, beta = 0, delta = 1, mu = 0, lambda = -1/2) ghIQR(alpha= 1, beta = 0, delta = 1, mu = 0, lambda = -1/2) ghSKEW(alpha = 1, beta = 0, delta = 1, mu = 0, lambda = -1/2) ghKURT(alpha = 1, beta = 0, delta = 1, mu = 0, lambda = -1/2)"},{"path":"/reference/dist-ghRobMoments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Robust Moments for the GH — ghRobMoments","text":"alpha, beta, delta, mu, lambda numeric values.     alpha first shape parameter;     beta second shape parameter range (0, alpha);     delta scale parameter, must zero positive;     mu location parameter, default 0;     lambda defines sublclass, default -1/2.     meanings parameters first     parameterization pm=1 default     parameterization.     second parameterization, pm=2 alpha     beta take meaning shape parameters     (usually named) zeta rho.     third parameterization, pm=3 alpha     beta take meaning shape parameters     (usually named) xi chi.     fourth parameterization, pm=4 alpha     beta take meaning shape parameters     (usually named) .bar b.bar.","code":""},{"path":"/reference/dist-ghRobMoments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Robust Moments for the GH — ghRobMoments","text":"values *gh functions numeric vectors: d* returns density, p* returns distribution function, q* returns quantile function, r* generates random deviates.   values attributes named \"param\" listing   values distributional parameters.","code":""},{"path":"/reference/dist-ghRobMoments.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Robust Moments for the GH — ghRobMoments","text":"Diethelm Wuertz.","code":""},{"path":"/reference/dist-ghRobMoments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Robust Moments for the GH — ghRobMoments","text":"","code":"## ghMED -    # Median:    ghMED(alpha = 1, beta = 0, delta = 1, mu = 0, lambda = -1/2) #>         MED  #> 1.19506e-08   ## ghIQR -    # Inter-quartile Range:    ghIQR(alpha = 1, beta = 0, delta = 1, mu = 0, lambda = -1/2) #>      IQR  #> 1.079164   ## ghSKEW -    # Robust Skewness:    ghSKEW(alpha = 1, beta = 0, delta = 1, mu = 0, lambda = -1/2) #>          SKEW  #> -1.680476e-08   ## ghKURT -    # Robust Kurtosis:    ghKURT(alpha = 1, beta = 0, delta = 1, mu = 0, lambda = -1/2) #>     KURT  #> 1.387174"},{"path":"/reference/dist-ghSlider.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized Hyperbolic Distribution Slider — ghSlider","title":"Generalized Hyperbolic Distribution Slider — ghSlider","text":"Displays interactively dependence      generalized hyperbolic distribution parameters.","code":""},{"path":"/reference/dist-ghSlider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized Hyperbolic Distribution Slider — ghSlider","text":"","code":"ghSlider()"},{"path":"/reference/dist-ghSlider.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalized Hyperbolic Distribution Slider — ghSlider","text":"tcl/tk based graphical user interface.     nice display educational purposes investigate     densities probabilities generalized hyperbolic      distribution.","code":""},{"path":"/reference/dist-ghSlider.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalized Hyperbolic Distribution Slider — ghSlider","text":"","code":"## ghSlider -    # ghSlider()"},{"path":"/reference/dist-ght.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized Hyperbolic Student-t — ght","title":"Generalized Hyperbolic Student-t — ght","text":"Density, distribution function, quantile function      random generation hyperbolic distribution.","code":""},{"path":"/reference/dist-ght.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized Hyperbolic Student-t — ght","text":"","code":"dght(x, beta = 0.1, delta = 1, mu = 0, nu = 10, log = FALSE) pght(q, beta = 0.1, delta = 1, mu = 0, nu = 10) qght(p, beta = 0.1, delta = 1, mu = 0, nu = 10) rght(n, beta = 0.1, delta = 1, mu = 0, nu = 10)"},{"path":"/reference/dist-ght.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized Hyperbolic Student-t — ght","text":"beta, delta, mu numeric values.         beta skewness parameter range (0, alpha);         delta scale parameter, must zero positive;          mu location parameter, default 0.         parameters first parameterization. nu numeric value, number degrees freedom.         Note, alpha takes limit abs(beta),          lambda=-nu/2. x, q numeric vector quantiles. p numeric vector probabilities. n number observations. log logical, TRUE, probabilities p given          log(p).","code":""},{"path":"/reference/dist-ght.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalized Hyperbolic Student-t — ght","text":"values *ght functions numeric vectors:  d* returns density, p* returns distribution function, q* returns quantile function, r* generates random deviates.     values attributes named \"param\" listing     values distributional parameters.","code":""},{"path":"/reference/dist-ght.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generalized Hyperbolic Student-t — ght","text":"Atkinson, .C. (1982);      simulation generalized inverse Gaussian hyperbolic      random variables,     SIAM J. Sci. Stat. Comput. 3, 502--515. Barndorff-Nielsen O. (1977);     Exponentially decreasing distributions logarithm      particle size,      Proc. Roy. Soc. Lond., A353, 401--419. Barndorff-Nielsen O., Blaesild, P. (1983);      Hyperbolic distributions. Encyclopedia Statistical      Sciences,      Eds., Johnson N.L., Kotz S. Read C.B.,      Vol. 3, pp. 700--707. New York: Wiley. Raible S. (2000);     Levy Processes Finance: Theory, Numerics Empirical Facts,     PhD Thesis, University Freiburg, Germany, 161 pages.","code":""},{"path":"/reference/dist-ght.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalized Hyperbolic Student-t — ght","text":"","code":"## ght -    #"},{"path":"/reference/dist-ghtFit.html","id":null,"dir":"Reference","previous_headings":"","what":"GHT Distribution Fit — ghtFit","title":"GHT Distribution Fit — ghtFit","text":"Estimates distributional parameters      generalized hyperbolic Student-t distribution.","code":""},{"path":"/reference/dist-ghtFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GHT Distribution Fit — ghtFit","text":"","code":"ghtFit(x, beta = 0.1, delta = 1, mu = 0, nu = 10,      scale = TRUE, doplot = TRUE, span = \"auto\", trace = TRUE,      title = NULL, description = NULL, ...)"},{"path":"/reference/dist-ghtFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GHT Distribution Fit — ghtFit","text":"beta, delta, mu numeric values.         beta skewness parameter range (0, alpha);         delta scale parameter, must zero positive;          mu location parameter, default 0.         parameters first parameterization. nu defines number degrees freedom.          Note, alpha takes limit abs(beta),          lambda=-nu/2. x numeric vector. scale logical flag, default TRUE. time series         scaled standard deviation achieve stable         optimization? doplot logical flag. plot displayed? span x-coordinates plot, default 100 values          automatically selected ranging 0.001,          0.999 quantiles. Alternatively, can specify         range expression like span=seq(min, max,         times = n), , min max          left right endpoints range, n gives          number intermediate points. trace logical flag. parameter estimation process         traced? title character string allows project title. description character string allows brief description. ... parameters parsed.","code":""},{"path":"/reference/dist-ghtFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GHT Distribution Fit — ghtFit","text":"returns list following components: estimate point maximum value log liklihood          function obtained. minimum value estimated maximum, .e. value         log liklihood function. code integer indicating optimization process terminated.         1: relative gradient close zero, current iterate probably              solution;          2: successive iterates within tolerance, current iterate probably              solution;          3: last global step failed locate point lower estimate.              Either estimate approximate local minimum              function steptol small;          4: iteration limit exceeded;          5: maximum step size stepmax exceeded five consecutive times.              Either function unbounded , becomes asymptotic              finite value direction stepmax              small. gradient gradient estimated maximum. steps number function calls.","code":""},{"path":"/reference/dist-ghtFit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GHT Distribution Fit — ghtFit","text":"function nlm used minimize \"negative\"      maximum log-likelihood function. nlm carries minimization      using Newton-type algorithm.","code":""},{"path":"/reference/dist-ghtFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GHT Distribution Fit — ghtFit","text":"","code":"## ghtFit -    # Simulate Random Variates:    set.seed(1953)     ## ghtFit -      # Fit Parameters:"},{"path":"/reference/dist-ghtMode.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized Hyperbolic Student-t Mode — ghtMode","title":"Generalized Hyperbolic Student-t Mode — ghtMode","text":"Computes mode generalized hyperbolic      Student-t distribution.","code":""},{"path":"/reference/dist-ghtMode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized Hyperbolic Student-t Mode — ghtMode","text":"","code":"ghtMode(beta = 0.1, delta = 1, mu = 0, nu = 10)"},{"path":"/reference/dist-ghtMode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized Hyperbolic Student-t Mode — ghtMode","text":"beta, delta, mu numeric values.         beta skewness parameter range (0, alpha);         delta scale parameter, must zero positive;          mu location parameter, default 0.         parameters first parameterization. nu numeric value, number degrees freedom.         Note, alpha takes limit abs(beta),          lambda=-nu/2.","code":""},{"path":"/reference/dist-ghtMode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalized Hyperbolic Student-t Mode — ghtMode","text":"returns mode generalized hyperbolic Student-t     distribution. numeric value.","code":""},{"path":"/reference/dist-ghtMode.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generalized Hyperbolic Student-t Mode — ghtMode","text":"Atkinson, .C. (1982);      simulation generalized inverse Gaussian hyperbolic      random variables,     SIAM J. Sci. Stat. Comput. 3, 502--515. Barndorff-Nielsen O. (1977);     Exponentially decreasing distributions logarithm      particle size,      Proc. Roy. Soc. Lond., A353, 401--419. Barndorff-Nielsen O., Blaesild, P. (1983);      Hyperbolic distributions. Encyclopedia Statistical      Sciences,      Eds., Johnson N.L., Kotz S. Read C.B.,      Vol. 3, pp. 700--707. New York: Wiley. Raible S. (2000);     Levy Processes Finance: Theory, Numerics Empirical Facts,     PhD Thesis, University Freiburg, Germany, 161 pages.","code":""},{"path":"/reference/dist-ghtMode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalized Hyperbolic Student-t Mode — ghtMode","text":"","code":"## ghtMode -    ghtMode() #> [1] 0.009090738"},{"path":"/reference/dist-ghtMoments.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized Hyperbolic Student-t Moments — ghtMoments","title":"Generalized Hyperbolic Student-t Moments — ghtMoments","text":"Calculates moments generalized hyperbbolic     Student-t distribution function.","code":""},{"path":"/reference/dist-ghtMoments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized Hyperbolic Student-t Moments — ghtMoments","text":"","code":"ghtMean(beta=0.1, delta=1, mu=0, nu=10) ghtVar(beta=0.1, delta=1, mu=0, nu=10) ghtSkew(beta=0.1, delta=1, mu=0, nu=10) ghtKurt(beta=0.1, delta=1, mu=0, nu=10)  ghtMoments(order, type = c(\"raw\", \"central\", \"mu\"),     beta=0.1, delta=1, mu=0, nu=10)"},{"path":"/reference/dist-ghtMoments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized Hyperbolic Student-t Moments — ghtMoments","text":"beta, delta, mu numeric values.         beta skewness parameter range (0, alpha);         delta scale parameter, must zero positive;          mu location parameter, default 0.         parameters first parameterization. nu numeric value, number degrees freedom.         Note, alpha takes limit abs(beta),          lambda=-nu/2. order integer value, order moment. type character value,          \"raw\" returns moments zero,         \"central\" returns central moments mean,         \"mu\" returns moments location parameter mu.","code":""},{"path":"/reference/dist-ghtMoments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalized Hyperbolic Student-t Moments — ghtMoments","text":"numerical value.","code":""},{"path":"/reference/dist-ghtMoments.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generalized Hyperbolic Student-t Moments — ghtMoments","text":"Scott, D.J., Wuertz, D. Tran, T.T. (2008)      Moments Generalized Hyperbolic Distribution.      Preprint.","code":""},{"path":"/reference/dist-ghtMoments.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generalized Hyperbolic Student-t Moments — ghtMoments","text":"Diethelm Wuertz.","code":""},{"path":"/reference/dist-ghtMoments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalized Hyperbolic Student-t Moments — ghtMoments","text":"","code":"## ghtMean -    ghtMean(beta=0.2, delta=1.2, mu=-0.5, nu=4) #> [1] -0.3560003     ## ghtKurt -    ghtKurt(beta=0.2, delta=1.2, mu=-0.5, nu=4) #> [1] 20654306687     ## ghtMoments -    ghtMoments(4,       beta=0.2, delta=1.2, mu=-0.5, nu=4) #> [1] 20736476941    ghtMoments(4, \"central\",      beta=0.2, delta=1.2, mu=-0.5, nu=4) #> [1] 20736506474"},{"path":"/reference/dist-ghtRobMoments.html","id":null,"dir":"Reference","previous_headings":"","what":"Robust Moments for the GHT — ghtRobMoments","title":"Robust Moments for the GHT — ghtRobMoments","text":"Computes first four robust moments   generalized hyperbolic Student-t.","code":""},{"path":"/reference/dist-ghtRobMoments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Robust Moments for the GHT — ghtRobMoments","text":"","code":"ghtMED(beta = 0.1, delta = 1, mu = 0, nu = 10) ghtIQR(beta = 0.1, delta = 1, mu = 0, nu = 10) ghtSKEW(beta = 0.1, delta = 1, mu = 0, nu = 10) ghtKURT(beta = 0.1, delta = 1, mu = 0, nu = 10)"},{"path":"/reference/dist-ghtRobMoments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Robust Moments for the GHT — ghtRobMoments","text":"beta, delta, mu numeric values.         beta skewness parameter range (0, alpha);         delta scale parameter, must zero positive;         mu location parameter, default 0.         parameters first parameterization. nu numeric value, number degrees freedom.         Note, alpha takes limit abs(beta),         lambda=-nu/2.","code":""},{"path":"/reference/dist-ghtRobMoments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Robust Moments for the GHT — ghtRobMoments","text":"values *ght functions numeric vectors: d* returns density, p* returns distribution function, q* returns quantile function, r* generates random deviates.     values attributes named \"param\" listing     values distributional parameters.","code":""},{"path":"/reference/dist-ghtRobMoments.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Robust Moments for the GHT — ghtRobMoments","text":"Diethelm Wuertz.","code":""},{"path":"/reference/dist-ghtRobMoments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Robust Moments for the GHT — ghtRobMoments","text":"","code":"## ghtMED -    # Median:    ghtMED(beta = 0.1, delta = 1, mu = 0, nu = 10) #>        MED  #> 0.01111361   ## ghtIQR -    # Inter-quartile Range:    ghtIQR(beta = 0.1, delta = 1, mu = 0, nu = 10) #>     IQR  #> 0.44269   ## ghtSKEW -    # Robust Skewness:    ghtSKEW(beta = 0.1, delta = 1, mu = 0, nu = 10) #>        SKEW  #> 0.002441764   ## ghtKURT -    # Robust Kurtosis:    ghtKURT(beta = 0.1, delta = 1, mu = 0, nu = 10) #>    KURT  #> 1.27687"},{"path":"/reference/dist-gld.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized Lambda Distribution — gld","title":"Generalized Lambda Distribution — gld","text":"Density, distribution function, quantile function      random generation generalized lambda     distribution.","code":""},{"path":"/reference/dist-gld.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized Lambda Distribution — gld","text":"","code":"dgld(x, lambda1 = 0, lambda2 = -1, lambda3 = -1/8, lambda4 = -1/8, log = FALSE) pgld(q, lambda1 = 0, lambda2 = -1, lambda3 = -1/8, lambda4 = -1/8) qgld(p, lambda1 = 0, lambda2 = -1, lambda3 = -1/8, lambda4 = -1/8) rgld(n, lambda1 = 0, lambda2 = -1, lambda3 = -1/8, lambda4 = -1/8)"},{"path":"/reference/dist-gld.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized Lambda Distribution — gld","text":"lambda1, lambda2, lambda3, lambda4 numeric values         lambda1 location parameter,         lambda2 location parameter,         lambda3 first shape parameter,         lambda4 second shape parameter. n number observations. p numeric vector probabilities. x, q numeric vector quantiles. log logical, TRUE, probabilities p given          log(p).","code":""},{"path":"/reference/dist-gld.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalized Lambda Distribution — gld","text":"values *gld functions numeric vectors:  d* returns density, p* returns distribution function, q* returns quantile function, r* generates random deviates.     values attributes named \"param\" listing     values distributional parameters.","code":""},{"path":"/reference/dist-gld.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generalized Lambda Distribution — gld","text":"Chong Gu code implemented R's      contributed package gld.","code":""},{"path":"/reference/dist-gld.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalized Lambda Distribution — gld","text":"","code":"## rgld -    set.seed(1953)    r = rgld(500,       lambda1=0, lambda2=-1, lambda3=-1/8, lambda4=-1/8)    plot(r, type = \"l\", col = \"steelblue\",      main = \"gld: lambda1=0 lambda2=-1 lambda3/4=-1/8\")    ## dgld -     # Plot empirical density and compare with true density:    hist(r, n = 25, probability = TRUE, border = \"white\",       col = \"steelblue\")    x = seq(-5, 5, 0.25)    lines(x, dgld(x,       lambda1=0, lambda2=-1, lambda3=-1/8, lambda4=-1/8))    ## pgld -      # Plot df and compare with true df:    plot(sort(r), ((1:500)-0.5)/500, main = \"Probability\",       col = \"steelblue\")    lines(x, pgld(x,       lambda1=0, lambda2=-1, lambda3=-1/8, lambda4=-1/8))      ## qgld -    # Compute Quantiles:    qgld(pgld(seq(-5, 5, 1),       lambda1=0, lambda2=-1, lambda3=-1/8, lambda4=-1/8),       lambda1=0, lambda2=-1, lambda3=-1/8, lambda4=-1/8)  #>  [1] -5 -4 -3 -2 -1  0  1  2  3  4  5"},{"path":"/reference/dist-gldFit.html","id":null,"dir":"Reference","previous_headings":"","what":"GH Distribution Fit — gldFit","title":"GH Distribution Fit — gldFit","text":"Estimates distrinbutional parameters      generalized lambda distribution.","code":""},{"path":"/reference/dist-gldFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GH Distribution Fit — gldFit","text":"","code":"gldFit(x, lambda1 = 0, lambda2 = -1, lambda3 = -1/8, lambda4 = -1/8,      method = c(\"mle\", \"mps\", \"gof\", \"hist\", \"rob\"),     scale = NA, doplot = TRUE, add = FALSE, span = \"auto\", trace = TRUE,      title = NULL, description = NULL, ...)"},{"path":"/reference/dist-gldFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GH Distribution Fit — gldFit","text":"x numeric vector. lambda1, lambda2, lambda3, lambda4 numeric values         lambda1 location parameter,         lambda2 location parameter,         lambda3 first shape parameter,         lambda4 second shape parameter. method character string, estimation approach         fit distributional parameters, see details. scale used. doplot logical flag. plot displayed? add logical flag. new fit added existing plot? span x-coordinates plot, default 100 values          automatically selected ranging 0.001,          0.999 quantiles. Alternatively, can specify         range expression like span=seq(min, max,         times = n), , min max          left rigldt endpoints range, n gives          number intermediate points. trace logical flag. parameter estimation process         traced? title character string allows project title. description character string allows brief description. ... parameters parsed.","code":""},{"path":"/reference/dist-gldFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GH Distribution Fit — gldFit","text":"returns list following components: estimate point maximum value log liklihood          function obtained. minimum value estimated maximum, .e. value         log liklihood function. code integer indicating optimization process terminated.         1: relative gradient close zero, current iterate probably              solution;          2: successive iterates within tolerance, current iterate probably              solution;          3: last global step failed locate point lower estimate.              Either estimate approximate local minimum              function steptol small;          4: iteration limit exceeded;          5: maximum step size stepmax exceeded five consecutive times.              Either function unbounded , becomes asymptotic              finite value direction stepmax              small. gradient gradient estimated maximum. steps number function calls.","code":""},{"path":"/reference/dist-gldFit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GH Distribution Fit — gldFit","text":"function nlminb used minimize objective      function. following approaches implemented: \"mle\", maximimum log likelihoo estimation. \"mps\", maximum product spacing estimation. \"gof\", goodness fit approaches,          type=\"ad\" Anderson-Darling,          type=\"cvm\" Cramer-vonMise,         type=\"ks\" Kolmogorov-Smirnov. \"hist\", histogram binning approaches,            \"fd\" Freedman-Diaconis binning,         \"scott\", Scott histogram binning,         \"sturges\", Sturges histogram binning. \"rob\", robust moment matching.","code":""},{"path":"/reference/dist-gldFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GH Distribution Fit — gldFit","text":"","code":"## gldFit -    # Simulate Random Variates:    set.seed(1953)    s = rgld(n = 1000, lambda1=0, lambda2=-1, lambda3=-1/8, lambda4=-1/8)   ## gldFit -      # Fit Parameters:    gldFit(s, lambda1=0, lambda2=-1, lambda3=-1/8, lambda4=-1/8,       doplot = TRUE, trace = TRUE)  #>  #>  Objective Function Value:   81.30868 #>  Parameter Estimates:        0 -1 -0.125 -0.125  #>  #>  Objective Function Value:   81.30868 #>  Parameter Estimates:        1.490116e-08 -1 -0.125 -0.125  #>  #>  Objective Function Value:   81.30868 #>  Parameter Estimates:        0 -1 -0.125 -0.125  #>  #>  Objective Function Value:   81.30868 #>  Parameter Estimates:        0 -1 -0.125 -0.125  #>  #>  Objective Function Value:   81.30868 #>  Parameter Estimates:        0 -1 -0.125 -0.125  #>  #>  Objective Function Value:   Inf #>  Parameter Estimates:        -0.8312542 -1.30886 -0.3002453 -1e-10  #>  #>  Objective Function Value:   Inf #>  Parameter Estimates:        -0.02159336 -1.008023 -0.1295523 -0.03681965  #>  #>  Objective Function Value:   80.48536 #>  Parameter Estimates:        -0.002159336 -1.000802 -0.1254552 -0.116182  #>  #>  Objective Function Value:   80.48451 #>  Parameter Estimates:        -0.002150881 -1.000802 -0.1254552 -0.116182  #>  #>  Objective Function Value:   80.48523 #>  Parameter Estimates:        -0.002159336 -1.000794 -0.1254552 -0.116182  #>  #>  Objective Function Value:   80.48536 #>  Parameter Estimates:        -0.002159336 -1.000802 -0.1254468 -0.116182  #>  #>  Objective Function Value:   80.48415 #>  Parameter Estimates:        -0.002159336 -1.000802 -0.1254552 -0.1161904  #>  #>  Objective Function Value:   80.21165 #>  Parameter Estimates:        0.006917198 -1.000468 -0.1263326 -0.1162602  #>  #>  Objective Function Value:   80.21164 #>  Parameter Estimates:        0.006917098 -1.000468 -0.1263326 -0.1162602  #>  #>  Objective Function Value:   80.21165 #>  Parameter Estimates:        0.006917198 -1.000468 -0.1263326 -0.1162602  #>  #>  Objective Function Value:   80.21156 #>  Parameter Estimates:        0.006917198 -1.000468 -0.1263336 -0.1162602  #>  #>  Objective Function Value:   80.21165 #>  Parameter Estimates:        0.006917198 -1.000468 -0.1263326 -0.1162601  #>  #>  Objective Function Value:   81.26779 #>  Parameter Estimates:        0.006681668 -0.9992324 -0.1353701 -0.1163755  #>  #>  Objective Function Value:   80.11674 #>  Parameter Estimates:        0.005929069 -1.000284 -0.1279977 -0.1160433  #>  #>  Objective Function Value:   80.11674 #>  Parameter Estimates:        0.005929133 -1.000284 -0.1279977 -0.1160433  #>  #>  Objective Function Value:   80.11675 #>  Parameter Estimates:        0.005929069 -1.000285 -0.1279977 -0.1160433  #>  #>  Objective Function Value:   80.11674 #>  Parameter Estimates:        0.005929069 -1.000284 -0.1279976 -0.1160433  #>  #>  Objective Function Value:   80.11674 #>  Parameter Estimates:        0.005929069 -1.000284 -0.1279977 -0.1160433  #>  #>  Objective Function Value:   80.13618 #>  Parameter Estimates:        0.004975823 -1.000013 -0.1270962 -0.1174699  #>  #>  Objective Function Value:   80.11371 #>  Parameter Estimates:        0.005672249 -1.000211 -0.1277548 -0.1164276  #>  #>  Objective Function Value:   80.11371 #>  Parameter Estimates:        0.005672333 -1.000211 -0.1277548 -0.1164276  #>  #>  Objective Function Value:   80.11371 #>  Parameter Estimates:        0.005672249 -1.000211 -0.1277548 -0.1164276  #>  #>  Objective Function Value:   80.11371 #>  Parameter Estimates:        0.005672249 -1.000211 -0.1277549 -0.1164276  #>  #>  Objective Function Value:   80.11371 #>  Parameter Estimates:        0.005672249 -1.000211 -0.1277548 -0.1164274  #>  #>  Objective Function Value:   80.11232 #>  Parameter Estimates:        0.005213364 -1.000179 -0.1277391 -0.1161704  #>  #>  Objective Function Value:   80.11232 #>  Parameter Estimates:        0.005213501 -1.000179 -0.1277391 -0.1161704  #>  #>  Objective Function Value:   80.11232 #>  Parameter Estimates:        0.005213364 -1.00018 -0.1277391 -0.1161704  #>  #>  Objective Function Value:   80.11232 #>  Parameter Estimates:        0.005213364 -1.000179 -0.127739 -0.1161704  #>  #>  Objective Function Value:   80.11232 #>  Parameter Estimates:        0.005213364 -1.000179 -0.1277391 -0.1161704  #>  #>  Objective Function Value:   80.10954 #>  Parameter Estimates:        0.005004645 -1.000069 -0.1274422 -0.1165367  #>  #>  Objective Function Value:   80.10954 #>  Parameter Estimates:        0.005004572 -1.000069 -0.1274422 -0.1165367  #>  #>  Objective Function Value:   80.10954 #>  Parameter Estimates:        0.005004645 -1.00007 -0.1274422 -0.1165367  #>  #>  Objective Function Value:   80.10954 #>  Parameter Estimates:        0.005004645 -1.000069 -0.1274423 -0.1165367  #>  #>  Objective Function Value:   80.10954 #>  Parameter Estimates:        0.005004645 -1.000069 -0.1274422 -0.1165367  #>  #>  Objective Function Value:   80.10876 #>  Parameter Estimates:        0.00464445 -0.9996937 -0.1274452 -0.1164519  #>  #>  Objective Function Value:   80.10876 #>  Parameter Estimates:        0.004644565 -0.9996937 -0.1274452 -0.1164519  #>  #>  Objective Function Value:   80.10876 #>  Parameter Estimates:        0.00464445 -0.9996948 -0.1274452 -0.1164519  #>  #>  Objective Function Value:   80.10876 #>  Parameter Estimates:        0.00464445 -0.9996937 -0.1274451 -0.1164519  #>  #>  Objective Function Value:   80.10876 #>  Parameter Estimates:        0.00464445 -0.9996937 -0.1274452 -0.116452  #>  #>  Objective Function Value:   80.10776 #>  Parameter Estimates:        0.004729161 -0.9991923 -0.1273482 -0.1165522  #>  #>  Objective Function Value:   80.10776 #>  Parameter Estimates:        0.004729096 -0.9991923 -0.1273482 -0.1165522  #>  #>  Objective Function Value:   80.10777 #>  Parameter Estimates:        0.004729161 -0.999198 -0.1273482 -0.1165522  #>  #>  Objective Function Value:   80.10776 #>  Parameter Estimates:        0.004729161 -0.9991923 -0.1273483 -0.1165522  #>  #>  Objective Function Value:   80.10776 #>  Parameter Estimates:        0.004729161 -0.9991923 -0.1273482 -0.1165522  #>  #>  Objective Function Value:   80.10703 #>  Parameter Estimates:        0.004694759 -0.9986897 -0.1272506 -0.1164311  #>  #>  Objective Function Value:   80.10634 #>  Parameter Estimates:        0.004684549 -0.9980557 -0.1271283 -0.1163592  #>  #>  Objective Function Value:   80.10527 #>  Parameter Estimates:        0.004661819 -0.9966442 -0.1268559 -0.116199  #>  #>  Objective Function Value:   80.10527 #>  Parameter Estimates:        0.004661905 -0.9966442 -0.1268559 -0.116199  #>  #>  Objective Function Value:   80.10527 #>  Parameter Estimates:        0.004661819 -0.9966448 -0.1268559 -0.116199  #>  #>  Objective Function Value:   80.10527 #>  Parameter Estimates:        0.004661819 -0.9966442 -0.1268558 -0.116199  #>  #>  Objective Function Value:   80.10527 #>  Parameter Estimates:        0.004661819 -0.9966442 -0.126856 -0.116199  #>  #>  Objective Function Value:   80.10527 #>  Parameter Estimates:        0.004661819 -0.9966442 -0.1268559 -0.116199  #>  #>  Objective Function Value:   80.1012 #>  Parameter Estimates:        0.00480587 -0.9940431 -0.1268689 -0.115919  #>  #>  Objective Function Value:   80.1012 #>  Parameter Estimates:        0.004806344 -0.9940431 -0.1268689 -0.115919  #>  #>  Objective Function Value:   80.1012 #>  Parameter Estimates:        0.00480587 -0.9940433 -0.1268689 -0.115919  #>  #>  Objective Function Value:   80.1012 #>  Parameter Estimates:        0.00480587 -0.9940431 -0.1268688 -0.115919  #>  #>  Objective Function Value:   80.1012 #>  Parameter Estimates:        0.00480587 -0.9940431 -0.1268689 -0.1159189  #>  #>  Objective Function Value:   80.09835 #>  Parameter Estimates:        0.004980819 -0.9914698 -0.1265043 -0.1156365  #>  #>  Objective Function Value:   80.0943 #>  Parameter Estimates:        0.00529132 -0.9868639 -0.1260885 -0.1149574  #>  #>  Objective Function Value:   80.09116 #>  Parameter Estimates:        0.00591045 -0.9776798 -0.1252595 -0.1136034  #>  #>  Objective Function Value:   80.09116 #>  Parameter Estimates:        0.005910619 -0.9776798 -0.1252595 -0.1136034  #>  #>  Objective Function Value:   80.09116 #>  Parameter Estimates:        0.00591028 -0.9776798 -0.1252595 -0.1136034  #>  #>  Objective Function Value:   80.09116 #>  Parameter Estimates:        0.00591045 -0.9776801 -0.1252595 -0.1136034  #>  #>  Objective Function Value:   80.09116 #>  Parameter Estimates:        0.00591045 -0.9776798 -0.1252595 -0.1136034  #>  #>  Objective Function Value:   80.09116 #>  Parameter Estimates:        0.00591045 -0.9776798 -0.1252595 -0.1136032  #>  #>  Objective Function Value:   80.0659 #>  Parameter Estimates:        0.005076356 -0.9611771 -0.1234823 -0.1127458  #>  #>  Objective Function Value:   80.0659 #>  Parameter Estimates:        0.005076546 -0.9611771 -0.1234823 -0.1127458  #>  #>  Objective Function Value:   80.06589 #>  Parameter Estimates:        0.005076356 -0.9611775 -0.1234823 -0.1127458  #>  #>  Objective Function Value:   80.06589 #>  Parameter Estimates:        0.005076356 -0.9611771 -0.1234822 -0.1127458  #>  #>  Objective Function Value:   80.06589 #>  Parameter Estimates:        0.005076356 -0.9611771 -0.1234823 -0.1127457  #>  #>  Objective Function Value:   80.05223 #>  Parameter Estimates:        0.0043031 -0.9448247 -0.1211913 -0.1108273  #>  #>  Objective Function Value:   80.05223 #>  Parameter Estimates:        0.004303433 -0.9448247 -0.1211913 -0.1108273  #>  #>  Objective Function Value:   80.05223 #>  Parameter Estimates:        0.0043031 -0.9448245 -0.1211913 -0.1108273  #>  #>  Objective Function Value:   80.05223 #>  Parameter Estimates:        0.0043031 -0.9448247 -0.1211913 -0.1108273  #>  #>  Objective Function Value:   80.05223 #>  Parameter Estimates:        0.0043031 -0.9448247 -0.1211913 -0.1108274  #>  #>  Objective Function Value:   80.03934 #>  Parameter Estimates:        0.004222999 -0.9283226 -0.119316 -0.1097858  #>  #>  Objective Function Value:   80.03934 #>  Parameter Estimates:        0.004222883 -0.9283226 -0.119316 -0.1097858  #>  #>  Objective Function Value:   80.03934 #>  Parameter Estimates:        0.004222999 -0.9283229 -0.119316 -0.1097858  #>  #>  Objective Function Value:   80.03934 #>  Parameter Estimates:        0.004222999 -0.9283226 -0.1193159 -0.1097858  #>  #>  Objective Function Value:   80.03934 #>  Parameter Estimates:        0.004222999 -0.9283226 -0.119316 -0.1097858  #>  #>  Objective Function Value:   80.02948 #>  Parameter Estimates:        0.003922391 -0.91187 -0.117775 -0.1078429  #>  #>  Objective Function Value:   80.02948 #>  Parameter Estimates:        0.003922515 -0.91187 -0.117775 -0.1078429  #>  #>  Objective Function Value:   80.02948 #>  Parameter Estimates:        0.003922391 -0.9118697 -0.117775 -0.1078429  #>  #>  Objective Function Value:   80.02948 #>  Parameter Estimates:        0.003922391 -0.91187 -0.1177748 -0.1078429  #>  #>  Objective Function Value:   80.02948 #>  Parameter Estimates:        0.003922391 -0.91187 -0.117775 -0.1078429  #>  #>  Objective Function Value:   80.02192 #>  Parameter Estimates:        0.004488194 -0.895517 -0.1154889 -0.105853  #>  #>  Objective Function Value:   80.02192 #>  Parameter Estimates:        0.004488124 -0.895517 -0.1154889 -0.105853  #>  #>  Objective Function Value:   80.02192 #>  Parameter Estimates:        0.004488194 -0.8955162 -0.1154889 -0.105853  #>  #>  Objective Function Value:   80.02192 #>  Parameter Estimates:        0.004488194 -0.895517 -0.115489 -0.105853  #>  #>  Objective Function Value:   80.02193 #>  Parameter Estimates:        0.004488194 -0.895517 -0.1154889 -0.1058529  #>  #>  Objective Function Value:   80.01031 #>  Parameter Estimates:        0.00489198 -0.8790032 -0.1142155 -0.1042912  #>  #>  Objective Function Value:   80.01031 #>  Parameter Estimates:        0.004891869 -0.8790032 -0.1142155 -0.1042912  #>  #>  Objective Function Value:   80.01031 #>  Parameter Estimates:        0.00489198 -0.8790035 -0.1142155 -0.1042912  #>  #>  Objective Function Value:   80.01031 #>  Parameter Estimates:        0.00489198 -0.8790032 -0.1142154 -0.1042912  #>  #>  Objective Function Value:   80.01031 #>  Parameter Estimates:        0.00489198 -0.8790032 -0.1142155 -0.1042911  #>  #>  Objective Function Value:   80.00785 #>  Parameter Estimates:        0.004594686 -0.8625589 -0.1123759 -0.1025468  #>  #>  Objective Function Value:   80.00785 #>  Parameter Estimates:        0.004595033 -0.8625589 -0.1123759 -0.1025468  #>  #>  Objective Function Value:   80.00786 #>  Parameter Estimates:        0.004594339 -0.8625589 -0.1123759 -0.1025468  #>  #>  Objective Function Value:   80.00785 #>  Parameter Estimates:        0.004594686 -0.8625587 -0.1123759 -0.1025468  #>  #>  Objective Function Value:   80.00785 #>  Parameter Estimates:        0.004594686 -0.8625589 -0.112376 -0.1025468  #>  #>  Objective Function Value:   80.00785 #>  Parameter Estimates:        0.004594686 -0.8625589 -0.1123759 -0.1025469  #>  #>  Objective Function Value:   80.00597 #>  Parameter Estimates:        0.004727372 -0.8461138 -0.1104384 -0.1008996  #>  #>  Objective Function Value:   80.00597 #>  Parameter Estimates:        0.004727302 -0.8461138 -0.1104384 -0.1008996  #>  #>  Objective Function Value:   80.00597 #>  Parameter Estimates:        0.004727372 -0.8461135 -0.1104384 -0.1008996  #>  #>  Objective Function Value:   80.00597 #>  Parameter Estimates:        0.004727372 -0.8461138 -0.1104385 -0.1008996  #>  #>  Objective Function Value:   80.00597 #>  Parameter Estimates:        0.004727372 -0.8461138 -0.1104384 -0.1008996  #>  #>  Objective Function Value:   80.02177 #>  Parameter Estimates:        0.006625531 -0.8342457 -0.1096511 -0.09868027  #>  #>  Objective Function Value:   80.00565 #>  Parameter Estimates:        0.005007589 -0.8445283 -0.1102912 -0.1005588  #>  #>  Objective Function Value:   80.00565 #>  Parameter Estimates:        0.00500752 -0.8445283 -0.1102912 -0.1005588  #>  #>  Objective Function Value:   80.00565 #>  Parameter Estimates:        0.005007589 -0.844528 -0.1102912 -0.1005588  #>  #>  Objective Function Value:   80.00565 #>  Parameter Estimates:        0.005007589 -0.8445283 -0.1102912 -0.1005588  #>  #>  Objective Function Value:   80.00565 #>  Parameter Estimates:        0.005007589 -0.8445283 -0.1102912 -0.1005588  #>  #>  Objective Function Value:   80.00553 #>  Parameter Estimates:        0.005044773 -0.8461565 -0.1104875 -0.1007568  #>  #>  Objective Function Value:   80.00553 #>  Parameter Estimates:        0.005044705 -0.8461565 -0.1104875 -0.1007568  #>  #>  Objective Function Value:   80.00553 #>  Parameter Estimates:        0.005044773 -0.8461567 -0.1104875 -0.1007568  #>  #>  Objective Function Value:   80.00553 #>  Parameter Estimates:        0.005044773 -0.8461565 -0.1104875 -0.1007568  #>  #>  Objective Function Value:   80.00553 #>  Parameter Estimates:        0.005044773 -0.8461565 -0.1104876 -0.1007568  #>  #>  Objective Function Value:   80.00553 #>  Parameter Estimates:        0.005044773 -0.8461565 -0.1104875 -0.1007568  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.005002602 -0.847788 -0.1106557 -0.100953  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.005002714 -0.847788 -0.1106557 -0.100953  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.005002489 -0.847788 -0.1106557 -0.100953  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.005002602 -0.8477878 -0.1106557 -0.100953  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.005002602 -0.8477882 -0.1106557 -0.100953  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.005002602 -0.847788 -0.1106556 -0.100953  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.005002602 -0.847788 -0.1106557 -0.100953  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.005002602 -0.847788 -0.1106557 -0.1009529  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.005002602 -0.847788 -0.1106557 -0.100953  #>  #>  Objective Function Value:   80.00557 #>  Parameter Estimates:        0.004932914 -0.8510517 -0.1110033 -0.1013318  #>  #>  Objective Function Value:   80.00551 #>  Parameter Estimates:        0.004977208 -0.8488934 -0.1107773 -0.101079  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004989295 -0.8483044 -0.1107156 -0.1010101  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004989384 -0.8483044 -0.1107156 -0.1010101  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004989206 -0.8483044 -0.1107156 -0.1010101  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004989295 -0.8483038 -0.1107156 -0.1010101  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004989295 -0.8483051 -0.1107156 -0.1010101  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004989295 -0.8483044 -0.1107156 -0.1010101  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004989295 -0.8483044 -0.1107157 -0.1010101  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004989295 -0.8483044 -0.1107156 -0.10101  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004989295 -0.8483044 -0.1107156 -0.1010101  #>  #>  Objective Function Value:   80.00561 #>  Parameter Estimates:        0.004975788 -0.8480512 -0.1107378 -0.1009496  #>  #>  Objective Function Value:   80.00551 #>  Parameter Estimates:        0.004986858 -0.8482899 -0.1107285 -0.1009927  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004988738 -0.8483046 -0.1107195 -0.1010054  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004989261 -0.8483046 -0.1107195 -0.1010054  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004988216 -0.8483046 -0.1107195 -0.1010054  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004988738 -0.8483027 -0.1107195 -0.1010054  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004988738 -0.8483064 -0.1107195 -0.1010054  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004988738 -0.8483046 -0.1107195 -0.1010054  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004988738 -0.8483046 -0.1107196 -0.1010054  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004988738 -0.8483046 -0.1107195 -0.1010053  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004988738 -0.8483046 -0.1107195 -0.1010054  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004992937 -0.8483043 -0.1107233 -0.1010078  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004993062 -0.8483043 -0.1107233 -0.1010078  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004992812 -0.8483043 -0.1107233 -0.1010078  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004992937 -0.8483024 -0.1107233 -0.1010078  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004992937 -0.8483063 -0.1107233 -0.1010078  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004992937 -0.8483043 -0.1107232 -0.1010078  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004992937 -0.8483043 -0.1107234 -0.1010078  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004992937 -0.8483043 -0.1107233 -0.1010076  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004992937 -0.8483043 -0.1107233 -0.101008  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004994122 -0.8483047 -0.1107214 -0.1010058  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004994292 -0.8483047 -0.1107214 -0.1010058  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004993952 -0.8483047 -0.1107214 -0.1010058  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004994122 -0.8483043 -0.1107214 -0.1010058  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004994122 -0.8483052 -0.1107214 -0.1010058  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004994122 -0.8483047 -0.1107213 -0.1010058  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004994122 -0.8483047 -0.1107215 -0.1010058  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004994122 -0.8483047 -0.1107214 -0.1010057  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004994122 -0.8483047 -0.1107214 -0.1010059  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004996396 -0.8483051 -0.1107228 -0.1010043  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004996625 -0.8483051 -0.1107228 -0.1010043  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004996167 -0.8483051 -0.1107228 -0.1010043  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004996396 -0.8483036 -0.1107228 -0.1010043  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004996396 -0.8483066 -0.1107228 -0.1010043  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004996396 -0.8483051 -0.1107225 -0.1010043  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004996396 -0.8483051 -0.1107231 -0.1010043  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004996396 -0.8483051 -0.1107228 -0.101004  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004996396 -0.8483051 -0.1107228 -0.1010046  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004998177 -0.8483028 -0.1107218 -0.101004  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004998381 -0.8483028 -0.1107218 -0.101004  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004997973 -0.8483028 -0.1107218 -0.101004  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004998177 -0.8482989 -0.1107218 -0.101004  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004998177 -0.8483066 -0.1107218 -0.101004  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004998177 -0.8483028 -0.1107216 -0.101004  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004998177 -0.8483028 -0.1107221 -0.101004  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004998177 -0.8483028 -0.1107218 -0.1010033  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.004998177 -0.8483028 -0.1107218 -0.1010047  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.00500103 -0.8483026 -0.1107218 -0.1010029  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.0050014 -0.8483026 -0.1107218 -0.1010029  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.00500066 -0.8483026 -0.1107218 -0.1010029  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.00500103 -0.848299 -0.1107218 -0.1010029  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.00500103 -0.8483063 -0.1107218 -0.1010029  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.00500103 -0.8483026 -0.110721 -0.1010029  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.00500103 -0.8483026 -0.1107227 -0.1010029  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.00500103 -0.8483026 -0.1107218 -0.1010023  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.00500103 -0.8483026 -0.1107218 -0.1010034  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.005001777 -0.8482999 -0.1107229 -0.1010025  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.00500259 -0.8482999 -0.1107229 -0.1010025  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.005000964 -0.8482999 -0.1107229 -0.1010025  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.005001777 -0.8482984 -0.1107229 -0.1010025  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.005001777 -0.8483014 -0.1107229 -0.1010025  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.005001777 -0.8482999 -0.1107227 -0.1010025  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.005001777 -0.8482999 -0.1107232 -0.1010025  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.005001777 -0.8482999 -0.1107229 -0.1010017  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.005001777 -0.8482999 -0.1107229 -0.1010033  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.005002749 -0.8482971 -0.1107223 -0.1010019  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.005002476 -0.8482989 -0.1107224 -0.1010022  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.005002247 -0.8482998 -0.1107225 -0.1010024  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.005001972 -0.8482999 -0.1107228 -0.1010024  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.005001834 -0.8482999 -0.1107229 -0.1010025  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.005001785 -0.8482999 -0.1107229 -0.1010025  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.005001778 -0.8482999 -0.1107229 -0.1010025  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.005001777 -0.8482999 -0.1107229 -0.1010025  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.005001777 -0.8482999 -0.1107229 -0.1010025  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.005001777 -0.8482999 -0.1107229 -0.1010025  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.005001777 -0.8482999 -0.1107229 -0.1010025  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.005001777 -0.8482999 -0.1107229 -0.1010025  #>  #>  Objective Function Value:   80.0055 #>  Parameter Estimates:        0.005001777 -0.8482999 -0.1107229 -0.1010025   #>  #> Title: #>  GLD Region 4 Parameter Estimation  #>  #> Call: #>  .gldFit.mle(x = x, lambda1 = lambda1, lambda2 = lambda2, lambda3 = lambda3,  #>     lambda4 = lambda4, scale = scale, doplot = doplot, add = add,  #>     span = span, trace = trace, title = title, description = description) #>  #> Model: #>  GLD Region 4 Distribution #>  #> Estimated Parameter(s): #>      lambda1      lambda2      lambda3      lambda4  #>  0.005001777 -0.848299893 -0.110722945 -0.101002495  #>  #> Description: #>  Mon Aug  8 08:09:36 2022 by user: georgi  #>"},{"path":"/reference/dist-gldMode.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized Lambda Distribution Mode — gldMode","title":"Generalized Lambda Distribution Mode — gldMode","text":"Computes mode generalized lambda distribution.","code":""},{"path":"/reference/dist-gldMode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized Lambda Distribution Mode — gldMode","text":"","code":"gldMode(lambda1 = 0, lambda2 = -1, lambda3 = -1/8, lambda4 = -1/8)"},{"path":"/reference/dist-gldMode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized Lambda Distribution Mode — gldMode","text":"lambda1, lambda2, lambda3, lambda4 numeric values     lambda1 location parameter,     lambda2 location parameter,     lambda3 first shape parameter,     lambda4 second shape parameter.","code":""},{"path":"/reference/dist-gldMode.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generalized Lambda Distribution Mode — gldMode","text":"Implemented Diethelm Wuertz","code":""},{"path":"/reference/dist-gldRobMoments.html","id":null,"dir":"Reference","previous_headings":"","what":"Robust Moments for the GLD — gldRobMoments","title":"Robust Moments for the GLD — gldRobMoments","text":"Computes first four robust moments     Generalized Lambda Distribution.","code":""},{"path":"/reference/dist-gldRobMoments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Robust Moments for the GLD — gldRobMoments","text":"","code":"gldMED(lambda1 = 0, lambda2 = -1, lambda3 = -1/8, lambda4 = -1/8) gldIQR(lambda1 = 0, lambda2 = -1, lambda3 = -1/8, lambda4 = -1/8) gldSKEW(lambda1 = 0, lambda2 = -1, lambda3 = -1/8, lambda4 = -1/8) gldKURT(lambda1 = 0, lambda2 = -1, lambda3 = -1/8, lambda4 = -1/8)"},{"path":"/reference/dist-gldRobMoments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Robust Moments for the GLD — gldRobMoments","text":"lambda1, lambda2, lambda3, lambda4 numeric values         lambda1 location parameter,         lambda2 location parameter,         lambda3 first shape parameter,         lambda4 second shape parameter.","code":""},{"path":"/reference/dist-gldRobMoments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Robust Moments for the GLD — gldRobMoments","text":"values *gld functions numeric vectors:  d* returns density, p* returns distribution function, q* returns quantile function, r* generates random deviates.     values attributes named \"param\" listing     values distributional parameters.","code":""},{"path":"/reference/dist-gldRobMoments.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Robust Moments for the GLD — gldRobMoments","text":"Diethelm Wuertz.","code":""},{"path":"/reference/dist-gldRobMoments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Robust Moments for the GLD — gldRobMoments","text":"","code":"## gldMED -    # Median:    gldMED(lambda1 = 0, lambda2 = -1, lambda3 = -1/8, lambda4 = -1/8) #> MED  #>   0    ## gldIQR -     # Inter-quartile Range:    gldIQR(lambda1 = 0, lambda2 = -1, lambda3 = -1/8, lambda4 = -1/8) #>       IQR  #> 0.3051849    ## gldSKEW -      # Robust Skewness:    gldSKEW(lambda1 = 0, lambda2 = -1, lambda3 = -1/8, lambda4 = -1/8) #> SKEW  #>    0      ## gldKURT -    # Robust Kurtosis:    gldKURT(lambda1 = 0, lambda2 = -1, lambda3 = -1/8, lambda4 = -1/8) #>     KURT  #> 1.376754"},{"path":"/reference/dist-hyp.html","id":null,"dir":"Reference","previous_headings":"","what":"Hyperbolic Distribution — hyp","title":"Hyperbolic Distribution — hyp","text":"Density, distribution function, quantile function      random generation hyperbolic distribution.","code":""},{"path":"/reference/dist-hyp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hyperbolic Distribution — hyp","text":"","code":"dhyp(x, alpha = 1, beta = 0, delta = 1, mu = 0,      pm = c(\"1\", \"2\", \"3\", \"4\"), log = FALSE) phyp(q, alpha = 1, beta = 0, delta = 1, mu = 0,      pm = c(\"1\", \"2\", \"3\", \"4\"), ...) qhyp(p, alpha = 1, beta = 0, delta = 1, mu = 0,      pm = c(\"1\", \"2\", \"3\", \"4\"), ...) rhyp(n, alpha = 1, beta = 0, delta = 1, mu = 0,      pm = c(\"1\", \"2\", \"3\", \"4\"))"},{"path":"/reference/dist-hyp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hyperbolic Distribution — hyp","text":"alpha, beta, delta, mu shape parameter alpha;         skewness parameter beta, abs(beta)          range (0, alpha);         scale parameter delta, delta must zero          positive;          location parameter mu, default 0.         meaning parameters first          parameterization pm=1 default          parameterization selection.         second parameterization, pm=2 alpha         beta take meaning shape parameters         (usually named) zeta rho.         third parameterization, pm=3 alpha         beta take meaning shape parameters         (usually named) xi chi.         fourth parameterization, pm=4 alpha         beta take meaning shape parameters         (usually named) .bar b.bar. n number observations. p numeric vector probabilities. pm integer value 1 4          selection parameterization. default takes         first parameterization. x, q numeric vector quantiles. log logical, TRUE, probabilities p given          log(p). ... arguments passed function integrate.","code":""},{"path":"/reference/dist-hyp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hyperbolic Distribution — hyp","text":"values *hyp functions numeric vectors:  d* returns density, p* returns distribution function, q* returns quantile function, r* generates random deviates.     values attributes named \"param\" listing     values distributional parameters.","code":""},{"path":"/reference/dist-hyp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hyperbolic Distribution — hyp","text":"generator rhyp based HYP algorithm given      Atkinson (1982).","code":""},{"path":"/reference/dist-hyp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Hyperbolic Distribution — hyp","text":"David Scott code implemented R's      contributed package HyperbolicDist.","code":""},{"path":"/reference/dist-hyp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Hyperbolic Distribution — hyp","text":"Atkinson, .C. (1982);      simulation generalized inverse Gaussian hyperbolic      random variables,     SIAM J. Sci. Stat. Comput. 3, 502--515. Barndorff-Nielsen O. (1977);     Exponentially decreasing distributions logarithm      particle size,      Proc. Roy. Soc. Lond., A353, 401--419. Barndorff-Nielsen O., Blaesild, P. (1983);      Hyperbolic distributions. Encyclopedia Statistical      Sciences,      Eds., Johnson N.L., Kotz S. Read C.B.,      Vol. 3, pp. 700--707. New York: Wiley. Raible S. (2000);     Levy Processes Finance: Theory, Numerics Empirical Facts,     PhD Thesis, University Freiburg, Germany, 161 pages.","code":""},{"path":"/reference/dist-hyp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hyperbolic Distribution — hyp","text":"","code":"## hyp -    set.seed(1953)    r = rhyp(5000, alpha = 1, beta = 0.3, delta = 1)    plot(r, type = \"l\", col = \"steelblue\",      main = \"hyp: alpha=1 beta=0.3 delta=1\")    ## hyp -     # Plot empirical density and compare with true density:    hist(r, n = 25, probability = TRUE, border = \"white\", col = \"steelblue\")    x = seq(-5, 5, 0.25)    lines(x, dhyp(x, alpha = 1, beta = 0.3, delta = 1))    ## hyp -      # Plot df and compare with true df:    plot(sort(r), (1:5000/5000), main = \"Probability\", col = \"steelblue\")    lines(x, phyp(x, alpha = 1, beta = 0.3, delta = 1))      ## hyp -    # Compute Quantiles:    qhyp(phyp(seq(-5, 5, 1), alpha = 1, beta = 0.3, delta = 1),       alpha = 1, beta = 0.3, delta = 1)  #>  [1] -5.000017e+00 -3.999997e+00 -3.000000e+00 -2.000023e+00 -1.000003e+00 #>  [6] -2.344483e-06  1.000000e+00  2.000000e+00  2.999997e+00  3.999989e+00 #> [11]  5.000002e+00"},{"path":"/reference/dist-hypFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit of a Hyperbolic Distribution — hypFit","title":"Fit of a Hyperbolic Distribution — hypFit","text":"Estimates parameters hyperbolic distribution.","code":""},{"path":"/reference/dist-hypFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit of a Hyperbolic Distribution — hypFit","text":"","code":"hypFit(x, alpha = 1, beta = 0, delta = 1, mu = 0,      scale = TRUE, doplot = TRUE, span = \"auto\", trace = TRUE,      title = NULL, description = NULL, ...)"},{"path":"/reference/dist-hypFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit of a Hyperbolic Distribution — hypFit","text":"alpha, beta, delta, mu alpha shape parameter default 1,         beta skewness parameter default 0,              note abs(beta) range (0, alpha),         delta scale parameter default 1,              note, delta must zero positive,         mu location parameter, default 0.         meaning parameters first          parameterization pm=1 default          parameterization selection.         second parameterization, pm=2 alpha         beta take meaning shape parameters         (usually named) zeta rho.         third parameterization, pm=3 alpha         beta take meaning shape parameters         (usually named) xi chi.         fourth parameterization, pm=4 alpha         beta take meaning shape parameters         (usually named) .bar b.bar. description character string allows brief description. doplot logical flag. plot displayed? scale logical flag, default TRUE. time series         scaled standard deviation achieve stable         optimization? span x-coordinates plot, default 100 values          automatically selected ranging 0.001,          0.999 quantiles. Alternatively, can specify         range expression like span=seq(min, max,         times = n), , min max          left right endpoints range, n gives          number intermediate points. title character string allows project title. trace logical flag. parameter estimation process         traced? x numeric vector. ... parameters parsed.","code":""},{"path":"/reference/dist-hypFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit of a Hyperbolic Distribution — hypFit","text":"functions tFit, hypFit nigFit return      list following components: estimate point maximum value log liklihood          function obtained. minimum value estimated maximum, .e. value         log liklihood function. code integer indicating optimization process terminated.         1: relative gradient close zero, current iterate probably              solution;          2: successive iterates within tolerance, current iterate probably              solution;          3: last global step failed locate point lower estimate.              Either estimate approximate local minimum              function steptol small;          4: iteration limit exceeded;          5: maximum step size stepmax exceeded five consecutive times.              Either function unbounded , becomes asymptotic              finite value direction stepmax              small. gradient gradient estimated maximum. steps number function calls.","code":""},{"path":"/reference/dist-hypFit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit of a Hyperbolic Distribution — hypFit","text":"function nlm used minimize \"negative\"      maximum log-likelihood function. nlm carries minimization      using Newton-type algorithm.","code":""},{"path":"/reference/dist-hypFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit of a Hyperbolic Distribution — hypFit","text":"","code":"## rhyp -    # Simulate Random Variates:    set.seed(1953)    s = rhyp(n = 1000, alpha = 1.5, beta = 0.3, delta = 0.5, mu = -1.0)   ## hypFit -      # Fit Parameters:    hypFit(s, alpha = 1, beta = 0, delta = 1, mu = mean(s), doplot = TRUE)  #>  #>  Objective Function Value:   -1508.093 #>  Parameter Estimates:        1 0 1 -0.6991407  #>  #>  Objective Function Value:   -1508.093 #>  Parameter Estimates:        1 0 1 -0.6991407  #>  #>  Objective Function Value:   -1508.093 #>  Parameter Estimates:        1 1.490116e-08 1 -0.6991407  #>  #>  Objective Function Value:   -1508.093 #>  Parameter Estimates:        1 0 1 -0.6991407  #>  #>  Objective Function Value:   -1508.093 #>  Parameter Estimates:        1 0 1 -0.6991406  #>  #>  Objective Function Value:   -1378.357 #>  Parameter Estimates:        1.939637 0.1591279 0.700799 -0.6518213  #>  #>  Objective Function Value:   -1378.355 #>  Parameter Estimates:        1.939602 0.1591279 0.700799 -0.6518213  #>  #>  Objective Function Value:   -1378.353 #>  Parameter Estimates:        1.939637 0.1590929 0.700799 -0.6518213  #>  #>  Objective Function Value:   -1378.356 #>  Parameter Estimates:        1.939637 0.1591279 0.700834 -0.6518213  #>  #>  Objective Function Value:   -1378.35 #>  Parameter Estimates:        1.939637 0.1591279 0.700799 -0.6518563  #>  #>  Objective Function Value:   -2163.307 #>  Parameter Estimates:        1.862755 -0.3304589 0.7430581 -1.519351  #>  #>  Objective Function Value:   -1365.864 #>  Parameter Estimates:        1.922406 0.1038927 0.7082374 -0.7475008  #>  #>  Objective Function Value:   -1365.864 #>  Parameter Estimates:        1.922408 0.1038927 0.7082374 -0.7475008  #>  #>  Objective Function Value:   -1365.864 #>  Parameter Estimates:        1.922406 0.1038969 0.7082374 -0.7475008  #>  #>  Objective Function Value:   -1365.864 #>  Parameter Estimates:        1.922406 0.1038927 0.7082319 -0.7475008  #>  #>  Objective Function Value:   -1365.864 #>  Parameter Estimates:        1.922406 0.1038927 0.7082374 -0.7474973  #>  #>  Objective Function Value:   -1363.818 #>  Parameter Estimates:        1.835478 0.1679592 0.7371946 -0.7551355  #>  #>  Objective Function Value:   -1363.818 #>  Parameter Estimates:        1.835504 0.1679592 0.7371946 -0.7551355  #>  #>  Objective Function Value:   -1363.818 #>  Parameter Estimates:        1.835478 0.1679579 0.7371946 -0.7551355  #>  #>  Objective Function Value:   -1363.818 #>  Parameter Estimates:        1.835478 0.1679592 0.7371653 -0.7551355  #>  #>  Objective Function Value:   -1363.818 #>  Parameter Estimates:        1.835478 0.1679592 0.7371946 -0.7551345  #>  #>  Objective Function Value:   -1363.158 #>  Parameter Estimates:        1.806576 0.171103 0.6890099 -0.8520412  #>  #>  Objective Function Value:   -1363.158 #>  Parameter Estimates:        1.806579 0.171103 0.6890099 -0.8520412  #>  #>  Objective Function Value:   -1363.158 #>  Parameter Estimates:        1.806576 0.1711045 0.6890099 -0.8520412  #>  #>  Objective Function Value:   -1363.158 #>  Parameter Estimates:        1.806576 0.171103 0.6890137 -0.8520412  #>  #>  Objective Function Value:   -1363.158 #>  Parameter Estimates:        1.806576 0.171103 0.6890099 -0.8520397  #>  #>  Objective Function Value:   -1360.109 #>  Parameter Estimates:        1.769539 0.2437448 0.6121537 -0.8505328  #>  #>  Objective Function Value:   -1360.109 #>  Parameter Estimates:        1.769547 0.2437448 0.6121537 -0.8505328  #>  #>  Objective Function Value:   -1360.109 #>  Parameter Estimates:        1.769539 0.2437435 0.6121537 -0.8505328  #>  #>  Objective Function Value:   -1360.109 #>  Parameter Estimates:        1.769539 0.2437448 0.6121661 -0.8505328  #>  #>  Objective Function Value:   -1360.109 #>  Parameter Estimates:        1.769539 0.2437448 0.6121537 -0.8505338  #>  #>  Objective Function Value:   -1359.169 #>  Parameter Estimates:        1.710098 0.2401547 0.5182934 -0.8647414  #>  #>  Objective Function Value:   -1359.169 #>  Parameter Estimates:        1.710105 0.2401547 0.5182934 -0.8647414  #>  #>  Objective Function Value:   -1359.169 #>  Parameter Estimates:        1.710098 0.2401559 0.5182934 -0.8647414  #>  #>  Objective Function Value:   -1359.169 #>  Parameter Estimates:        1.710098 0.2401547 0.5183074 -0.8647414  #>  #>  Objective Function Value:   -1359.169 #>  Parameter Estimates:        1.710098 0.2401547 0.5182934 -0.8647403  #>  #>  Objective Function Value:   -1358.59 #>  Parameter Estimates:        1.636735 0.2050391 0.4571394 -0.8178077  #>  #>  Objective Function Value:   -1358.59 #>  Parameter Estimates:        1.636742 0.2050391 0.4571394 -0.8178077  #>  #>  Objective Function Value:   -1358.59 #>  Parameter Estimates:        1.636735 0.2050375 0.4571394 -0.8178077  #>  #>  Objective Function Value:   -1358.59 #>  Parameter Estimates:        1.636735 0.2050391 0.4571449 -0.8178077  #>  #>  Objective Function Value:   -1358.59 #>  Parameter Estimates:        1.636735 0.2050391 0.4571394 -0.8178089  #>  #>  Objective Function Value:   -1358.387 #>  Parameter Estimates:        1.575816 0.1632939 0.3729416 -0.8139854  #>  #>  Objective Function Value:   -1358.387 #>  Parameter Estimates:        1.575812 0.1632939 0.3729416 -0.8139854  #>  #>  Objective Function Value:   -1358.387 #>  Parameter Estimates:        1.575816 0.1632957 0.3729416 -0.8139854  #>  #>  Objective Function Value:   -1358.387 #>  Parameter Estimates:        1.575816 0.1632939 0.3729485 -0.8139854  #>  #>  Objective Function Value:   -1358.387 #>  Parameter Estimates:        1.575816 0.1632939 0.3729416 -0.8139843  #>  #>  Objective Function Value:   -1358.081 #>  Parameter Estimates:        1.558526 0.2320373 0.2939126 -0.8498682  #>  #>  Objective Function Value:   -1358.081 #>  Parameter Estimates:        1.558531 0.2320373 0.2939126 -0.8498682  #>  #>  Objective Function Value:   -1358.081 #>  Parameter Estimates:        1.558526 0.232036 0.2939126 -0.8498682  #>  #>  Objective Function Value:   -1358.081 #>  Parameter Estimates:        1.558526 0.2320373 0.2939194 -0.8498682  #>  #>  Objective Function Value:   -1358.081 #>  Parameter Estimates:        1.558526 0.2320373 0.2939126 -0.8498694  #>  #>  Objective Function Value:   -1360.764 #>  Parameter Estimates:        1.496882 0.2542706 0.3816928 -0.8734914  #>  #>  Objective Function Value:   -1358.026 #>  Parameter Estimates:        1.553858 0.2249425 0.3012205 -0.8496544  #>  #>  Objective Function Value:   -1358.026 #>  Parameter Estimates:        1.553865 0.2249425 0.3012205 -0.8496544  #>  #>  Objective Function Value:   -1358.026 #>  Parameter Estimates:        1.553858 0.2249441 0.3012205 -0.8496544  #>  #>  Objective Function Value:   -1358.026 #>  Parameter Estimates:        1.553858 0.2249425 0.3012147 -0.8496544  #>  #>  Objective Function Value:   -1358.026 #>  Parameter Estimates:        1.553858 0.2249425 0.3012205 -0.8496522  #>  #>  Objective Function Value:   -1358.026 #>  Parameter Estimates:        1.553858 0.2249425 0.3012205 -0.8496566  #>  #>  Objective Function Value:   -1358.037 #>  Parameter Estimates:        1.551868 0.2251994 0.3062864 -0.8398621  #>  #>  Objective Function Value:   -1358.01 #>  Parameter Estimates:        1.552992 0.2250544 0.3034259 -0.8453915  #>  #>  Objective Function Value:   -1358.01 #>  Parameter Estimates:        1.552995 0.2250544 0.3034259 -0.8453915  #>  #>  Objective Function Value:   -1358.01 #>  Parameter Estimates:        1.552992 0.2250564 0.3034259 -0.8453915  #>  #>  Objective Function Value:   -1358.01 #>  Parameter Estimates:        1.552992 0.2250524 0.3034259 -0.8453915  #>  #>  Objective Function Value:   -1358.01 #>  Parameter Estimates:        1.552992 0.2250544 0.3034219 -0.8453915  #>  #>  Objective Function Value:   -1358.01 #>  Parameter Estimates:        1.552992 0.2250544 0.3034259 -0.8453928  #>  #>  Objective Function Value:   -1357.998 #>  Parameter Estimates:        1.553334 0.2206549 0.3053404 -0.8462044  #>  #>  Objective Function Value:   -1357.998 #>  Parameter Estimates:        1.553331 0.2206549 0.3053404 -0.8462044  #>  #>  Objective Function Value:   -1357.998 #>  Parameter Estimates:        1.553334 0.2206562 0.3053404 -0.8462044  #>  #>  Objective Function Value:   -1357.998 #>  Parameter Estimates:        1.553334 0.2206549 0.3053366 -0.8462044  #>  #>  Objective Function Value:   -1357.998 #>  Parameter Estimates:        1.553334 0.2206549 0.3053404 -0.8462035  #>  #>  Objective Function Value:   -1357.987 #>  Parameter Estimates:        1.553236 0.2201545 0.3072669 -0.8417517  #>  #>  Objective Function Value:   -1357.987 #>  Parameter Estimates:        1.553239 0.2201545 0.3072669 -0.8417517  #>  #>  Objective Function Value:   -1357.987 #>  Parameter Estimates:        1.553236 0.2201553 0.3072669 -0.8417517  #>  #>  Objective Function Value:   -1357.987 #>  Parameter Estimates:        1.553236 0.2201536 0.3072669 -0.8417517  #>  #>  Objective Function Value:   -1357.987 #>  Parameter Estimates:        1.553236 0.2201545 0.3072629 -0.8417517  #>  #>  Objective Function Value:   -1357.987 #>  Parameter Estimates:        1.553236 0.2201545 0.3072669 -0.8417527  #>  #>  Objective Function Value:   -1357.977 #>  Parameter Estimates:        1.554475 0.2157089 0.3088434 -0.8416293  #>  #>  Objective Function Value:   -1357.977 #>  Parameter Estimates:        1.554471 0.2157089 0.3088434 -0.8416293  #>  #>  Objective Function Value:   -1357.977 #>  Parameter Estimates:        1.554475 0.2157102 0.3088434 -0.8416293  #>  #>  Objective Function Value:   -1357.977 #>  Parameter Estimates:        1.554475 0.2157089 0.3088394 -0.8416293  #>  #>  Objective Function Value:   -1357.977 #>  Parameter Estimates:        1.554475 0.2157089 0.3088434 -0.8416284  #>  #>  Objective Function Value:   -1357.968 #>  Parameter Estimates:        1.555687 0.2149972 0.3122155 -0.8383965  #>  #>  Objective Function Value:   -1357.968 #>  Parameter Estimates:        1.55569 0.2149972 0.3122155 -0.8383965  #>  #>  Objective Function Value:   -1357.968 #>  Parameter Estimates:        1.555687 0.2149961 0.3122155 -0.8383965  #>  #>  Objective Function Value:   -1357.968 #>  Parameter Estimates:        1.555687 0.2149972 0.3122117 -0.8383965  #>  #>  Objective Function Value:   -1357.968 #>  Parameter Estimates:        1.555687 0.2149972 0.3122155 -0.8383976  #>  #>  Objective Function Value:   -1357.962 #>  Parameter Estimates:        1.556302 0.2144107 0.3167415 -0.8400066  #>  #>  Objective Function Value:   -1357.962 #>  Parameter Estimates:        1.556306 0.2144107 0.3167415 -0.8400066  #>  #>  Objective Function Value:   -1357.962 #>  Parameter Estimates:        1.556302 0.2144119 0.3167415 -0.8400066  #>  #>  Objective Function Value:   -1357.962 #>  Parameter Estimates:        1.556302 0.2144107 0.3167369 -0.8400066  #>  #>  Objective Function Value:   -1357.962 #>  Parameter Estimates:        1.556302 0.2144107 0.3167415 -0.8400057  #>  #>  Objective Function Value:   -1357.957 #>  Parameter Estimates:        1.5589 0.2131744 0.3201281 -0.8379938  #>  #>  Objective Function Value:   -1357.957 #>  Parameter Estimates:        1.558904 0.2131744 0.3201281 -0.8379938  #>  #>  Objective Function Value:   -1357.957 #>  Parameter Estimates:        1.558896 0.2131744 0.3201281 -0.8379938  #>  #>  Objective Function Value:   -1357.957 #>  Parameter Estimates:        1.5589 0.2131765 0.3201281 -0.8379938  #>  #>  Objective Function Value:   -1357.957 #>  Parameter Estimates:        1.5589 0.2131723 0.3201281 -0.8379938  #>  #>  Objective Function Value:   -1357.957 #>  Parameter Estimates:        1.5589 0.2131744 0.3201247 -0.8379938  #>  #>  Objective Function Value:   -1357.957 #>  Parameter Estimates:        1.5589 0.2131744 0.3201281 -0.8379948  #>  #>  Objective Function Value:   -1357.954 #>  Parameter Estimates:        1.559259 0.2120718 0.3248605 -0.8377534  #>  #>  Objective Function Value:   -1357.954 #>  Parameter Estimates:        1.559262 0.2120718 0.3248605 -0.8377534  #>  #>  Objective Function Value:   -1357.954 #>  Parameter Estimates:        1.559259 0.2120735 0.3248605 -0.8377534  #>  #>  Objective Function Value:   -1357.954 #>  Parameter Estimates:        1.559259 0.2120718 0.324857 -0.8377534  #>  #>  Objective Function Value:   -1357.954 #>  Parameter Estimates:        1.559259 0.2120718 0.3248605 -0.8377485  #>  #>  Objective Function Value:   -1357.954 #>  Parameter Estimates:        1.559259 0.2120718 0.3248605 -0.8377583  #>  #>  Objective Function Value:   -1357.954 #>  Parameter Estimates:        1.562143 0.2092982 0.3274369 -0.8366801  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.560588 0.2110467 0.3257805 -0.836658  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.560586 0.2110467 0.3257805 -0.836658  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.560588 0.211048 0.3257805 -0.836658  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.560588 0.2110453 0.3257805 -0.836658  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.560588 0.2110467 0.3257821 -0.836658  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.560588 0.2110467 0.3257789 -0.836658  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.560588 0.2110467 0.3257805 -0.8366591  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.560479 0.2105679 0.3277645 -0.8358301  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.560493 0.2105679 0.3277645 -0.8358301  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.560465 0.2105679 0.3277645 -0.8358301  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.560479 0.2105715 0.3277645 -0.8358301  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.560479 0.2105644 0.3277645 -0.8358301  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.560479 0.2105679 0.3277619 -0.8358301  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.560479 0.2105679 0.3277645 -0.8358281  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.560479 0.2105679 0.3277645 -0.8358322  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.561781 0.2102192 0.329437 -0.836328  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.561779 0.2102192 0.329437 -0.836328  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.561781 0.2102209 0.329437 -0.836328  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.561781 0.2102192 0.3294422 -0.836328  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.561781 0.2102192 0.3294317 -0.836328  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.561781 0.2102192 0.329437 -0.8363269  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.563285 0.2112439 0.3306011 -0.8367706  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.563287 0.2112439 0.3306011 -0.8367706  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.563283 0.2112439 0.3306011 -0.8367706  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.563285 0.2112449 0.3306011 -0.8367706  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.563285 0.2112429 0.3306011 -0.8367706  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.563285 0.2112439 0.3306142 -0.8367706  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.563285 0.2112439 0.3305879 -0.8367706  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.563285 0.2112439 0.3306011 -0.8367699  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.563285 0.2112439 0.3306011 -0.8367712  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.563058 0.210519 0.3306561 -0.83612  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.563079 0.210519 0.3306561 -0.83612  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.563036 0.210519 0.3306561 -0.83612  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.563058 0.210528 0.3306561 -0.83612  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.563058 0.2105099 0.3306561 -0.83612  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.563058 0.210519 0.3306819 -0.83612  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.563058 0.210519 0.3306302 -0.83612  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.563058 0.210519 0.3306561 -0.8361184  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.563058 0.210519 0.3306561 -0.8361216  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.563019 0.2105828 0.3305017 -0.8362043  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.56304 0.2105828 0.3305017 -0.8362043  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.562997 0.2105828 0.3305017 -0.8362043  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.563019 0.210593 0.3305017 -0.8362043  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.563019 0.2105727 0.3305017 -0.8362043  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.563019 0.2105828 0.3305208 -0.8362043  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.563019 0.2105828 0.3304826 -0.8362043  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.563019 0.2105828 0.3305017 -0.8361996  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.563019 0.2105828 0.3305017 -0.8362091  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.56303 0.2105901 0.3305431 -0.8362097  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.563059 0.2105901 0.3305431 -0.8362097  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.563 0.2105901 0.3305431 -0.8362097  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.56303 0.2106117 0.3305431 -0.8362097  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.56303 0.2105685 0.3305431 -0.8362097  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.56303 0.2105901 0.3305803 -0.8362097  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.56303 0.2105901 0.3305059 -0.8362097  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.56303 0.2105901 0.3305431 -0.8361901  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.56303 0.2105901 0.3305431 -0.8362293  #>  #>  Objective Function Value:   -1357.952 #>  Parameter Estimates:        1.56303 0.2105901 0.3305431 -0.8362097  #>  #>  Objective Function Value:   -1453.683 #>  Parameter Estimates:        1.420338 0.191365 0.3637505 -0.920218   #>  #> Title: #>  Hyperbolic Parameter Estimation  #>  #> Call: #>  hypFit(x = s, alpha = 1, beta = 0, delta = 1, mu = mean(s), doplot = TRUE) #>  #> Model: #>  Hyperbolic Distribution #>  #> Estimated Parameter(s): #>      alpha       beta      delta         mu  #>  1.4203380  0.1913650  0.3637505 -0.9202180  #>  #> Description: #>  Mon Aug  8 08:09:37 2022 by user: georgi  #>"},{"path":"/reference/dist-hypMode.html","id":null,"dir":"Reference","previous_headings":"","what":"Hyperbolic Mode — hypMode","title":"Hyperbolic Mode — hypMode","text":"Computes mode hyperbolic function.","code":""},{"path":"/reference/dist-hypMode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hyperbolic Mode — hypMode","text":"","code":"hypMode(alpha = 1, beta = 0, delta = 1, mu = 0, pm = c(1, 2, 3, 4))"},{"path":"/reference/dist-hypMode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hyperbolic Mode — hypMode","text":"alpha, beta, delta, mu shape parameter alpha;         skewness parameter beta, abs(beta)          range (0, alpha);         scale parameter delta, delta must zero          positive;          location parameter mu, default 0.         meaning parameters first          parameterization pm=1 default          parameterization selection.         second parameterization, pm=2 alpha         beta take meaning shape parameters         (usually named) zeta rho.         third parameterization, pm=3 alpha         beta take meaning shape parameters         (usually named) xi chi.         fourth parameterization, pm=4 alpha         beta take meaning shape parameters         (usually named) .bar b.bar. pm integer value 1 4          selection parameterization. default takes         first parameterization.","code":""},{"path":"/reference/dist-hypMode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hyperbolic Mode — hypMode","text":"returns mode appropriate parameterization     hyperbolic distribution. numeric value.","code":""},{"path":"/reference/dist-hypMode.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Hyperbolic Mode — hypMode","text":"Atkinson, .C. (1982);      simulation generalized inverse Gaussian hyperbolic      random variables,     SIAM J. Sci. Stat. Comput. 3, 502--515. Barndorff-Nielsen O. (1977);     Exponentially decreasing distributions logarithm      particle size,      Proc. Roy. Soc. Lond., A353, 401--419. Barndorff-Nielsen O., Blaesild, P. (1983);      Hyperbolic distributions. Encyclopedia Statistical      Sciences,      Eds., Johnson N.L., Kotz S. Read C.B.,      Vol. 3, pp. 700--707. New York: Wiley. Raible S. (2000);     Levy Processes Finance: Theory, Numerics Empirical Facts,     PhD Thesis, University Freiburg, Germany, 161 pages.","code":""},{"path":"/reference/dist-hypMode.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Hyperbolic Mode — hypMode","text":"David Scott code implemented R's      contributed package HyperbolicDist.","code":""},{"path":"/reference/dist-hypMode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hyperbolic Mode — hypMode","text":"","code":"## hypMode -    hypMode() #> [1] 0"},{"path":"/reference/dist-hypMoments.html","id":null,"dir":"Reference","previous_headings":"","what":"Hyperbolic Distribution Moments — hypMoments","title":"Hyperbolic Distribution Moments — hypMoments","text":"Calculates moments hyperbbolic distribution      function","code":""},{"path":"/reference/dist-hypMoments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hyperbolic Distribution Moments — hypMoments","text":"","code":"hypMean(alpha=1, beta=0, delta=1, mu=0) hypVar(alpha=1, beta=0, delta=1, mu=0) hypSkew(alpha=1, beta=0, delta=1, mu=0) hypKurt(alpha=1, beta=0, delta=1, mu=0)  hypMoments(order, type = c(\"raw\", \"central\", \"mu\"),     alpha=1, beta=0, delta=1, mu=0)"},{"path":"/reference/dist-hypMoments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hyperbolic Distribution Moments — hypMoments","text":"alpha, beta, delta, mu numeric values.         alpha first shape parameter;         beta second shape parameter range (0, alpha);         delta scale parameter, must zero positive;          mu location parameter, default 0. order integer value, order moment. type character value,          \"raw\" returns moments zero,         \"central\" returns central moments mean,         \"mu\" returns moments location parameter mu.","code":""},{"path":"/reference/dist-hypMoments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hyperbolic Distribution Moments — hypMoments","text":"numerical value.","code":""},{"path":"/reference/dist-hypMoments.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Hyperbolic Distribution Moments — hypMoments","text":"Scott, D. J., Wuertz, D. Tran, T. T. (2008)      Moments Generalized Hyperbolic Distribution.      Preprint.","code":""},{"path":"/reference/dist-hypMoments.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Hyperbolic Distribution Moments — hypMoments","text":"Diethelm Wuertz.","code":""},{"path":"/reference/dist-hypMoments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hyperbolic Distribution Moments — hypMoments","text":"","code":"## hypMean -    hypMean(alpha=1.1, beta=0.1, delta=0.8, mu=-0.3) #> [1] -0.08410502     ## ghKurt -    hypKurt(alpha=1.1, beta=0.1, delta=0.8, mu=-0.3) #> [1] 2.044599     ## hypMoments -    hypMoments(4, alpha=1.1, beta=0.1, delta=0.8, mu=-0.3) #> [1] 23.96634    hypMoments(4, \"central\", alpha=1.1, beta=0.1, delta=0.8, mu=-0.3) #> [1] 24.18639"},{"path":"/reference/dist-hypRobMoments.html","id":null,"dir":"Reference","previous_headings":"","what":"Robust Moments for the HYP — hypRobMoments","title":"Robust Moments for the HYP — hypRobMoments","text":"Computes first four robust moments   hyperbolic distribution.","code":""},{"path":"/reference/dist-hypRobMoments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Robust Moments for the HYP — hypRobMoments","text":"","code":"hypMED(alpha = 1, beta = 0, delta = 1, mu = 0) hypIQR(alpha = 1, beta = 0, delta = 1, mu = 0) hypSKEW(alpha = 1, beta = 0, delta = 1, mu = 0) hypKURT(alpha = 1, beta = 0, delta = 1, mu = 0)"},{"path":"/reference/dist-hypRobMoments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Robust Moments for the HYP — hypRobMoments","text":"alpha, beta, delta, mu shape parameter alpha;     skewness parameter beta, abs(beta)     range (0, alpha);     scale parameter delta, delta must zero     positive;     location parameter mu, default 0.     meaning parameters first     parameterization pm=1 default     parameterization selection.     second parameterization, pm=2 alpha     beta take meaning shape parameters     (usually named) zeta rho.     third parameterization, pm=3 alpha     beta take meaning shape parameters     (usually named) xi chi.     fourth parameterization, pm=4 alpha     beta take meaning shape parameters     (usually named) .bar b.bar.","code":""},{"path":"/reference/dist-hypRobMoments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Robust Moments for the HYP — hypRobMoments","text":"values *hyp functions numeric vectors: d* returns density, p* returns distribution function, q* returns quantile function, r* generates random deviates.   values attributes named \"param\" listing   values distributional parameters.","code":""},{"path":"/reference/dist-hypRobMoments.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Robust Moments for the HYP — hypRobMoments","text":"Diethelm Wuertz.","code":""},{"path":"/reference/dist-hypRobMoments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Robust Moments for the HYP — hypRobMoments","text":"","code":"## hypMED -    # Median:    hypMED(alpha = 1, beta = 0, delta = 1, mu = 0) #>          MED  #> 1.830888e-10   ## hypIQR -    # Inter-quartile Range:    hypIQR(alpha = 1, beta = 0, delta = 1, mu = 0) #>      IQR  #> 1.848932   ## hypSKEW -    # Robust Skewness:    hypSKEW(alpha = 1, beta = 0, delta = 1, mu = 0) #>         SKEW  #> 6.827298e-11   ## hypKURT -    # Robust Kurtosis:    hypKURT(alpha = 1, beta = 0, delta = 1, mu = 0) #>     KURT  #> 1.383927"},{"path":"/reference/dist-hypSlider.html","id":null,"dir":"Reference","previous_headings":"","what":"Hyperbolic Distribution Slider — hypSlider","title":"Hyperbolic Distribution Slider — hypSlider","text":"Displays interactively dependence      hyperbolic distribution parameters.","code":""},{"path":"/reference/dist-hypSlider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hyperbolic Distribution Slider — hypSlider","text":"","code":"hypSlider()"},{"path":"/reference/dist-hypSlider.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hyperbolic Distribution Slider — hypSlider","text":"tcl/tk based graphical user interface.     nice display educational purposes investigate     densities probabilities hyperbolic distribution.","code":""},{"path":"/reference/dist-hypSlider.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hyperbolic Distribution Slider — hypSlider","text":"","code":"## hypSlider -    #"},{"path":"/reference/dist-nig.html","id":null,"dir":"Reference","previous_headings":"","what":"Normal Inverse Gaussian Distribution — nig","title":"Normal Inverse Gaussian Distribution — nig","text":"Density, distribution function, quantile function      random generation normal inverse     Gaussian distribution.","code":""},{"path":"/reference/dist-nig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normal Inverse Gaussian Distribution — nig","text":"","code":"dnig(x, alpha = 1, beta = 0, delta = 1, mu = 0, log = FALSE) pnig(q, alpha = 1, beta = 0, delta = 1, mu = 0) qnig(p, alpha = 1, beta = 0, delta = 1, mu = 0) rnig(n, alpha = 1, beta = 0, delta = 1, mu = 0)"},{"path":"/reference/dist-nig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normal Inverse Gaussian Distribution — nig","text":"alpha, beta, delta, mu shape parameter alpha;         skewness parameter beta, abs(beta)          range (0, alpha);         scale parameter delta, delta must zero          positive;          location parameter mu, default 0.         parameters first parameterization. log logical flag default FALSE.          labels main title drawn plot? n number observations. p numeric vector probabilities. x, q numeric vector quantiles.","code":""},{"path":"/reference/dist-nig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normal Inverse Gaussian Distribution — nig","text":"values *nig functions numeric vectors:  d* returns density, p* returns distribution function, q* returns quantile function, r* generates random deviates.     values attributes named \"param\" listing     values distributional parameters.","code":""},{"path":"/reference/dist-nig.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Normal Inverse Gaussian Distribution — nig","text":"random deviates calculated method described      Raible (2000).","code":""},{"path":"/reference/dist-nig.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Normal Inverse Gaussian Distribution — nig","text":"David Scott code implemented R's      contributed package HyperbolicDist.","code":""},{"path":"/reference/dist-nig.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Normal Inverse Gaussian Distribution — nig","text":"Atkinson, .C. (1982);      simulation generalized inverse Gaussian hyperbolic      random variables,     SIAM J. Sci. Stat. Comput. 3, 502--515. Barndorff-Nielsen O. (1977);     Exponentially decreasing distributions logarithm      particle size,      Proc. Roy. Soc. Lond., A353, 401--419. Barndorff-Nielsen O., Blaesild, P. (1983);      Hyperbolic distributions. Encyclopedia Statistical      Sciences,      Eds., Johnson N.L., Kotz S. Read C.B.,      Vol. 3, pp. 700--707. New York: Wiley. Raible S. (2000);     Levy Processes Finance: Theory, Numerics Empirical Facts,     PhD Thesis, University Freiburg, Germany, 161 pages.","code":""},{"path":"/reference/dist-nig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normal Inverse Gaussian Distribution — nig","text":"","code":"## nig -    set.seed(1953)    r = rnig(5000, alpha = 1, beta = 0.3, delta = 1)    plot(r, type = \"l\", col = \"steelblue\",      main = \"nig: alpha=1 beta=0.3 delta=1\")    ## nig -     # Plot empirical density and compare with true density:    hist(r, n = 25, probability = TRUE, border = \"white\", col = \"steelblue\")    x = seq(-5, 5, 0.25)    lines(x, dnig(x, alpha = 1, beta = 0.3, delta = 1))    ## nig -      # Plot df and compare with true df:    plot(sort(r), (1:5000/5000), main = \"Probability\", col = \"steelblue\")    lines(x, pnig(x, alpha = 1, beta = 0.3, delta = 1))      ## nig -    # Compute Quantiles:    qnig(pnig(seq(-5, 5, 1), alpha = 1, beta = 0.3, delta = 1),       alpha = 1, beta = 0.3, delta = 1)  #>  [1] -5.000001e+00 -4.000000e+00 -3.000006e+00 -1.999996e+00 -1.000010e+00 #>  [6] -8.504243e-06  1.000003e+00  1.999972e+00  3.000000e+00  3.999998e+00 #> [11]  4.999976e+00"},{"path":"/reference/dist-nigFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit of a Normal Inverse Gaussian Distribution — nigFit","title":"Fit of a Normal Inverse Gaussian Distribution — nigFit","text":"Estimates parameters  normal inverse      Gaussian distribution.","code":""},{"path":"/reference/dist-nigFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit of a Normal Inverse Gaussian Distribution — nigFit","text":"","code":"nigFit(x, alpha = 1, beta = 0, delta = 1, mu = 0,      method = c(\"mle\", \"gmm\", \"mps\", \"vmps\"), scale = TRUE, doplot = TRUE,      span = \"auto\", trace = TRUE, title = NULL, description = NULL, ...)"},{"path":"/reference/dist-nigFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit of a Normal Inverse Gaussian Distribution — nigFit","text":"alpha, beta, delta, mu parameters alpha, beta, delta,         mu:         shape parameter alpha;         skewness parameter beta, abs(beta)          range (0, alpha);         scale parameter delta, delta must zero          positive;          location parameter mu, default 0.         meaning parameters first          parameterization pm=1 default          parameterization selection.         second parameterization, pm=2 alpha         beta take meaning shape parameters         (usually named) zeta rho.         third parameterization, pm=3 alpha         beta take meaning shape parameters         (usually named) xi chi.         fourth parameterization, pm=4 alpha         beta take meaning shape parameters         (usually named) .bar b.bar. description character string allows brief description. doplot logical flag. plot displayed? method character string. Either          \"mle\", Maximum Likelihood Estimation, default,          \"gmm\" Gemeralized Method Moments Estimation,          \"mps\" Maximum Product Spacings Estimation,         \"vmps\" Minimum Variance Product Spacings Estimation. scale logical flag, default TRUE. time series         scaled standard deviation achieve stable         optimization? span x-coordinates plot, default 100 values          automatically selected ranging 0.001,          0.999 quantiles. Alternatively, can specify         range expression like span=seq(min, max,         times = n), , min max          left right endpoints range, n gives          number intermediate points. title character string allows project title. trace logical flag. parameter estimation process         traced? x numeric vector. ... parameters parsed.","code":""},{"path":"/reference/dist-nigFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit of a Normal Inverse Gaussian Distribution — nigFit","text":"functions tFit, hypFit nigFit return      list following components: estimate point maximum value log liklihood          function obtained. minimum value estimated maximum, .e. value         log liklihood function. code integer indicating optimization process terminated.         1: relative gradient close zero, current iterate probably              solution;          2: successive iterates within tolerance, current iterate probably              solution;          3: last global step failed locate point lower estimate.              Either estimate approximate local minimum              function steptol small;          4: iteration limit exceeded;          5: maximum step size stepmax exceeded five consecutive times.              Either function unbounded , becomes asymptotic              finite value direction stepmax              small. gradient gradient estimated maximum. steps number function calls.","code":""},{"path":"/reference/dist-nigFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit of a Normal Inverse Gaussian Distribution — nigFit","text":"","code":"## nigFit -    # Simulate Random Variates:    set.seed(1953)    s = rnig(n = 1000, alpha = 1.5, beta = 0.3, delta = 0.5, mu = -1.0)   ## nigFit -      # Fit Parameters:    nigFit(s, alpha = 1, beta = 0, delta = 1, mu = mean(s), doplot = TRUE)  #>  #>  Objective Function Value:   -1646.542 #>  Parameter Estimates:        1 0 1 -0.9230541  #>  #>  Objective Function Value:   -1646.542 #>  Parameter Estimates:        1 0 1 -0.9230541  #>  #>  Objective Function Value:   -1646.542 #>  Parameter Estimates:        1 1.490116e-08 1 -0.9230541  #>  #>  Objective Function Value:   -1646.542 #>  Parameter Estimates:        1 0 1 -0.9230541  #>  #>  Objective Function Value:   -1646.542 #>  Parameter Estimates:        1 0 1 -0.9230541  #>  #>  Objective Function Value:   -1739.817 #>  Parameter Estimates:        0.8878693 -0.590966 1.226999 -1.68899  #>  #>  Objective Function Value:   -1393.208 #>  Parameter Estimates:        0.9484807 -0.2715238 1.104297 -1.274969  #>  #>  Objective Function Value:   -1393.206 #>  Parameter Estimates:        0.9485159 -0.2715238 1.104297 -1.274969  #>  #>  Objective Function Value:   -1393.206 #>  Parameter Estimates:        0.9484807 -0.2714886 1.104297 -1.274969  #>  #>  Objective Function Value:   -1393.207 #>  Parameter Estimates:        0.9484807 -0.2715238 1.104261 -1.274969  #>  #>  Objective Function Value:   -1393.212 #>  Parameter Estimates:        0.9484807 -0.2715238 1.104297 -1.274934  #>  #>  Objective Function Value:   -1368.376 #>  Parameter Estimates:        1.154588 -0.0887069 0.9729932 -1.61842  #>  #>  Objective Function Value:   -1368.376 #>  Parameter Estimates:        1.154584 -0.0887069 0.9729932 -1.61842  #>  #>  Objective Function Value:   -1368.376 #>  Parameter Estimates:        1.154588 -0.08870801 0.9729932 -1.61842  #>  #>  Objective Function Value:   -1368.376 #>  Parameter Estimates:        1.154588 -0.0887069 0.9729958 -1.61842  #>  #>  Objective Function Value:   -1368.376 #>  Parameter Estimates:        1.154588 -0.0887069 0.9729932 -1.618419  #>  #>  Objective Function Value:   -1404.634 #>  Parameter Estimates:        1.062064 0.3250035 1.147836 -1.589885  #>  #>  Objective Function Value:   -1362.03 #>  Parameter Estimates:        1.130711 0.0277694 0.9984241 -1.526042  #>  #>  Objective Function Value:   -1362.03 #>  Parameter Estimates:        1.130714 0.0277694 0.9984241 -1.526042  #>  #>  Objective Function Value:   -1362.03 #>  Parameter Estimates:        1.130711 0.02776652 0.9984241 -1.526042  #>  #>  Objective Function Value:   -1362.03 #>  Parameter Estimates:        1.130711 0.0277694 0.9984199 -1.526042  #>  #>  Objective Function Value:   -1362.03 #>  Parameter Estimates:        1.130711 0.0277694 0.9984241 -1.526044  #>  #>  Objective Function Value:   -1353.398 #>  Parameter Estimates:        1.087529 0.07355573 1.048191 -1.655963  #>  #>  Objective Function Value:   -1353.398 #>  Parameter Estimates:        1.087535 0.07355573 1.048191 -1.655963  #>  #>  Objective Function Value:   -1353.398 #>  Parameter Estimates:        1.087529 0.07355694 1.048191 -1.655963  #>  #>  Objective Function Value:   -1353.398 #>  Parameter Estimates:        1.087529 0.07355573 1.048185 -1.655963  #>  #>  Objective Function Value:   -1353.398 #>  Parameter Estimates:        1.087529 0.07355573 1.048191 -1.655962  #>  #>  Objective Function Value:   -1353.605 #>  Parameter Estimates:        1.018147 0.2015899 1.015051 -1.687778  #>  #>  Objective Function Value:   -1352.735 #>  Parameter Estimates:        1.074745 0.1420491 1.025164 -1.656674  #>  #>  Objective Function Value:   -1352.735 #>  Parameter Estimates:        1.074749 0.1420491 1.025164 -1.656674  #>  #>  Objective Function Value:   -1352.735 #>  Parameter Estimates:        1.074745 0.1420474 1.025164 -1.656674  #>  #>  Objective Function Value:   -1352.735 #>  Parameter Estimates:        1.074745 0.1420491 1.025167 -1.656674  #>  #>  Objective Function Value:   -1352.735 #>  Parameter Estimates:        1.074745 0.1420491 1.025164 -1.656676  #>  #>  Objective Function Value:   -1350.972 #>  Parameter Estimates:        1.033818 0.1360954 0.9857381 -1.702725  #>  #>  Objective Function Value:   -1350.972 #>  Parameter Estimates:        1.033812 0.1360954 0.9857381 -1.702725  #>  #>  Objective Function Value:   -1350.972 #>  Parameter Estimates:        1.033818 0.1360965 0.9857381 -1.702725  #>  #>  Objective Function Value:   -1350.972 #>  Parameter Estimates:        1.033818 0.1360954 0.9857461 -1.702725  #>  #>  Objective Function Value:   -1350.972 #>  Parameter Estimates:        1.033818 0.1360954 0.9857381 -1.702724  #>  #>  Objective Function Value:   -1350.416 #>  Parameter Estimates:        0.9827402 0.1703297 0.9458791 -1.706703  #>  #>  Objective Function Value:   -1350.415 #>  Parameter Estimates:        0.9827471 0.1703297 0.9458791 -1.706703  #>  #>  Objective Function Value:   -1350.416 #>  Parameter Estimates:        0.9827402 0.1703284 0.9458791 -1.706703  #>  #>  Objective Function Value:   -1350.416 #>  Parameter Estimates:        0.9827402 0.1703297 0.9458849 -1.706703  #>  #>  Objective Function Value:   -1350.415 #>  Parameter Estimates:        0.9827402 0.1703297 0.9458791 -1.706704  #>  #>  Objective Function Value:   -1350.454 #>  Parameter Estimates:        0.9391718 0.1628042 0.8910938 -1.727421  #>  #>  Objective Function Value:   -1350.314 #>  Parameter Estimates:        0.9691065 0.1635911 0.9212719 -1.726361  #>  #>  Objective Function Value:   -1350.314 #>  Parameter Estimates:        0.9691017 0.1635911 0.9212719 -1.726361  #>  #>  Objective Function Value:   -1350.314 #>  Parameter Estimates:        0.9691065 0.1635923 0.9212719 -1.726361  #>  #>  Objective Function Value:   -1350.314 #>  Parameter Estimates:        0.9691065 0.1635911 0.9212788 -1.726361  #>  #>  Objective Function Value:   -1350.314 #>  Parameter Estimates:        0.9691065 0.1635911 0.9212719 -1.72636  #>  #>  Objective Function Value:   -1350.242 #>  Parameter Estimates:        0.9680782 0.1858798 0.9460066 -1.737019  #>  #>  Objective Function Value:   -1350.242 #>  Parameter Estimates:        0.9680831 0.1858798 0.9460066 -1.737019  #>  #>  Objective Function Value:   -1350.242 #>  Parameter Estimates:        0.9680782 0.1858786 0.9460066 -1.737019  #>  #>  Objective Function Value:   -1350.242 #>  Parameter Estimates:        0.9680782 0.1858798 0.9460036 -1.737019  #>  #>  Objective Function Value:   -1350.242 #>  Parameter Estimates:        0.9680782 0.1858798 0.9460066 -1.73702  #>  #>  Objective Function Value:   -1350.078 #>  Parameter Estimates:        0.987342 0.1951129 0.9191215 -1.730379  #>  #>  Objective Function Value:   -1350.078 #>  Parameter Estimates:        0.9873395 0.1951129 0.9191215 -1.730379  #>  #>  Objective Function Value:   -1350.078 #>  Parameter Estimates:        0.987342 0.1951112 0.9191215 -1.730379  #>  #>  Objective Function Value:   -1350.078 #>  Parameter Estimates:        0.987342 0.1951129 0.9191232 -1.730379  #>  #>  Objective Function Value:   -1350.078 #>  Parameter Estimates:        0.987342 0.1951129 0.9191215 -1.730381  #>  #>  Objective Function Value:   -1350.274 #>  Parameter Estimates:        1.007734 0.1940269 0.9335209 -1.754851  #>  #>  Objective Function Value:   -1350.042 #>  Parameter Estimates:        0.9857484 0.1927684 0.9226369 -1.739619  #>  #>  Objective Function Value:   -1350.042 #>  Parameter Estimates:        0.9857512 0.1927684 0.9226369 -1.739619  #>  #>  Objective Function Value:   -1350.042 #>  Parameter Estimates:        0.9857484 0.1927707 0.9226369 -1.739619  #>  #>  Objective Function Value:   -1350.042 #>  Parameter Estimates:        0.9857484 0.1927684 0.922635 -1.739619  #>  #>  Objective Function Value:   -1350.042 #>  Parameter Estimates:        0.9857484 0.1927684 0.9226369 -1.739617  #>  #>  Objective Function Value:   -1350.012 #>  Parameter Estimates:        0.9901976 0.1984988 0.9296047 -1.737477  #>  #>  Objective Function Value:   -1350.012 #>  Parameter Estimates:        0.9902049 0.1984988 0.9296047 -1.737477  #>  #>  Objective Function Value:   -1350.012 #>  Parameter Estimates:        0.9901976 0.1984976 0.9296047 -1.737477  #>  #>  Objective Function Value:   -1350.012 #>  Parameter Estimates:        0.9901976 0.1984988 0.9295999 -1.737477  #>  #>  Objective Function Value:   -1350.012 #>  Parameter Estimates:        0.9901976 0.1984988 0.9296047 -1.737478  #>  #>  Objective Function Value:   -1349.999 #>  Parameter Estimates:        0.9988236 0.1999543 0.9334693 -1.74126  #>  #>  Objective Function Value:   -1349.999 #>  Parameter Estimates:        0.9988198 0.1999543 0.9334693 -1.74126  #>  #>  Objective Function Value:   -1349.999 #>  Parameter Estimates:        0.9988236 0.1999549 0.9334693 -1.74126  #>  #>  Objective Function Value:   -1349.999 #>  Parameter Estimates:        0.9988236 0.1999537 0.9334693 -1.74126  #>  #>  Objective Function Value:   -1349.999 #>  Parameter Estimates:        0.9988236 0.1999543 0.9334705 -1.74126  #>  #>  Objective Function Value:   -1349.999 #>  Parameter Estimates:        0.9988236 0.1999543 0.933468 -1.74126  #>  #>  Objective Function Value:   -1349.999 #>  Parameter Estimates:        0.9988236 0.1999543 0.9334693 -1.741259  #>  #>  Objective Function Value:   -1349.985 #>  Parameter Estimates:        1.002549 0.2080177 0.9315512 -1.746076  #>  #>  Objective Function Value:   -1349.985 #>  Parameter Estimates:        1.002553 0.2080177 0.9315512 -1.746076  #>  #>  Objective Function Value:   -1349.985 #>  Parameter Estimates:        1.002549 0.2080165 0.9315512 -1.746076  #>  #>  Objective Function Value:   -1349.985 #>  Parameter Estimates:        1.002549 0.2080177 0.9315484 -1.746076  #>  #>  Objective Function Value:   -1349.985 #>  Parameter Estimates:        1.002549 0.2080177 0.9315512 -1.746075  #>  #>  Objective Function Value:   -1349.985 #>  Parameter Estimates:        1.002549 0.2080177 0.9315512 -1.746076  #>  #>  Objective Function Value:   -1349.993 #>  Parameter Estimates:        0.9989379 0.2113539 0.939144 -1.750969  #>  #>  Objective Function Value:   -1349.981 #>  Parameter Estimates:        1.001175 0.2092873 0.9344407 -1.747938  #>  #>  Objective Function Value:   -1349.981 #>  Parameter Estimates:        1.001178 0.2092873 0.9344407 -1.747938  #>  #>  Objective Function Value:   -1349.981 #>  Parameter Estimates:        1.001175 0.2092861 0.9344407 -1.747938  #>  #>  Objective Function Value:   -1349.981 #>  Parameter Estimates:        1.001175 0.2092873 0.9344383 -1.747938  #>  #>  Objective Function Value:   -1349.981 #>  Parameter Estimates:        1.001175 0.2092873 0.9344407 -1.747937  #>  #>  Objective Function Value:   -1349.979 #>  Parameter Estimates:        1.0038 0.2116974 0.9336798 -1.749367  #>  #>  Objective Function Value:   -1349.979 #>  Parameter Estimates:        1.003798 0.2116974 0.9336798 -1.749367  #>  #>  Objective Function Value:   -1349.979 #>  Parameter Estimates:        1.0038 0.211698 0.9336798 -1.749367  #>  #>  Objective Function Value:   -1349.979 #>  Parameter Estimates:        1.0038 0.2116967 0.9336798 -1.749367  #>  #>  Objective Function Value:   -1349.979 #>  Parameter Estimates:        1.0038 0.2116974 0.933682 -1.749367  #>  #>  Objective Function Value:   -1349.979 #>  Parameter Estimates:        1.0038 0.2116974 0.9336777 -1.749367  #>  #>  Objective Function Value:   -1349.979 #>  Parameter Estimates:        1.0038 0.2116974 0.9336798 -1.749366  #>  #>  Objective Function Value:   -1349.979 #>  Parameter Estimates:        1.0038 0.2116974 0.9336798 -1.749368  #>  #>  Objective Function Value:   -1349.978 #>  Parameter Estimates:        1.006235 0.2124717 0.9365982 -1.749888  #>  #>  Objective Function Value:   -1349.978 #>  Parameter Estimates:        1.006241 0.2124717 0.9365982 -1.749888  #>  #>  Objective Function Value:   -1349.978 #>  Parameter Estimates:        1.006229 0.2124717 0.9365982 -1.749888  #>  #>  Objective Function Value:   -1349.978 #>  Parameter Estimates:        1.006235 0.2124734 0.9365982 -1.749888  #>  #>  Objective Function Value:   -1349.978 #>  Parameter Estimates:        1.006235 0.2124701 0.9365982 -1.749888  #>  #>  Objective Function Value:   -1349.978 #>  Parameter Estimates:        1.006235 0.2124717 0.9365965 -1.749888  #>  #>  Objective Function Value:   -1349.978 #>  Parameter Estimates:        1.006235 0.2124717 0.9365982 -1.749887  #>  #>  Objective Function Value:   -1349.978 #>  Parameter Estimates:        1.006235 0.2124717 0.9365982 -1.749889  #>  #>  Objective Function Value:   -1349.977 #>  Parameter Estimates:        1.009802 0.2131193 0.9380694 -1.750003  #>  #>  Objective Function Value:   -1349.977 #>  Parameter Estimates:        1.009799 0.2131193 0.9380694 -1.750003  #>  #>  Objective Function Value:   -1349.977 #>  Parameter Estimates:        1.009802 0.2131209 0.9380694 -1.750003  #>  #>  Objective Function Value:   -1349.977 #>  Parameter Estimates:        1.009802 0.2131177 0.9380694 -1.750003  #>  #>  Objective Function Value:   -1349.977 #>  Parameter Estimates:        1.009802 0.2131193 0.9380725 -1.750003  #>  #>  Objective Function Value:   -1349.977 #>  Parameter Estimates:        1.009802 0.2131193 0.9380663 -1.750003  #>  #>  Objective Function Value:   -1349.977 #>  Parameter Estimates:        1.009802 0.2131193 0.9380694 -1.750002  #>  #>  Objective Function Value:   -1349.977 #>  Parameter Estimates:        1.009802 0.2131193 0.9380694 -1.750003  #>  #>  Objective Function Value:   -1349.977 #>  Parameter Estimates:        1.01208 0.2150106 0.9395315 -1.752103  #>  #>  Objective Function Value:   -1349.977 #>  Parameter Estimates:        1.012087 0.2150106 0.9395315 -1.752103  #>  #>  Objective Function Value:   -1349.977 #>  Parameter Estimates:        1.012074 0.2150106 0.9395315 -1.752103  #>  #>  Objective Function Value:   -1349.977 #>  Parameter Estimates:        1.01208 0.2150117 0.9395315 -1.752103  #>  #>  Objective Function Value:   -1349.977 #>  Parameter Estimates:        1.01208 0.2150095 0.9395315 -1.752103  #>  #>  Objective Function Value:   -1349.977 #>  Parameter Estimates:        1.01208 0.2150106 0.9395341 -1.752103  #>  #>  Objective Function Value:   -1349.977 #>  Parameter Estimates:        1.01208 0.2150106 0.9395289 -1.752103  #>  #>  Objective Function Value:   -1349.977 #>  Parameter Estimates:        1.01208 0.2150106 0.9395315 -1.752102  #>  #>  Objective Function Value:   -1349.977 #>  Parameter Estimates:        1.011464 0.2145723 0.9391637 -1.751617  #>  #>  Objective Function Value:   -1349.977 #>  Parameter Estimates:        1.011498 0.2145723 0.9391637 -1.751617  #>  #>  Objective Function Value:   -1349.977 #>  Parameter Estimates:        1.011429 0.2145723 0.9391637 -1.751617  #>  #>  Objective Function Value:   -1349.977 #>  Parameter Estimates:        1.011464 0.2145753 0.9391637 -1.751617  #>  #>  Objective Function Value:   -1349.977 #>  Parameter Estimates:        1.011464 0.2145694 0.9391637 -1.751617  #>  #>  Objective Function Value:   -1349.977 #>  Parameter Estimates:        1.011464 0.2145723 0.9391771 -1.751617  #>  #>  Objective Function Value:   -1349.977 #>  Parameter Estimates:        1.011464 0.2145723 0.9391504 -1.751617  #>  #>  Objective Function Value:   -1349.977 #>  Parameter Estimates:        1.011464 0.2145723 0.9391637 -1.751616  #>  #>  Objective Function Value:   -1349.977 #>  Parameter Estimates:        1.011464 0.2145723 0.9391637 -1.751619  #>  #>  Objective Function Value:   -1349.977 #>  Parameter Estimates:        1.011456 0.2145678 0.9391594 -1.751614  #>  #>  Objective Function Value:   -1349.977 #>  Parameter Estimates:        1.011505 0.2145678 0.9391594 -1.751614  #>  #>  Objective Function Value:   -1349.977 #>  Parameter Estimates:        1.011408 0.2145678 0.9391594 -1.751614  #>  #>  Objective Function Value:   -1349.977 #>  Parameter Estimates:        1.011456 0.2145922 0.9391594 -1.751614  #>  #>  Objective Function Value:   -1349.977 #>  Parameter Estimates:        1.011456 0.2145434 0.9391594 -1.751614  #>  #>  Objective Function Value:   -1349.977 #>  Parameter Estimates:        1.011456 0.2145678 0.9391935 -1.751614  #>  #>  Objective Function Value:   -1349.977 #>  Parameter Estimates:        1.011456 0.2145678 0.9391253 -1.751614  #>  #>  Objective Function Value:   -1349.977 #>  Parameter Estimates:        1.011456 0.2145678 0.9391594 -1.751594  #>  #>  Objective Function Value:   -1349.977 #>  Parameter Estimates:        1.011456 0.2145678 0.9391594 -1.751634  #>  #>  Objective Function Value:   -1349.977 #>  Parameter Estimates:        1.011456 0.2145678 0.9391594 -1.751614  #>  #>  Objective Function Value:   -833.1119 #>  Parameter Estimates:        1.695972 0.3597793 0.5601027 -1.04464  #> Warning: NaNs produced  #>  #> Title: #>  Normal Inverse Gaussian Parameter Estimation  #>  #> Call: #>  .nigFit.mle(x = x, alpha = alpha, beta = beta, delta = delta,  #>     mu = mu, scale = scale, doplot = doplot, span = span, trace = trace,  #>     title = title, description = description) #>  #> Model: #>  Normal Inverse Gaussian Distribution #>  #> Estimated Parameter(s): #>      alpha       beta      delta         mu  #>  1.6959724  0.3597793  0.5601027 -1.0446402  #>  #> Description: #>  Mon Aug  8 08:09:38 2022 by user: georgi  #>"},{"path":"/reference/dist-nigMode.html","id":null,"dir":"Reference","previous_headings":"","what":"Normal Inverse Gaussian Mode — nigMode","title":"Normal Inverse Gaussian Mode — nigMode","text":"Computes mode norm inverse Gaussian     distribution.","code":""},{"path":"/reference/dist-nigMode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normal Inverse Gaussian Mode — nigMode","text":"","code":"nigMode(alpha = 1, beta = 0, delta = 1, mu = 0)"},{"path":"/reference/dist-nigMode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normal Inverse Gaussian Mode — nigMode","text":"alpha, beta, delta, mu shape parameter alpha;         skewness parameter beta, abs(beta)          range (0, alpha);         scale parameter delta, delta must zero          positive;          location parameter mu, default 0.         parameters first parameterization.","code":""},{"path":"/reference/dist-nigMode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normal Inverse Gaussian Mode — nigMode","text":"returns mode normal inverse Gaussian distribution.      numeric value.","code":""},{"path":"/reference/dist-nigMode.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Normal Inverse Gaussian Mode — nigMode","text":"Atkinson, .C. (1982);      simulation generalized inverse Gaussian hyperbolic      random variables,     SIAM J. Sci. Stat. Comput. 3, 502--515. Barndorff-Nielsen O. (1977);     Exponentially decreasing distributions logarithm      particle size,      Proc. Roy. Soc. Lond., A353, 401--419. Barndorff-Nielsen O., Blaesild, P. (1983);      Hyperbolic distributions. Encyclopedia Statistical      Sciences,      Eds., Johnson N.L., Kotz S. Read C.B.,      Vol. 3, pp. 700--707. New York: Wiley. Raible S. (2000);     Levy Processes Finance: Theory, Numerics Empirical Facts,     PhD Thesis, University Freiburg, Germany, 161 pages.","code":""},{"path":"/reference/dist-nigMode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normal Inverse Gaussian Mode — nigMode","text":"","code":"## nigMode -    nigMode() #> [1] -1.344761e-08"},{"path":"/reference/dist-nigMoments.html","id":null,"dir":"Reference","previous_headings":"","what":"Moments for the Normal Inverse Gaussian — nigMoments","title":"Moments for the Normal Inverse Gaussian — nigMoments","text":"Computes first four moments     normal inverse Gaussian distribution.","code":""},{"path":"/reference/dist-nigMoments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Moments for the Normal Inverse Gaussian — nigMoments","text":"","code":"nigMean(alpha = 1, beta = 0, delta = 1, mu = 0) nigVar(alpha = 1, beta = 0, delta = 1, mu = 0) nigSkew(alpha = 1, beta = 0, delta = 1, mu = 0) nigKurt(alpha = 1, beta = 0, delta = 1, mu = 0)"},{"path":"/reference/dist-nigMoments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Moments for the Normal Inverse Gaussian — nigMoments","text":"alpha, beta, delta, mu numeric values         alpha location parameter,         beta location parameter,         delta first shape parameter,         mu second shape parameter.","code":""},{"path":"/reference/dist-nigMoments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Moments for the Normal Inverse Gaussian — nigMoments","text":"values *nig functions numeric vectors:  d* returns density, p* returns distribution function, q* returns quantile function, r* generates random deviates.     values attributes named \"param\" listing     values distributional parameters.","code":""},{"path":"/reference/dist-nigMoments.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Moments for the Normal Inverse Gaussian — nigMoments","text":"Scott, D. J., Wuertz, D. Tran, T. T. (2008)      Moments Generalized Hyperbolic Distribution.      Preprint.","code":""},{"path":"/reference/dist-nigMoments.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Moments for the Normal Inverse Gaussian — nigMoments","text":"Diethelm Wuertz.","code":""},{"path":"/reference/dist-nigMoments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Moments for the Normal Inverse Gaussian — nigMoments","text":"","code":"## nigMean -    # Median:    nigMean(alpha = 1, beta = 0, delta = 1, mu = 0) #> mean  #>    0    ## nigVar -     # Inter-quartile Range:    nigVar(alpha = 1, beta = 0, delta = 1, mu = 0) #> var  #>   1    ## nigSKEW -      # Robust Skewness:    nigSkew(alpha = 1, beta = 0, delta = 1, mu = 0) #> skew  #>    0      ## nigKurt -    # Robust Kurtosis:    nigKurt(alpha = 1, beta = 0, delta = 1, mu = 0) #> kurt  #>    3"},{"path":"/reference/dist-nigRobMoments.html","id":null,"dir":"Reference","previous_headings":"","what":"Robust Moments for the NIG — nigRobMoments","title":"Robust Moments for the NIG — nigRobMoments","text":"Computes first four robust moments     Normal Inverse Gaussian Distribution.","code":""},{"path":"/reference/dist-nigRobMoments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Robust Moments for the NIG — nigRobMoments","text":"","code":"nigMED(alpha = 1, beta = 0, delta = 1, mu = 0) nigIQR(alpha = 1, beta = 0, delta = 1, mu = 0) nigSKEW(alpha = 1, beta = 0, delta = 1, mu = 0) nigKURT(alpha = 1, beta = 0, delta = 1, mu = 0)"},{"path":"/reference/dist-nigRobMoments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Robust Moments for the NIG — nigRobMoments","text":"alpha, beta, delta, mu numeric values         alpha location parameter,         beta location parameter,         delta first shape parameter,         mu second shape parameter.","code":""},{"path":"/reference/dist-nigRobMoments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Robust Moments for the NIG — nigRobMoments","text":"values *nig functions numeric vectors: d* returns density, p* returns distribution function, q* returns quantile function, r* generates random deviates.     values attributes named \"param\" listing     values distributional parameters.","code":""},{"path":"/reference/dist-nigRobMoments.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Robust Moments for the NIG — nigRobMoments","text":"Diethelm Wuertz.","code":""},{"path":"/reference/dist-nigRobMoments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Robust Moments for the NIG — nigRobMoments","text":"","code":"## nigMED -    # Median:    nigMED(alpha = 1, beta = 0, delta = 1, mu = 0) #>           MED  #> -1.058612e-07   ## nigIQR -    # Inter-quartile Range:    nigIQR(alpha = 1, beta = 0, delta = 1, mu = 0) #>      IQR  #> 1.079179   ## nigSKEW -    # Robust Skewness:    nigSKEW(alpha = 1, beta = 0, delta = 1, mu = 0) #>          SKEW  #> -8.292074e-08   ## nigKURT -    # Robust Kurtosis:    nigKURT(alpha = 1, beta = 0, delta = 1, mu = 0) #>     KURT  #> 1.387172"},{"path":"/reference/dist-nigShapeTriangle.html","id":null,"dir":"Reference","previous_headings":"","what":"NIG Shape Triangle — nigShapeTriangle","title":"NIG Shape Triangle — nigShapeTriangle","text":"Plots normal inverse Gaussian Shape Triangle.","code":""},{"path":"/reference/dist-nigShapeTriangle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NIG Shape Triangle — nigShapeTriangle","text":"","code":"nigShapeTriangle(object, add = FALSE, labels = TRUE, ...)"},{"path":"/reference/dist-nigShapeTriangle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NIG Shape Triangle — nigShapeTriangle","text":"object object class \"fDISTFIT\" returned function         nigFit. add logical value. another point added NIG         shape triangle? default FALSE, new plot created. labels logical flag default TRUE.          logarithm density returned? ... arguments passed function integrate.","code":""},{"path":"/reference/dist-nigShapeTriangle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NIG Shape Triangle — nigShapeTriangle","text":"displays parameters fitted distributions     NIG shape triangle.","code":""},{"path":"/reference/dist-nigShapeTriangle.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"NIG Shape Triangle — nigShapeTriangle","text":"David Scott code implemented R's      contributed package HyperbolicDist.","code":""},{"path":"/reference/dist-nigShapeTriangle.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"NIG Shape Triangle — nigShapeTriangle","text":"Atkinson, .C. (1982);      simulation generalized inverse Gaussian hyperbolic      random variables,     SIAM J. Sci. Stat. Comput. 3, 502--515. Barndorff-Nielsen O. (1977);     Exponentially decreasing distributions logarithm      particle size,      Proc. Roy. Soc. Lond., A353, 401--419. Barndorff-Nielsen O., Blaesild, P. (1983);      Hyperbolic distributions. Encyclopedia Statistical      Sciences,      Eds., Johnson N.L., Kotz S. Read C.B.,      Vol. 3, pp. 700--707. New York: Wiley. Raible S. (2000);     Levy Processes Finance: Theory, Numerics Empirical Facts,     PhD Thesis, University Freiburg, Germany, 161 pages.","code":""},{"path":"/reference/dist-nigShapeTriangle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NIG Shape Triangle — nigShapeTriangle","text":"","code":"## nigShapeTriangle -    #"},{"path":"/reference/dist-nigSlider.html","id":null,"dir":"Reference","previous_headings":"","what":"nigerbolic Distribution Slider — nigSlider","title":"nigerbolic Distribution Slider — nigSlider","text":"Displays interactively dependence      nigerbolic distribution parameters.","code":""},{"path":"/reference/dist-nigSlider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"nigerbolic Distribution Slider — nigSlider","text":"","code":"nigSlider()"},{"path":"/reference/dist-nigSlider.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"nigerbolic Distribution Slider — nigSlider","text":"tcl/tk based graphical user interface.     nice display educational purposes investigate     densities probabilities invetrse Gaussian      distribution.","code":""},{"path":"/reference/dist-nigSlider.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"nigerbolic Distribution Slider — nigSlider","text":"","code":"## nigSlider -    # nigSlider()"},{"path":"/reference/dist-normRobMoments.html","id":null,"dir":"Reference","previous_headings":"","what":"Robust Moments for the NORM — normRobMoments","title":"Robust Moments for the NORM — normRobMoments","text":"Computes first four robust moments     Normal Distribution.","code":""},{"path":"/reference/dist-normRobMoments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Robust Moments for the NORM — normRobMoments","text":"","code":"normMED(mean = 0, sd = 1) normIQR(mean = 0, sd = 1) normSKEW(mean = 0, sd = 1) normKURT(mean = 0, sd = 1)"},{"path":"/reference/dist-normRobMoments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Robust Moments for the NORM — normRobMoments","text":"mean locaiton parameter sd scale parameter","code":""},{"path":"/reference/dist-normRobMoments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Robust Moments for the NORM — normRobMoments","text":"values *norm functions numeric vectors: d* returns density, p* returns distribution function, q* returns quantile function, r* generates random deviates.     values attributes named \"param\" listing     values distributional parameters.","code":""},{"path":"/reference/dist-normRobMoments.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Robust Moments for the NORM — normRobMoments","text":"Diethelm Wuertz.","code":""},{"path":"/reference/dist-normRobMoments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Robust Moments for the NORM — normRobMoments","text":"","code":"## normMED -    # Median:    normMED(mean = 0, sd = 1) #> MED  #>   0   ## normIQR -    # Inter-quartile Range:    normIQR(mean = 0, sd = 1) #>     IQR  #> 1.34898   ## normSKEW -    # Robust Skewness:    normSKEW(mean = 0, sd = 1) #> SKEW  #>    0   ## normKURT -    # Robust Kurtosis:    normKURT(mean = 0, sd = 1) #>     KURT  #> 1.233095"},{"path":"/reference/dist-sgh.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardized Generalized Hyperbolic Distribution — sgh","title":"Standardized Generalized Hyperbolic Distribution — sgh","text":"Density, distribution function, quantile function      random generation standardized generalized     hyperbolic distribution.","code":""},{"path":"/reference/dist-sgh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardized Generalized Hyperbolic Distribution — sgh","text":"","code":"dsgh(x, zeta = 1, rho = 0, lambda = 1, log = FALSE) psgh(q, zeta = 1, rho = 0, lambda = 1) qsgh(p, zeta = 1, rho = 0, lambda = 1) rsgh(n, zeta = 1, rho = 0, lambda = 1)"},{"path":"/reference/dist-sgh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardized Generalized Hyperbolic Distribution — sgh","text":"zeta, rho, lambda shape parameter zeta positive,         skewness parameter rho range (-1, 1). log logical flag default FALSE.          TRUE, log values returned. n number observations. p numeric vector probabilities. x, q numeric vector quantiles.","code":""},{"path":"/reference/dist-sgh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardized Generalized Hyperbolic Distribution — sgh","text":"values *sgh functions numeric vectors:  d* returns density, p* returns distribution function, q* returns quantile function, r* generates random deviates.     values attributes named \"param\" listing     values distributional parameters.","code":""},{"path":"/reference/dist-sgh.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standardized Generalized Hyperbolic Distribution — sgh","text":"generator rsgh based GH algorithm given      Scott (2004).","code":""},{"path":"/reference/dist-sgh.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Standardized Generalized Hyperbolic Distribution — sgh","text":"Diethelm Wuertz.","code":""},{"path":"/reference/dist-sgh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardized Generalized Hyperbolic Distribution — sgh","text":"","code":"## rsgh -    set.seed(1953)    r = rsgh(5000, zeta = 1, rho = 0.5, lambda = 1)    plot(r, type = \"l\", col = \"steelblue\",      main = \"gh: zeta=1 rho=0.5 lambda=1\")    ## dsgh -     # Plot empirical density and compare with true density:    hist(r, n = 50, probability = TRUE, border = \"white\", col = \"steelblue\",      ylim = c(0, 0.6))    x = seq(-5, 5, length = 501)    lines(x, dsgh(x, zeta = 1, rho = 0.5, lambda = 1))    ## psgh -      # Plot df and compare with true df:    plot(sort(r), (1:5000/5000), main = \"Probability\", col = \"steelblue\")    lines(x, psgh(x, zeta = 1, rho = 0.5, lambda = 1))      ## qsgh -    # Compute Quantiles:    round(qsgh(psgh(seq(-5, 5, 1), zeta = 1, rho = 0.5), zeta = 1, rho = 0.5), 4) #>  [1] -5 -4 -3 -2 -1  0  1  2  3  4  5"},{"path":"/reference/dist-sghFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardized GH Distribution Fit — sghFit","title":"Standardized GH Distribution Fit — sghFit","text":"Estimates distrinbutional parameters      standardized generalized hyperbolic distribution.","code":""},{"path":"/reference/dist-sghFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardized GH Distribution Fit — sghFit","text":"","code":"sghFit(x, zeta = 1, rho = 0, lambda = 1, include.lambda = TRUE,     scale = TRUE, doplot = TRUE, span = \"auto\", trace = TRUE,      title = NULL, description = NULL, ...)"},{"path":"/reference/dist-sghFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardized GH Distribution Fit — sghFit","text":"x numeric vector. zeta, rho, lambda shape parameter zeta positive,         skewness parameter rho range (-1, 1).         index parameter lambda, default 1. include.lambda logical flag, default TRUE. index         parameter lambda included parameter estimate? scale logical flag, default TRUE. time series         scaled standard deviation achieve stable         optimization? doplot logical flag. plot displayed? span x-coordinates plot, default 100 values          automatically selected ranging 0.001,          0.999 quantiles. Alternatively, can specify         range expression like span=seq(min, max,         times = n), , min max          left right endpoints range, n gives          number intermediate points. trace logical flag. parameter estimation process         traced? title character string allows project title. description character string allows brief description. ... parameters parsed.","code":""},{"path":"/reference/dist-sghFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardized GH Distribution Fit — sghFit","text":"returns list following components: estimate point maximum value log liklihood          function obtained. minimum value estimated maximum, .e. value         log liklihood function. code integer indicating optimization process terminated.         1: relative gradient close zero, current iterate probably              solution;          2: successive iterates within tolerance, current iterate probably              solution;          3: last global step failed locate point lower estimate.              Either estimate approximate local minimum              function steptol small;          4: iteration limit exceeded;          5: maximum step size stepmax exceeded five consecutive times.              Either function unbounded , becomes asymptotic              finite value direction stepmax              small. gradient gradient estimated maximum. steps number function calls.","code":""},{"path":"/reference/dist-sghFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardized GH Distribution Fit — sghFit","text":"","code":"## sghFit -    # Simulate Random Variates:    set.seed(1953)    s = rsgh(n = 2000, zeta = 0.7, rho = 0.5, lambda = 0)   ## sghFit -      # Fit Parameters:    sghFit(s, zeta = 1, rho = 0, lambda = 1, include.lambda = TRUE,       doplot = TRUE)  #>  #>  Objective Function Value:   -2647.471 #>  Parameter Estimates:        1 0 1  #>  #>  Objective Function Value:   -2647.471 #>  Parameter Estimates:        1 0 1  #>  #>  Objective Function Value:   -2647.471 #>  Parameter Estimates:        1 1.490116e-08 1  #>  #>  Objective Function Value:   -2647.471 #>  Parameter Estimates:        1 0 1  #>  #>  Objective Function Value:   -Inf #>  Parameter Estimates:        0.96663 0.9989405 0.9683076  #>  #>  Objective Function Value:   -2594.623 #>  Parameter Estimates:        0.996663 0.09989405 0.9968308  #>  #>  Objective Function Value:   -2594.624 #>  Parameter Estimates:        0.996711 0.09989405 0.9968308  #>  #>  Objective Function Value:   -2594.645 #>  Parameter Estimates:        0.996663 0.09984604 0.9968308  #>  #>  Objective Function Value:   -2594.623 #>  Parameter Estimates:        0.996663 0.09989405 0.9968788  #>  #>  Objective Function Value:   -2524.793 #>  Parameter Estimates:        0.982503 0.2992784 0.9900936  #>  #>  Objective Function Value:   -2524.793 #>  Parameter Estimates:        0.9825144 0.2992784 0.9900936  #>  #>  Objective Function Value:   -2524.793 #>  Parameter Estimates:        0.982503 0.299277 0.9900936  #>  #>  Objective Function Value:   -2524.793 #>  Parameter Estimates:        0.982503 0.2992784 0.9901305  #>  #>  Objective Function Value:   -2505.046 #>  Parameter Estimates:        0.9247665 0.4890543 0.9645671  #>  #>  Objective Function Value:   -2505.046 #>  Parameter Estimates:        0.9247909 0.4890543 0.9645671  #>  #>  Objective Function Value:   -2505.046 #>  Parameter Estimates:        0.9247665 0.4890529 0.9645671  #>  #>  Objective Function Value:   -2505.047 #>  Parameter Estimates:        0.9247665 0.4890543 0.9646077  #>  #>  Objective Function Value:   -2495.774 #>  Parameter Estimates:        0.7983562 0.4267042 0.8226766  #>  #>  Objective Function Value:   -2482.511 #>  Parameter Estimates:        0.597971 0.4268163 0.6049115  #>  #>  Objective Function Value:   -15525.21 #>  Parameter Estimates:        1.490116e-08 0.3999997 -0.6322011  #>  #>  Objective Function Value:   -2482.512 #>  Parameter Estimates:        0.597989 0.4268163 0.6049115  #>  #>  Objective Function Value:   -2482.511 #>  Parameter Estimates:        0.597971 0.4268176 0.6049115  #>  #>  Objective Function Value:   -2482.512 #>  Parameter Estimates:        0.597971 0.4268163 0.6049334  #>  #>  Objective Function Value:   -9543.319 #>  Parameter Estimates:        1.490116e-08 0.6196524 -0.8337277  #>  #>  Objective Function Value:   -2484.203 #>  Parameter Estimates:        0.4815999 0.5095759 0.5396964  #>  #>  Objective Function Value:   -2481.034 #>  Parameter Estimates:        0.5545759 0.4654131 0.5768911  #>  #>  Objective Function Value:   -2481.035 #>  Parameter Estimates:        0.5545936 0.4654131 0.5768911  #>  #>  Objective Function Value:   -2481.034 #>  Parameter Estimates:        0.5545759 0.4654116 0.5768911  #>  #>  Objective Function Value:   -2481.035 #>  Parameter Estimates:        0.5545759 0.4654131 0.5769016  #>  #>  Objective Function Value:   -2479.327 #>  Parameter Estimates:        0.5153132 0.4196073 0.5541257  #>  #>  Objective Function Value:   -2479.327 #>  Parameter Estimates:        0.5153203 0.4196073 0.5541257  #>  #>  Objective Function Value:   -2479.327 #>  Parameter Estimates:        0.5153132 0.4196084 0.5541257  #>  #>  Objective Function Value:   -2479.327 #>  Parameter Estimates:        0.5153132 0.4196073 0.5541456  #>  #>  Objective Function Value:   -2478.091 #>  Parameter Estimates:        0.4611318 0.4505896 0.5379252  #>  #>  Objective Function Value:   -2478.091 #>  Parameter Estimates:        0.4611515 0.4505896 0.5379252  #>  #>  Objective Function Value:   -2478.091 #>  Parameter Estimates:        0.4611318 0.4505885 0.5379252  #>  #>  Objective Function Value:   -2478.091 #>  Parameter Estimates:        0.4611318 0.4505896 0.5379346  #>  #>  Objective Function Value:   -2477.59 #>  Parameter Estimates:        0.4127338 0.4131126 0.5176498  #>  #>  Objective Function Value:   -2477.59 #>  Parameter Estimates:        0.4127389 0.4131126 0.5176498  #>  #>  Objective Function Value:   -2477.59 #>  Parameter Estimates:        0.4127338 0.4131137 0.5176498  #>  #>  Objective Function Value:   -2477.59 #>  Parameter Estimates:        0.4127338 0.4131126 0.5176733  #>  #>  Objective Function Value:   -2477.025 #>  Parameter Estimates:        0.4277878 0.442396 0.4622075  #>  #>  Objective Function Value:   -2477.025 #>  Parameter Estimates:        0.4277998 0.442396 0.4622075  #>  #>  Objective Function Value:   -2477.025 #>  Parameter Estimates:        0.4277878 0.4423948 0.4622075  #>  #>  Objective Function Value:   -2477.025 #>  Parameter Estimates:        0.4277878 0.442396 0.4622141  #>  #>  Objective Function Value:   -2476.739 #>  Parameter Estimates:        0.4701277 0.4433887 0.4135831  #>  #>  Objective Function Value:   -2476.739 #>  Parameter Estimates:        0.4701216 0.4433887 0.4135831  #>  #>  Objective Function Value:   -2476.739 #>  Parameter Estimates:        0.4701277 0.4433897 0.4135831  #>  #>  Objective Function Value:   -2476.739 #>  Parameter Estimates:        0.4701277 0.4433887 0.4135964  #>  #>  Objective Function Value:   -2476.498 #>  Parameter Estimates:        0.4847758 0.4542832 0.3517387  #>  #>  Objective Function Value:   -2476.198 #>  Parameter Estimates:        0.5257791 0.4629315 0.2724894  #>  #>  Objective Function Value:   -2475.785 #>  Parameter Estimates:        0.653231 0.4952472 0.002810895  #>  #>  Objective Function Value:   -2475.785 #>  Parameter Estimates:        0.6532343 0.4952472 0.002810895  #>  #>  Objective Function Value:   -2475.785 #>  Parameter Estimates:        0.653231 0.4952458 0.002810895  #>  #>  Objective Function Value:   -2475.785 #>  Parameter Estimates:        0.653231 0.4952472 0.002824296  #>  #>  Objective Function Value:   -2478.242 #>  Parameter Estimates:        0.5426666 0.4600118 -0.06066683  #>  #>  Objective Function Value:   -2475.663 #>  Parameter Estimates:        0.643166 0.5029834 -0.0009042204  #>  #>  Objective Function Value:   -2475.663 #>  Parameter Estimates:        0.6431691 0.5029834 -0.0009042204  #>  #>  Objective Function Value:   -2475.663 #>  Parameter Estimates:        0.643166 0.5029821 -0.0009042204  #>  #>  Objective Function Value:   -2475.663 #>  Parameter Estimates:        0.643166 0.5029834 -0.0008909896  #>  #>  Objective Function Value:   -2475.617 #>  Parameter Estimates:        0.6322487 0.499426 -0.007470145  #>  #>  Objective Function Value:   -2475.617 #>  Parameter Estimates:        0.6322531 0.499426 -0.007470145  #>  #>  Objective Function Value:   -2475.617 #>  Parameter Estimates:        0.6322487 0.4994271 -0.007470145  #>  #>  Objective Function Value:   -2475.617 #>  Parameter Estimates:        0.6322487 0.499426 -0.007458788  #>  #>  Objective Function Value:   -2475.595 #>  Parameter Estimates:        0.6330868 0.504108 -0.01981237  #>  #>  Objective Function Value:   -2475.595 #>  Parameter Estimates:        0.6330902 0.504108 -0.01981237  #>  #>  Objective Function Value:   -2475.595 #>  Parameter Estimates:        0.6330868 0.5041067 -0.01981237  #>  #>  Objective Function Value:   -2475.595 #>  Parameter Estimates:        0.6330868 0.504108 -0.01980588  #>  #>  Objective Function Value:   -2475.58 #>  Parameter Estimates:        0.6356601 0.5048185 -0.0327672  #>  #>  Objective Function Value:   -2475.55 #>  Parameter Estimates:        0.646408 0.5111406 -0.07053079  #>  #>  Objective Function Value:   -2475.519 #>  Parameter Estimates:        0.6633964 0.5201092 -0.1352114  #>  #>  Objective Function Value:   -2475.519 #>  Parameter Estimates:        0.6633994 0.5201092 -0.1352114  #>  #>  Objective Function Value:   -2475.519 #>  Parameter Estimates:        0.6633964 0.5201103 -0.1352114  #>  #>  Objective Function Value:   -2475.519 #>  Parameter Estimates:        0.6633964 0.5201092 -0.135205  #>  #>  Objective Function Value:   -2475.512 #>  Parameter Estimates:        0.6689892 0.5250714 -0.1705164  #>  #>  Objective Function Value:   -2475.512 #>  Parameter Estimates:        0.6689923 0.5250714 -0.1705164  #>  #>  Objective Function Value:   -2475.512 #>  Parameter Estimates:        0.6689892 0.525073 -0.1705164  #>  #>  Objective Function Value:   -2475.512 #>  Parameter Estimates:        0.6689892 0.5250698 -0.1705164  #>  #>  Objective Function Value:   -2475.512 #>  Parameter Estimates:        0.6689892 0.5250714 -0.1705097  #>  #>  Objective Function Value:   -2475.512 #>  Parameter Estimates:        0.6699214 0.526159 -0.1761969  #>  #>  Objective Function Value:   -2475.512 #>  Parameter Estimates:        0.6699248 0.526159 -0.1761969  #>  #>  Objective Function Value:   -2475.512 #>  Parameter Estimates:        0.6699181 0.526159 -0.1761969  #>  #>  Objective Function Value:   -2475.512 #>  Parameter Estimates:        0.6699214 0.52616 -0.1761969  #>  #>  Objective Function Value:   -2475.512 #>  Parameter Estimates:        0.6699214 0.5261579 -0.1761969  #>  #>  Objective Function Value:   -2475.512 #>  Parameter Estimates:        0.6699214 0.526159 -0.1760504  #>  #>  Objective Function Value:   -2475.512 #>  Parameter Estimates:        0.6699214 0.526159 -0.1763434  #>  #>  Objective Function Value:   -2475.512 #>  Parameter Estimates:        0.6700251 0.5262555 -0.176701  #>  #>  Objective Function Value:   -2475.512 #>  Parameter Estimates:        0.6700655 0.5262555 -0.176701  #>  #>  Objective Function Value:   -2475.512 #>  Parameter Estimates:        0.6699847 0.5262555 -0.176701  #>  #>  Objective Function Value:   -2475.512 #>  Parameter Estimates:        0.6700251 0.5262668 -0.176701  #>  #>  Objective Function Value:   -2475.512 #>  Parameter Estimates:        0.6700251 0.5262443 -0.176701  #>  #>  Objective Function Value:   -2475.512 #>  Parameter Estimates:        0.6700251 0.5262555 -0.1765642  #>  #>  Objective Function Value:   -2475.512 #>  Parameter Estimates:        0.6700251 0.5262555 -0.1768378  #>  #>  Objective Function Value:   -2475.512 #>  Parameter Estimates:        0.6700175 0.526254 -0.176692  #>  #>  Objective Function Value:   -2475.512 #>  Parameter Estimates:        0.6700861 0.526254 -0.176692  #>  #>  Objective Function Value:   -2475.512 #>  Parameter Estimates:        0.669949 0.526254 -0.176692  #>  #>  Objective Function Value:   -2475.512 #>  Parameter Estimates:        0.6700175 0.5262782 -0.176692  #>  #>  Objective Function Value:   -2475.512 #>  Parameter Estimates:        0.6700175 0.5262298 -0.176692  #>  #>  Objective Function Value:   -2475.512 #>  Parameter Estimates:        0.6700175 0.526254 -0.1765471  #>  #>  Objective Function Value:   -2475.512 #>  Parameter Estimates:        0.6700175 0.526254 -0.1768369  #>  #>  Objective Function Value:   -2475.512 #>  Parameter Estimates:        0.6700175 0.526254 -0.176692  #>  #>  Standardized Parameters:  #>        zeta        rho     lambda  #>  0.6700175  0.5262540 -0.1766920  #>  #>  1st Parameterization:  #>       alpha       beta      delta         mu  #>  1.3633157  0.7174504  0.5779677 -0.4887948   #>  #> Title: #>  SGH Parameter Estimation  #>  #> Call: #>  sghFit(x = s, zeta = 1, rho = 0, lambda = 1, include.lambda = TRUE,  #>     doplot = TRUE) #>  #> Model: #>  Standarized GH Distribution #>  #> Estimated Parameter(s): #>       zeta        rho     lambda  #>  0.6700175  0.5262540 -0.1766920  #>  #> Description: #>  Mon Aug  8 08:09:40 2022 by user: georgi  #>"},{"path":"/reference/dist-sght.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardized generalized hyperbolic Student-t Distribution — sght","title":"Standardized generalized hyperbolic Student-t Distribution — sght","text":"Density, distribution function, quantile function   random generation standardized generalized   hyperbolic distribution.","code":""},{"path":"/reference/dist-sght.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardized generalized hyperbolic Student-t Distribution — sght","text":"","code":"dsght(x, beta = 0.1, delta = 1, mu = 0, nu = 10, log = FALSE) psght(q, beta = 0.1, delta = 1, mu = 0, nu = 10) qsght(p, beta = 0.1, delta = 1, mu = 0, nu = 10) rsght(n, beta = 0.1, delta = 1, mu = 0, nu = 10)"},{"path":"/reference/dist-sght.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardized generalized hyperbolic Student-t Distribution — sght","text":"beta, delta, mu numeric values.     beta skewness parameter range (0, alpha);     delta scale parameter, must zero positive;     mu location parameter, default 0.     parameters first parameterization. nu numeric value, number degrees freedom.     Note, alpha takes limit abs(beta),     lambda=-nu/2. x, q numeric vector quantiles. p numeric vector probabilities. n number observations. log logical, TRUE, probabilities p given     log(p).","code":""},{"path":"/reference/dist-sght.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardized generalized hyperbolic Student-t Distribution — sght","text":"values *sght functions numeric vectors: d* returns density, p* returns distribution function, q* returns quantile function, r* generates random deviates.   values attributes named \"param\" listing   values distributional parameters.","code":""},{"path":"/reference/dist-sght.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Standardized generalized hyperbolic Student-t Distribution — sght","text":"Diethelm Wuertz.","code":""},{"path":"/reference/dist-sght.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardized generalized hyperbolic Student-t Distribution — sght","text":"","code":"## rsght -    set.seed(1953)    r = rsght(5000, beta = 0.1, delta = 1, mu = 0, nu = 10)    plot(r, type = \"l\", col = \"steelblue\",      main = \"gh: zeta=1 rho=0.5 lambda=1\")   ## dsght -    # Plot empirical density and compare with true density:    hist(r, n = 50, probability = TRUE, border = \"white\", col = \"steelblue\")    x = seq(-5, 5, length = 501)    lines(x, dsght(x, beta = 0.1, delta = 1, mu = 0, nu = 10))   ## psght -    # Plot df and compare with true df:    plot(sort(r), (1:5000/5000), main = \"Probability\", col = \"steelblue\")    lines(x, psght(x, beta = 0.1, delta = 1, mu = 0, nu = 10))   ## qsght -    # Compute Quantiles:    round(qsght(psght(seq(-5, 5, 1), beta = 0.1, delta = 1, mu = 0, nu =10),                beta = 0.1, delta = 1, mu = 0, nu = 10), 4) #>  [1] -5 -4 -3 -2 -1  0  1  2  3  4  5"},{"path":"/reference/dist-snig.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardized Normal Inverse Gaussian Distribution — snig","title":"Standardized Normal Inverse Gaussian Distribution — snig","text":"Density, distribution function, quantile function      random generation standardized normal      inverse Gaussian distribution.","code":""},{"path":"/reference/dist-snig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardized Normal Inverse Gaussian Distribution — snig","text":"","code":"dsnig(x, zeta = 1, rho = 0, log = FALSE) psnig(q, zeta = 1, rho = 0) qsnig(p, zeta = 1, rho = 0) rsnig(n, zeta = 1, rho = 0)"},{"path":"/reference/dist-snig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardized Normal Inverse Gaussian Distribution — snig","text":"zeta, rho shape parameter zeta positive,         skewness parameter rho range (-1, 1). log logical flag default FALSE.          TRUE, log values returned. n number observations. p numeric vector probabilities. x, q numeric vector quantiles.","code":""},{"path":"/reference/dist-snig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardized Normal Inverse Gaussian Distribution — snig","text":"values *snig functions numeric vectors:  d* returns density, p* returns distribution function, q* returns quantile function, r* generates random deviates.     values attributes named \"param\" listing     values distributional parameters.","code":""},{"path":"/reference/dist-snig.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standardized Normal Inverse Gaussian Distribution — snig","text":"random deviates calculated method described      Raible (2000).","code":""},{"path":"/reference/dist-snig.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Standardized Normal Inverse Gaussian Distribution — snig","text":"Diethelm Wuertz.","code":""},{"path":"/reference/dist-snig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardized Normal Inverse Gaussian Distribution — snig","text":"","code":"## snig -    set.seed(1953)    r = rsnig(5000, zeta = 1, rho = 0.5)    plot(r, type = \"l\", col = \"steelblue\",      main = \"snig: zeta=1 rho=0.5\")    ## snig -     # Plot empirical density and compare with true density:    hist(r, n = 50, probability = TRUE, border = \"white\", col = \"steelblue\")    x = seq(-5, 5, length = 501)    lines(x, dsnig(x, zeta = 1, rho = 0.5))    ## snig -      # Plot df and compare with true df:    plot(sort(r), (1:5000/5000), main = \"Probability\", col = \"steelblue\")    lines(x, psnig(x, zeta = 1, rho = 0.5))      ## snig -    # Compute Quantiles:    qsnig(psnig(seq(-5, 5, 1), zeta = 1, rho = 0.5), zeta = 1, rho = 0.5)  #>  [1] -5.000000e+00 -3.999999e+00 -2.999983e+00 -2.000011e+00 -1.000000e+00 #>  [6] -2.609555e-07  1.000004e+00  2.000016e+00  3.000001e+00  4.000000e+00 #> [11]  5.000029e+00"},{"path":"/reference/dist-snigFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit of a Standardized NIG Distribution — snigFit","title":"Fit of a Standardized NIG Distribution — snigFit","text":"Estimates parameters  standardized normal inverse      Gaussian distribution.","code":""},{"path":"/reference/dist-snigFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit of a Standardized NIG Distribution — snigFit","text":"","code":"snigFit(x, zeta = 1, rho = 0, scale = TRUE, doplot = TRUE,      span = \"auto\", trace = TRUE, title = NULL, description = NULL, ...)"},{"path":"/reference/dist-snigFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit of a Standardized NIG Distribution — snigFit","text":"zeta, rho shape parameter zeta positive,         skewness parameter rho range (-1, 1). description character string allows brief description. doplot logical flag. plot displayed? scale logical flag, default TRUE. time series         scaled standard deviation achieve stable         optimization? span x-coordinates plot, default 100 values          automatically selected ranging 0.001,          0.999 quantiles. Alternatively, can specify         range expression like span=seq(min, max,         times = n), , min max          left right endpoints range, n gives          number intermediate points. title character string allows project title. trace logical flag. parameter estimation process         traced? x numeric vector. ... parameters parsed.","code":""},{"path":"/reference/dist-snigFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit of a Standardized NIG Distribution — snigFit","text":"function snigFit returns list following      components: estimate point maximum value log liklihood          function obtained. minimum value estimated maximum, .e. value         log liklihood function. code integer indicating optimization process terminated.         1: relative gradient close zero, current iterate probably              solution;          2: successive iterates within tolerance, current iterate probably              solution;          3: last global step failed locate point lower estimate.              Either estimate approximate local minimum              function steptol small;          4: iteration limit exceeded;          5: maximum step size stepmax exceeded five consecutive times.              Either function unbounded , becomes asymptotic              finite value direction stepmax              small. gradient gradient estimated maximum. steps number function calls.","code":""},{"path":"/reference/dist-snigFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit of a Standardized NIG Distribution — snigFit","text":"","code":"## snigFit -    # Simulate Random Variates:    set.seed(1953)    s = rsnig(n = 2000, zeta = 0.7, rho = 0.5)   ## snigFit -      # Fit Parameters:    snigFit(s, zeta = 1, rho = 0, doplot = TRUE)  #>  #>  Objective Function Value:   -2637.572 #>  Parameter Estimates:        1 0  #>  #>  Objective Function Value:   -2637.572 #>  Parameter Estimates:        1 0  #>  #>  Objective Function Value:   -2637.572 #>  Parameter Estimates:        1 1.490116e-08  #>  #>  Objective Function Value:   -28782.33 #>  Parameter Estimates:        0.919416 0.9967478  #>  #>  Objective Function Value:   -2606.898 #>  Parameter Estimates:        0.9919416 0.09967478  #>  #>  Objective Function Value:   -2606.899 #>  Parameter Estimates:        0.9919897 0.09967478  #>  #>  Objective Function Value:   -2606.911 #>  Parameter Estimates:        0.9919416 0.09962666  #>  #>  Objective Function Value:   -2562.092 #>  Parameter Estimates:        0.9704989 0.298522  #>  #>  Objective Function Value:   -2550.865 #>  Parameter Estimates:        0.8431218 0.5874547  #>  #>  Objective Function Value:   -2550.865 #>  Parameter Estimates:        0.8431528 0.5874547  #>  #>  Objective Function Value:   -2550.865 #>  Parameter Estimates:        0.8431218 0.5874527  #>  #>  Objective Function Value:   -2563.069 #>  Parameter Estimates:        0.3791223 0.3758393  #>  #>  Objective Function Value:   -2546.375 #>  Parameter Estimates:        0.8371896 0.3893593  #>  #>  Objective Function Value:   -2546.375 #>  Parameter Estimates:        0.8372148 0.3893593  #>  #>  Objective Function Value:   -2546.375 #>  Parameter Estimates:        0.8371896 0.3893608  #>  #>  Objective Function Value:   -2540.91 #>  Parameter Estimates:        0.6467078 0.4440735  #>  #>  Objective Function Value:   -2540.91 #>  Parameter Estimates:        0.6467264 0.4440735  #>  #>  Objective Function Value:   -2540.91 #>  Parameter Estimates:        0.6467078 0.4440722  #>  #>  Objective Function Value:   -2549.238 #>  Parameter Estimates:        0.7913513 0.5795549  #>  #>  Objective Function Value:   -2540.581 #>  Parameter Estimates:        0.6574147 0.4800493  #>  #>  Objective Function Value:   -2540.581 #>  Parameter Estimates:        0.65741 0.4800493  #>  #>  Objective Function Value:   -2540.581 #>  Parameter Estimates:        0.6574147 0.4800471  #>  #>  Objective Function Value:   -2540.35 #>  Parameter Estimates:        0.6917205 0.4648174  #>  #>  Objective Function Value:   -2540.35 #>  Parameter Estimates:        0.6917027 0.4648174  #>  #>  Objective Function Value:   -2540.35 #>  Parameter Estimates:        0.6917205 0.4648187  #>  #>  Objective Function Value:   -2540.447 #>  Parameter Estimates:        0.7256555 0.4808584  #>  #>  Objective Function Value:   -2540.336 #>  Parameter Estimates:        0.6964065 0.4743132  #>  #>  Objective Function Value:   -2540.336 #>  Parameter Estimates:        0.6964023 0.4743132  #>  #>  Objective Function Value:   -2540.336 #>  Parameter Estimates:        0.6964065 0.4743115  #>  #>  Objective Function Value:   -2540.336 #>  Parameter Estimates:        0.7054868 0.4706739  #>  #>  Objective Function Value:   -2540.336 #>  Parameter Estimates:        0.7054778 0.4706739  #>  #>  Objective Function Value:   -2540.336 #>  Parameter Estimates:        0.7054868 0.4706753  #>  #>  Objective Function Value:   -2540.33 #>  Parameter Estimates:        0.7006596 0.4714624  #>  #>  Objective Function Value:   -2540.33 #>  Parameter Estimates:        0.7006637 0.4714624  #>  #>  Objective Function Value:   -2540.33 #>  Parameter Estimates:        0.7006596 0.4714609  #>  #>  Objective Function Value:   -2540.331 #>  Parameter Estimates:        0.6965967 0.468739  #>  #>  Objective Function Value:   -2540.329 #>  Parameter Estimates:        0.6988812 0.4702704  #>  #>  Objective Function Value:   -2540.329 #>  Parameter Estimates:        0.6988849 0.4702704  #>  #>  Objective Function Value:   -2540.329 #>  Parameter Estimates:        0.6988812 0.4702714  #>  #>  Objective Function Value:   -2540.329 #>  Parameter Estimates:        0.6988812 0.4702693  #>  #>  Objective Function Value:   -2540.328 #>  Parameter Estimates:        0.6967674 0.4706101  #>  #>  Objective Function Value:   -2540.328 #>  Parameter Estimates:        0.6967709 0.4706101  #>  #>  Objective Function Value:   -2540.328 #>  Parameter Estimates:        0.6967674 0.4706107  #>  #>  Objective Function Value:   -2540.328 #>  Parameter Estimates:        0.6967674 0.4706094  #>  #>  Objective Function Value:   -2540.328 #>  Parameter Estimates:        0.6961356 0.4707189  #>  #>  Objective Function Value:   -2540.328 #>  Parameter Estimates:        0.6961399 0.4707189  #>  #>  Objective Function Value:   -2540.328 #>  Parameter Estimates:        0.6961314 0.4707189  #>  #>  Objective Function Value:   -2540.328 #>  Parameter Estimates:        0.6961356 0.4707217  #>  #>  Objective Function Value:   -2540.328 #>  Parameter Estimates:        0.6961356 0.4707162  #>  #>  Objective Function Value:   -2540.328 #>  Parameter Estimates:        0.6961428 0.470719  #>  #>  Objective Function Value:   -2540.328 #>  Parameter Estimates:        0.6962123 0.470719  #>  #>  Objective Function Value:   -2540.328 #>  Parameter Estimates:        0.6960733 0.470719  #>  #>  Objective Function Value:   -2540.328 #>  Parameter Estimates:        0.6961428 0.4707481  #>  #>  Objective Function Value:   -2540.328 #>  Parameter Estimates:        0.6961428 0.47069  #>  #>  Objective Function Value:   -2540.328 #>  Parameter Estimates:        0.6961428 0.470719  #>  #>  Standardized Parameters:  #>        zeta        rho fix.lambda  #>  0.6961428  0.4707190 -0.5000000  #>  #>  1st Parameterization:  #>       alpha       beta      delta         mu  #>  1.0718480  0.5045392  0.7361345 -0.3927452   #>  #> Title: #>  SNIG Parameter Estimation  #>  #> Call: #>  snigFit(x = s, zeta = 1, rho = 0, doplot = TRUE) #>  #> Model: #>  Standarized NIG Distribution #>  #> Estimated Parameter(s): #>       zeta        rho fix.lambda  #>  0.6961428  0.4707190 -0.5000000  #>  #> Description: #>  Mon Aug  8 08:09:41 2022 by user: georgi  #>"},{"path":"/reference/dist-ssd.html","id":null,"dir":"Reference","previous_headings":"","what":"Spline Smoothed Distribution — ssd","title":"Spline Smoothed Distribution — ssd","text":"Density, distribution function, quantile function      random generation smoothing spline estimates.","code":""},{"path":"/reference/dist-ssd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spline Smoothed Distribution — ssd","text":"","code":"dssd(x, param, log = FALSE) pssd(q, param) qssd(p, param) rssd(n, param)"},{"path":"/reference/dist-ssd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spline Smoothed Distribution — ssd","text":"param object returned function ssdFit.. log logical flag default FALSE.          labels main title drawn plot? n number observations. p numeric vector probabilities. x, q numeric vector quantiles.","code":""},{"path":"/reference/dist-ssd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spline Smoothed Distribution — ssd","text":"values *ssd functions numeric vectors:  d* returns density, p* returns distribution function, q* returns quantile function, r* generates random deviates.     values attributes named \"param\" listing     values distributional parameters.","code":""},{"path":"/reference/dist-ssd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Spline Smoothed Distribution — ssd","text":"Diethelm Wuertz, Chong Gu underlying gss package.","code":""},{"path":"/reference/dist-ssd.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Spline Smoothed Distribution — ssd","text":"Gu, C. (2002),      Smoothing Spline ANOVA Models,      New York Springer--Verlag. Gu, C. Wang, J. (2003),      Penalized likelihood density estimation:      Direct cross-validation scalable approximation,     Statistica Sinica, 13, 811--826.","code":""},{"path":"/reference/dist-ssd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spline Smoothed Distribution — ssd","text":"","code":"## ssdFit -    set.seed(1953)    r = rnorm(500)    hist(r, breaks = \"FD\", probability = TRUE,      col = \"steelblue\", border = \"white\")   ## ssdFit -     param = ssdFit(r)     ## dssd -      u = seq(min(r), max(r), len = 301)    v = dssd(u, param)    lines(u, v, col = \"orange\", lwd = 2)"},{"path":"/reference/dist-ssdFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Density Using Smoothing Splines — ssdFit","title":"Fit Density Using Smoothing Splines — ssdFit","text":"Estimates parameters density function     using smoothing splines.","code":""},{"path":"/reference/dist-ssdFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Density Using Smoothing Splines — ssdFit","text":"","code":"ssdFit(x)"},{"path":"/reference/dist-ssdFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Density Using Smoothing Splines — ssdFit","text":"x numeric vector.","code":""},{"path":"/reference/dist-ssdFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Density Using Smoothing Splines — ssdFit","text":"function ssdFit, hypFit returns object class ssden.     returned object can used evaluate density, probabilities     quantiles.","code":""},{"path":"/reference/dist-ssdFit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fit Density Using Smoothing Splines — ssdFit","text":"Diethelm Wuertz, Chong Gu underlying gss package.","code":""},{"path":"/reference/dist-ssdFit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit Density Using Smoothing Splines — ssdFit","text":"Gu, C. (2002),      Smoothing Spline ANOVA Models,      New York Springer--Verlag. Gu, C. Wang, J. (2003),      Penalized likelihood density estimation:      Direct cross-validation scalable approximation,     Statistica Sinica, 13, 811--826.","code":""},{"path":"/reference/dist-ssdFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit Density Using Smoothing Splines — ssdFit","text":"","code":"## ssdFit -    set.seed(1953)    r = rnorm(500)    hist(r, breaks = \"FD\", probability = TRUE,      col = \"steelblue\", border = \"white\")   ## ssdFit -     param = ssdFit(r)     ## dssd -      u = seq(min(r), max(r), len = 301)    v = dssd(u, param)    lines(u, v, col = \"orange\", lwd = 2)"},{"path":"/reference/fBasics-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated Functions in Package fBasics — fBasics-deprecated","title":"Deprecated Functions in Package fBasics — fBasics-deprecated","text":"functions provided compatibility older versions   package , may defunct soon next release. none currently.   dstable etc now defunct,   available stabledist since early 2011.","code":""},{"path":[]},{"path":"/reference/fBasics-reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — fBasics_reexports","title":"Objects exported from other packages — fBasics_reexports","text":"objects imported packages. Follow links   see documentation.  lagged .timeSeries kurtosis kurtosis skewness skewness","code":""},{"path":"/reference/matrix-colVec.html","id":null,"dir":"Reference","previous_headings":"","what":"Column and Row Vectors — colVec","title":"Column and Row Vectors — colVec","text":"Creates column row vector numeric     vector.","code":""},{"path":"/reference/matrix-colVec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Column and Row Vectors — colVec","text":"","code":"colVec(x) rowVec(x)"},{"path":"/reference/matrix-colVec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Column and Row Vectors — colVec","text":"x numeric vector.","code":""},{"path":"/reference/matrix-colVec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Column and Row Vectors — colVec","text":"functions colVec rowVec transform vector      column row vector, respectively. column vector matrix      object one column, row vector matrix object one      row.","code":""},{"path":"/reference/matrix-colVec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Column and Row Vectors — colVec","text":"","code":"## Create a numeric Vector:    x = rnorm(5)     ## Column and Row Vectors:    colVec(x) #>            [,1] #> [1,] -0.7303355 #> [2,]  0.3296128 #> [3,]  0.5553862 #> [4,]  0.4934692 #> [5,]  1.9424086    rowVec(x)                         #>            [,1]      [,2]      [,3]      [,4]     [,5] #> [1,] -0.7303355 0.3296128 0.5553862 0.4934692 1.942409"},{"path":"/reference/matrix-gridVector.html","id":null,"dir":"Reference","previous_headings":"","what":"Grid Vector Coordinates — gridVector","title":"Grid Vector Coordinates — gridVector","text":"Creates two vectors rectangular grid coordinates..","code":""},{"path":"/reference/matrix-gridVector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Grid Vector Coordinates — gridVector","text":"","code":"gridVector(x, y = NULL)"},{"path":"/reference/matrix-gridVector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Grid Vector Coordinates — gridVector","text":"x, y two numeric vectors length m n span          rectangular grid size m times n. y takes         default value, NULL, y=x.","code":""},{"path":"/reference/matrix-gridVector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Grid Vector Coordinates — gridVector","text":"returns list two entries named $X $Y,     giving coordinates span bivariate grid.","code":""},{"path":[]},{"path":"/reference/matrix-gridVector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Grid Vector Coordinates — gridVector","text":"","code":"## gridVector -    gridVector((0:10)/10)  #> $X #>   [1] 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 0.0 0.1 0.2 0.3 0.4 0.5 0.6 #>  [19] 0.7 0.8 0.9 1.0 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 0.0 0.1 0.2 #>  [37] 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 #>  [55] 1.0 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 0.0 0.1 0.2 0.3 0.4 0.5 #>  [73] 0.6 0.7 0.8 0.9 1.0 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 0.0 0.1 #>  [91] 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 #> [109] 0.9 1.0 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 #>  #> $Y #>   [1] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.1 0.1 0.1 0.1 0.1 0.1 0.1 #>  [19] 0.1 0.1 0.1 0.1 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.3 0.3 0.3 #>  [37] 0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 #>  [55] 0.4 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.6 0.6 0.6 0.6 0.6 0.6 #>  [73] 0.6 0.6 0.6 0.6 0.6 0.7 0.7 0.7 0.7 0.7 0.7 0.7 0.7 0.7 0.7 0.7 0.8 0.8 #>  [91] 0.8 0.8 0.8 0.8 0.8 0.8 0.8 0.8 0.8 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 #> [109] 0.9 0.9 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 #>     gridVector((0:10)/10, (0:10)/10) #> $X #>   [1] 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 0.0 0.1 0.2 0.3 0.4 0.5 0.6 #>  [19] 0.7 0.8 0.9 1.0 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 0.0 0.1 0.2 #>  [37] 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 #>  [55] 1.0 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 0.0 0.1 0.2 0.3 0.4 0.5 #>  [73] 0.6 0.7 0.8 0.9 1.0 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 0.0 0.1 #>  [91] 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 #> [109] 0.9 1.0 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 #>  #> $Y #>   [1] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.1 0.1 0.1 0.1 0.1 0.1 0.1 #>  [19] 0.1 0.1 0.1 0.1 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.3 0.3 0.3 #>  [37] 0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 #>  [55] 0.4 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.6 0.6 0.6 0.6 0.6 0.6 #>  [73] 0.6 0.6 0.6 0.6 0.6 0.7 0.7 0.7 0.7 0.7 0.7 0.7 0.7 0.7 0.7 0.7 0.8 0.8 #>  [91] 0.8 0.8 0.8 0.8 0.8 0.8 0.8 0.8 0.8 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 #> [109] 0.9 0.9 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 #>"},{"path":"/reference/matrix-hilbert.html","id":null,"dir":"Reference","previous_headings":"","what":"Hilbert Matrix — hilbert","title":"Hilbert Matrix — hilbert","text":"Creates Hilbert matrix.","code":""},{"path":"/reference/matrix-hilbert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hilbert Matrix — hilbert","text":"","code":"hilbert(n)"},{"path":"/reference/matrix-hilbert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hilbert Matrix — hilbert","text":"n integer value, dimension square matrix.","code":""},{"path":"/reference/matrix-hilbert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hilbert Matrix — hilbert","text":"hilbert generates Hilbert matrix order n.","code":""},{"path":"/reference/matrix-hilbert.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hilbert Matrix — hilbert","text":"linear algebra, Hilbert matrix matrix unit      fraction elements. Hilbert matrices canonical examples ill-conditioned      matrices, making notoriously difficult use numerical      computation. example, 2-norm condition number     5x5 Hilbert matrix 4.8e5. Hilbert matrix symmetric positive definite.","code":""},{"path":"/reference/matrix-hilbert.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Hilbert Matrix — hilbert","text":"Hilbert D.,      Collected papers, vol. II, article 21. Beckermann B, (2000);     condition number real Vandermonde, Krylov positive          definite Hankel matrices,      Numerische Mathematik 85, 553--577, 2000. Choi, M.D., (1983);     Tricks Treats Hilbert Matrix,     American Mathematical Monthly 90, 301--312, 1983. Todd, J., (1954);     Condition Number Finite Segment Hilbert Matrix,     National Bureau Standards, Applied Mathematics Series 39, 109--116. Wilf, H.S., (1970);     Finite Sections Classical Inequalities,      Heidelberg, Springer.","code":""},{"path":"/reference/matrix-hilbert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hilbert Matrix — hilbert","text":"","code":"## Create a Hilbert Matrix:    H = hilbert(5)    H                               #>           [,1]      [,2]      [,3]      [,4]      [,5] #> [1,] 1.0000000 0.5000000 0.3333333 0.2500000 0.2000000 #> [2,] 0.5000000 0.3333333 0.2500000 0.2000000 0.1666667 #> [3,] 0.3333333 0.2500000 0.2000000 0.1666667 0.1428571 #> [4,] 0.2500000 0.2000000 0.1666667 0.1428571 0.1250000 #> [5,] 0.2000000 0.1666667 0.1428571 0.1250000 0.1111111"},{"path":"/reference/matrix-inv.html","id":null,"dir":"Reference","previous_headings":"","what":"The Inverse of a Matrix — inv","title":"The Inverse of a Matrix — inv","text":"Returns inverse matrix.","code":""},{"path":"/reference/matrix-inv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Inverse of a Matrix — inv","text":"","code":"inv(x)"},{"path":"/reference/matrix-inv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Inverse of a Matrix — inv","text":"x numeric matrix.","code":""},{"path":"/reference/matrix-inv.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"The Inverse of a Matrix — inv","text":"function inv synonyme function solve.","code":""},{"path":"/reference/matrix-inv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Inverse of a Matrix — inv","text":"returns inverse matrix.","code":""},{"path":"/reference/matrix-inv.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Inverse of a Matrix — inv","text":"Golub, van Loan, (1996);     Matrix Computations,      3rd edition. Johns Hopkins University Press.","code":""},{"path":"/reference/matrix-inv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Inverse of a Matrix — inv","text":"","code":"## Create Pascal Matrix:    P = pascal(5)    P #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    1    1    1    1 #> [2,]    1    2    3    4    5 #> [3,]    1    3    6   10   15 #> [4,]    1    4   10   20   35 #> [5,]    1    5   15   35   70           ## Compute the Inverse Matrix:    inv(P) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    5  -10   10   -5    1 #> [2,]  -10   30  -35   19   -4 #> [3,]   10  -35   46  -27    6 #> [4,]   -5   19  -27   17   -4 #> [5,]    1   -4    6   -4    1     ## Check:    inv(P) %*% P     #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    0    0    0    0 #> [2,]    0    1    0    0    0 #> [3,]    0    0    1    0    0 #> [4,]    0    0    0    1    0 #> [5,]    0    0    0    0    1     ## Alternatives:    chol2inv(chol(P)) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    5  -10   10   -5    1 #> [2,]  -10   30  -35   19   -4 #> [3,]   10  -35   46  -27    6 #> [4,]   -5   19  -27   17   -4 #> [5,]    1   -4    6   -4    1    solve(P)                      #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    5  -10   10   -5    1 #> [2,]  -10   30  -35   19   -4 #> [3,]   10  -35   46  -27    6 #> [4,]   -5   19  -27   17   -4 #> [5,]    1   -4    6   -4    1"},{"path":"/reference/matrix-kron.html","id":null,"dir":"Reference","previous_headings":"","what":"Kronecker Product — kron","title":"Kronecker Product — kron","text":"Returns Kronecker product.","code":""},{"path":"/reference/matrix-kron.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kronecker Product — kron","text":"","code":"kron(x, y)"},{"path":"/reference/matrix-kron.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kronecker Product — kron","text":"x, y two numeric matrixes.","code":""},{"path":"/reference/matrix-kron.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Kronecker Product — kron","text":"Kronecker product can computed using operator      %x% alternatively using function kron     SPlus compatibility.","code":""},{"path":"/reference/matrix-kron.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Kronecker Product — kron","text":"kron synonyme %x%.","code":""},{"path":"/reference/matrix-kron.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Kronecker Product — kron","text":"Golub, van Loan, (1996);     Matrix Computations,      3rd edition. Johns Hopkins University Press.","code":""},{"path":"/reference/matrix-kron.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kronecker Product — kron","text":"","code":"## Create Pascal Matrix:    P = pascal(3)    P #>      [,1] [,2] [,3] #> [1,]    1    1    1 #> [2,]    1    2    3 #> [3,]    1    3    6     ## Return the Kronecker Product                         kron(P, diag(3)) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] #>  [1,]    1    0    0    1    0    0    1    0    0 #>  [2,]    0    1    0    0    1    0    0    1    0 #>  [3,]    0    0    1    0    0    1    0    0    1 #>  [4,]    1    0    0    2    0    0    3    0    0 #>  [5,]    0    1    0    0    2    0    0    3    0 #>  [6,]    0    0    1    0    0    2    0    0    3 #>  [7,]    1    0    0    3    0    0    6    0    0 #>  [8,]    0    1    0    0    3    0    0    6    0 #>  [9,]    0    0    1    0    0    3    0    0    6    P %x% diag(3)                         #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] #>  [1,]    1    0    0    1    0    0    1    0    0 #>  [2,]    0    1    0    0    1    0    0    1    0 #>  [3,]    0    0    1    0    0    1    0    0    1 #>  [4,]    1    0    0    2    0    0    3    0    0 #>  [5,]    0    1    0    0    2    0    0    3    0 #>  [6,]    0    0    1    0    0    2    0    0    3 #>  [7,]    1    0    0    3    0    0    6    0    0 #>  [8,]    0    1    0    0    3    0    0    6    0 #>  [9,]    0    0    1    0    0    3    0    0    6"},{"path":"/reference/matrix-norm.html","id":null,"dir":"Reference","previous_headings":"","what":"Matrix Norm — norm","title":"Matrix Norm — norm","text":"Returns norm matrix.","code":""},{"path":"/reference/matrix-norm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Matrix Norm — norm","text":"","code":"norm2(x, p = 2)"},{"path":"/reference/matrix-norm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Matrix Norm — norm","text":"x numeric matrix. p integer value, 1, 2 Inf.         p=1 - maximum absolute column sum norm defined          maximum sum absolute valued elements columns          matrix.         p=2 - spectral norm \"norm\" matrix X.          value computed square root maximum eigenvalue          CX C conjugate transpose.         p=Inf - maximum absolute row sum norm defined          maximum sum absolute valued elements         rows matrix.","code":""},{"path":"/reference/matrix-norm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Matrix Norm — norm","text":"returns value norm matrix.","code":""},{"path":"/reference/matrix-norm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Matrix Norm — norm","text":"function norm2 computes norm matrix. Three choices      possible: p=1 - maximum absolute column sum norm defined      maximum sum absolute valued elements columns      matrix. p=2 - spectral norm \"norm\" matrix X.      value computed square root maximum eigenvalue      CX C conjugate transpose. p=Inf - maximum absolute row sum norm defined      maximum sum absolute valued elements     rows matrix. Note, function fBasics::norm() become obsolete, since      base::norm() become available R base environment.     avoid conflicts norm() renamed fBasics     package norm2.","code":""},{"path":"/reference/matrix-norm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Matrix Norm — norm","text":"Golub, van Loan, (1996);     Matrix Computations,      3rd edition. Johns Hopkins University Press.","code":""},{"path":"/reference/matrix-norm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Matrix Norm — norm","text":"","code":"## Create Pascal Matrix:    P <- pascal(5)    P                   #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    1    1    1    1 #> [2,]    1    2    3    4    5 #> [3,]    1    3    6   10   15 #> [4,]    1    4   10   20   35 #> [5,]    1    5   15   35   70       ## Return the Norm of the Matrix:                          norm2(P)                                                        #> [1] 92.29043"},{"path":"/reference/matrix-pascal.html","id":null,"dir":"Reference","previous_headings":"","what":"Pascal Matrix — pascal","title":"Pascal Matrix — pascal","text":"Creates Pascal matrix.","code":""},{"path":"/reference/matrix-pascal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pascal Matrix — pascal","text":"","code":"pascal(n)"},{"path":"/reference/matrix-pascal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pascal Matrix — pascal","text":"n integer value, dimension square matrix.","code":""},{"path":"/reference/matrix-pascal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pascal Matrix — pascal","text":"function pascal generates Pascal matrix order n      symmetric, positive, definite matrix integer entries      made Pascal's triangle. determinant Pascal matrix 1.      inverse Pascal matrix integer entries. lambda      eigenvalue Pascal matrix, 1/lambda also      eigenvalue matrix. Pascal matrices ill-conditioned.","code":""},{"path":"/reference/matrix-pascal.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Pascal Matrix — pascal","text":"Call G.S., Velleman D.J., (1993);     Pascal's matrices,      American Mathematical Monthly 100, 372--376. Edelman ., Strang G., (2004);     Pascal Matrices,      American Mathematical Monthly 111, 361--385.","code":""},{"path":"/reference/matrix-pascal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pascal Matrix — pascal","text":"","code":"## Create Pascal Matrix:    P = pascal(5)    P  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    1    1    1    1 #> [2,]    1    2    3    4    5 #> [3,]    1    3    6   10   15 #> [4,]    1    4   10   20   35 #> [5,]    1    5   15   35   70     ## Determinant    det(pascal(5))  #> [1] 1    det(pascal(10))    #> [1] 1    det(pascal(15))    #> [1] 1.001116    det(pascal(20))                                        #> [1] 59.77116"},{"path":"/reference/matrix-pdl.html","id":null,"dir":"Reference","previous_headings":"","what":"Polynomial Distributed Lags — pdl","title":"Polynomial Distributed Lags — pdl","text":"Returns regressor matrix polynomial distributed      lags.","code":""},{"path":"/reference/matrix-pdl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Polynomial Distributed Lags — pdl","text":"","code":"pdl(x, d = 2, q = 3, trim = FALSE)"},{"path":"/reference/matrix-pdl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Polynomial Distributed Lags — pdl","text":"x numeric vector. d integer specifying order polynomial. q integer specifying number lags use          creating polynomial distributed lags. must          greater d. trim logical flag; TRUE, missing values          beginning returned matrix trimmed.","code":""},{"path":[]},{"path":"/reference/matrix-pdl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Polynomial Distributed Lags — pdl","text":"","code":"## pdl -    #"},{"path":"/reference/matrix-posDefinite.html","id":null,"dir":"Reference","previous_headings":"","what":"Positive Definite Matrixes — positiveDefinite","title":"Positive Definite Matrixes — positiveDefinite","text":"Checks matrix positive definite /    forces matrix positive definite.","code":""},{"path":"/reference/matrix-posDefinite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Positive Definite Matrixes — positiveDefinite","text":"","code":"isPositiveDefinite(x) makePositiveDefinite(x)"},{"path":"/reference/matrix-posDefinite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Positive Definite Matrixes — positiveDefinite","text":"x square numeric matrix.","code":""},{"path":"/reference/matrix-posDefinite.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Positive Definite Matrixes — positiveDefinite","text":"function isPositiveDefinite checks square      matrix positive definite. function makePositiveDefinite forces      matrix positive definite.","code":""},{"path":"/reference/matrix-posDefinite.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Positive Definite Matrixes — positiveDefinite","text":"Korbinian Strimmer.","code":""},{"path":"/reference/matrix-posDefinite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Positive Definite Matrixes — positiveDefinite","text":"","code":"## isPositiveDefinite -     # the 3x3 Pascal Matrix is positive define     isPositiveDefinite(pascal(3))                 #> [1] TRUE"},{"path":"/reference/matrix-rk.html","id":null,"dir":"Reference","previous_headings":"","what":"The Rank of a Matrix — rk","title":"The Rank of a Matrix — rk","text":"Returns rank matrix.","code":""},{"path":"/reference/matrix-rk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Rank of a Matrix — rk","text":"","code":"rk(x, method = c(\"qr\", \"chol\"))"},{"path":"/reference/matrix-rk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Rank of a Matrix — rk","text":"x numeric matrix. method character string. method = \"qr\" rank         computed qr(x)\\$rank, alternatively          method=\"chol\" rank         computed attr(chol(x, pivot=TRUE), \"rank\").","code":""},{"path":"/reference/matrix-rk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Rank of a Matrix — rk","text":"function rk computes rank matrix      dimension range matrix corresponding number      linearly independent rows columns matrix,      number nonzero singular values. rank matrix also named inear map.","code":""},{"path":"/reference/matrix-rk.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Rank of a Matrix — rk","text":"Golub, van Loan, (1996);     Matrix Computations,      3rd edition. Johns Hopkins University Press.","code":""},{"path":"/reference/matrix-rk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Rank of a Matrix — rk","text":"","code":"## Create Pascal Matrix:    P = pascal(5)    P #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    1    1    1    1 #> [2,]    1    2    3    4    5 #> [3,]    1    3    6   10   15 #> [4,]    1    4   10   20   35 #> [5,]    1    5   15   35   70     ## Compute the Rank:    rk(P) #> [1] 5    rk(P, \"chol\")                                 #> [1] 5"},{"path":"/reference/matrix-tr.html","id":null,"dir":"Reference","previous_headings":"","what":"Trace of a Matrix — tr","title":"Trace of a Matrix — tr","text":"Returns trace matrix.","code":""},{"path":"/reference/matrix-tr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trace of a Matrix — tr","text":"","code":"tr(x)"},{"path":"/reference/matrix-tr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trace of a Matrix — tr","text":"x numeric matrix.","code":""},{"path":"/reference/matrix-tr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Trace of a Matrix — tr","text":"function tr computes trace square matrix     sum diagonal elements matrix consideration.","code":""},{"path":"/reference/matrix-tr.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Trace of a Matrix — tr","text":"Golub, van Loan, (1996);     Matrix Computations,      3rd edition. Johns Hopkins University Press.","code":""},{"path":"/reference/matrix-tr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trace of a Matrix — tr","text":"","code":"## Create Pascal Matrix:    P = pascal(3)    P #>      [,1] [,2] [,3] #> [1,]    1    1    1 #> [2,]    1    2    3 #> [3,]    1    3    6    ## Trace:    tr(P)                                   #> [1] 9"},{"path":"/reference/matrix-triang.html","id":null,"dir":"Reference","previous_headings":"","what":"Upper and Lower Triangular Matrixes — triang","title":"Upper and Lower Triangular Matrixes — triang","text":"Extracs pper lower tridiagonal part matrix.","code":""},{"path":"/reference/matrix-triang.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upper and Lower Triangular Matrixes — triang","text":"","code":"triang(x) Triang(x)"},{"path":"/reference/matrix-triang.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upper and Lower Triangular Matrixes — triang","text":"x numeric matrix.","code":""},{"path":"/reference/matrix-triang.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Upper and Lower Triangular Matrixes — triang","text":"functions triang Triang allow transform     square matrix lower upper triangular form.      triangular matrix either upper triangular matrix lower      triangular matrix. first case matrix elements [,j]     matrix zero >j, whereas second case     just opposite situation. lower triangular matrix      sometimes also called left triangular. fact, triangular matrices      useful much computational linear algebra begins      factoring decomposing general matrix matrices triangular      form. matrix factorization methods Cholesky factorization      LU-factorization. Even including factorization step,      enough later operations typically avoided yield overall      time savings. Triangular matrices following properties:      inverse triangular matrix triangular matrix, product      two triangular matrices triangular matrix, determinant      triangular matrix product diagonal elements,      eigenvalues triangular matrix diagonal elements.","code":""},{"path":"/reference/matrix-triang.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Upper and Lower Triangular Matrixes — triang","text":"Higham, N.J., (2002);     Accuracy Stability Numerical Algorithms,      2nd ed., SIAM. Golub, van Loan, (1996);     Matrix Computations,      3rd edition. Johns Hopkins University Press.","code":""},{"path":"/reference/matrix-triang.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upper and Lower Triangular Matrixes — triang","text":"","code":"## Create Pascal Matrix:    P = pascal(3)    P #>      [,1] [,2] [,3] #> [1,]    1    1    1 #> [2,]    1    2    3 #> [3,]    1    3    6     ## Create lower triangle matrix    L = triang(P)    L                                 #>      [,1] [,2] [,3] #> [1,]    1    0    0 #> [2,]    1    2    0 #> [3,]    1    3    6"},{"path":"/reference/matrix-tslag.html","id":null,"dir":"Reference","previous_headings":"","what":"Lagged or Leading Vector/Matrix — tslag","title":"Lagged or Leading Vector/Matrix — tslag","text":"Creates lagged leading vector/matrix selected order(s).","code":""},{"path":"/reference/matrix-tslag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lagged or Leading Vector/Matrix — tslag","text":"","code":"tslag(x, k = 1, trim = FALSE)"},{"path":"/reference/matrix-tslag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lagged or Leading Vector/Matrix — tslag","text":"k integer value, number positions new series          lag lead input series. x numeric vector matrix, missing values allowed. trim logical flag, TRUE, missing values          beginning ans/end returned series trimmed.          default value FALSE.","code":""},{"path":[]},{"path":"/reference/matrix-tslag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lagged or Leading Vector/Matrix — tslag","text":"","code":"## tslag -    #"},{"path":"/reference/matrix-vech.html","id":null,"dir":"Reference","previous_headings":"","what":"Stacking Vectors and Matrixes — vec","title":"Stacking Vectors and Matrixes — vec","text":"Stacks either lower triangle matrix matrix.","code":""},{"path":"/reference/matrix-vech.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stacking Vectors and Matrixes — vec","text":"","code":"vec(x) vech(x)"},{"path":"/reference/matrix-vech.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stacking Vectors and Matrixes — vec","text":"x numeric matrix.","code":""},{"path":"/reference/matrix-vech.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stacking Vectors and Matrixes — vec","text":"function vec implements operator stacks matrix     column vector, precise matrix one column.     vec(X) = (X11, X21, ..., XN1, X12, X22, ..., XNN). function vech implements operator stacks lower      triangle NxN matrix N(N+1)/2x1 vector:     vech(X) =(X11, X21, X22, X31, ..., XNN), precise      matrix one row.","code":""},{"path":"/reference/matrix-vech.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stacking Vectors and Matrixes — vec","text":"","code":"## Create Pascal Matrix:    P = pascal(3)     ## Stack a matrix    vec(P)  #>       [,1] #>  [1,]    1 #>  [2,]    1 #>  [3,]    1 #>  [4,]    1 #>  [5,]    2 #>  [6,]    3 #>  [7,]    1 #>  [8,]    3 #>  [9,]    6     ## Stack the lower triangle    vech(P)                                         #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]    1    1    1    2    3    6"},{"path":"/reference/plot-acfPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Autocorrelation Function Plots — acfPlot","title":"Autocorrelation Function Plots — acfPlot","text":"Returns plots autocorrelations including     autocorrelation function ACF, partial     ACF, lagged ACF, Taylor effect plot. functions display stylized facts :","code":""},{"path":"/reference/plot-acfPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Autocorrelation Function Plots — acfPlot","text":"","code":"acfPlot(x, labels = TRUE, ...) pacfPlot(x, labels = TRUE, ...)   lacfPlot(x, n = 12, lag.max = 20, type = c(\"returns\", \"values\"),     labels = TRUE, ...)  teffectPlot(x, deltas = seq(from = 0.2, to = 3, by = 0.2), lag.max = 10,      ymax = NA, standardize = TRUE, labels = TRUE, ...)"},{"path":"/reference/plot-acfPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Autocorrelation Function Plots — acfPlot","text":"deltas exponents, numeric vector, default ranging          0.2 3.0 steps 0.2. labels logical value. Whether x- y-axes automatically          labeled default main title added plot.         default TRUE. lag.max maximum lag autocorrelation          calculated, integer. n integer value, number lags. standardize logical value. vector x standardized? type [lacf] -          character string specifies type input         series, either \"returns\" series \"values\". case          return series input, required value series          computed cumulating financial returns:          exp(colCumsums(x)) x uni- multivariate return series class timeSeries          object can transformed function         .timeSeries() object class timeSeries. ymax maximum y-axis value plot, .na(ymax) TRUE,         value selected automatically. ... arguments passed.","code":""},{"path":"/reference/plot-acfPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Autocorrelation Function Plots — acfPlot","text":"acfPlot, pacfplot,     return object class \"acf\", see acf. lacfPlot    returns list following two elements: Rho,     autocorrelation function, lagged, lagged correlations. teffectPlot    returns numeric matrix order deltas max.lag    values autocorrelations.","code":""},{"path":"/reference/plot-acfPlot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Autocorrelation Function Plots — acfPlot","text":"Autocorrelation Functions:          functions acfPlot pacfPlot, plot estimate      autocorrelation partial autocorrelation function. functions      allow get first view correlations within time series.      functions synonyme function calls R's acf      pacf ts package. Taylor Effect:          \"Taylor Effect\" describes fact absolute returns     speculative assets significant serial correlation long     lags. Even , autocorrelations absolute returns     typically greater squared returns.      observations Taylor effect states, autocorrelations     absolute returns power delta,      abs(x-mean(x))^delta reach maximum delta=1.     function teffect explores behaviour. plot     created shows lag (1 max.lag)      autocorrelations function exponent delta.      case formulated hypothesis supported,     curves peak value around delta=1.","code":""},{"path":"/reference/plot-acfPlot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Autocorrelation Function Plots — acfPlot","text":"Taylor S.J. (1986);      Modeling Financial Time Series,     John Wiley Sons, Chichester. Ding Z., Granger C.W.J., Engle R.F. (1993);      long memory property stock market returns new model,     Journal Empirical Finance 1, 83.","code":""},{"path":"/reference/plot-acfPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Autocorrelation Function Plots — acfPlot","text":"","code":"## data -     data(LPP2005REC, package = \"timeSeries\")    SPI <- LPP2005REC[, \"SPI\"]    plot(SPI, type = \"l\", col = \"steelblue\", main = \"SP500\")    abline(h = 0, col = \"grey\")   ## teffectPlot -    # Taylor Effect:    teffectPlot(SPI)"},{"path":"/reference/plot-boxPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Time Series Box Plots — BoxPlot","title":"Time Series Box Plots — BoxPlot","text":"Returns box box percentile plot. List Functions:","code":""},{"path":"/reference/plot-boxPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time Series Box Plots — BoxPlot","text":"","code":"boxPlot(x, col = \"steelblue\", title = TRUE, ...) boxPercentilePlot(x, col = \"steelblue\", title = TRUE, ...)"},{"path":"/reference/plot-boxPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time Series Box Plots — BoxPlot","text":"col color series. univariate case use just          color name like default, col=\"steelblue\",         multivariate case recommend select colors          color palette, e.g. col=heat.colors(ncol(x)). title logical flag, default TRUE. default title added          plot? x object class \"timeSeries\" object         can transformed function .timeSeries         object class timeSeries. latter case,         timeSeries objects, less untested. ... optional arguments passed.","code":""},{"path":"/reference/plot-boxPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time Series Box Plots — BoxPlot","text":"displays time series plot.","code":""},{"path":"/reference/plot-boxPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time Series Box Plots — BoxPlot","text":"","code":"## data -     data(LPP2005REC, package = \"timeSeries\")    LPP <- LPP2005REC[, 1:6]    plot(LPP, type = \"l\", col = \"steelblue\", main = \"SP500\")    abline(h = 0, col = \"grey\")      ## boxPlot -    boxPlot(LPP)"},{"path":"/reference/plot-histPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Histogram and Density Plots — HistogramPlot","title":"Histogram and Density Plots — HistogramPlot","text":"Returns histogram, density, logarithmic      density plot. List Functions:","code":""},{"path":"/reference/plot-histPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Histogram and Density Plots — HistogramPlot","text":"","code":"histPlot(x, labels = TRUE, col = \"steelblue\", fit = TRUE,      title = TRUE, grid = TRUE, rug = TRUE, skip = FALSE, ...)  densityPlot(x, labels = TRUE, col = \"steelblue\", fit = TRUE, hist = TRUE,      title = TRUE, grid = TRUE, rug = TRUE, skip = FALSE, ...)     logDensityPlot(x, labels = TRUE, col = \"steelblue\", robust = TRUE,       title = TRUE, grid = TRUE, rug = TRUE, skip = FALSE, ...)"},{"path":"/reference/plot-histPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Histogram and Density Plots — HistogramPlot","text":"col color series. univariate case use just          color name like default, col=\"steelblue\",         multivariate case recommend select colors          color palette, e.g. col=heat.colors(ncol(x)). fit logical flag, fit added Plot? grid logical flag, grid added plot?          default TRUE. plot horizontal lines         use grid=\"h\" vertical lines use grid=\"h\",         respectively. hist logical flag, default TRUE. histogram          underlaid plot? labels logical flag, plot returned default labels         decorated automated way? default TRUE. rug logical flag, default TRUE. rug representation          data added plot? skip logical flag, zeros skipped return Series? robust logical flag, default TRUE. robust fit added         plot? title logical flag, default TRUE. default title added          plot? x object class \"timeSeries\" object         can transformed function .timeSeries         object class timeSeries. latter case,         timeSeries objects, less untested. ... optional arguments passed.","code":""},{"path":"/reference/plot-histPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Histogram and Density Plots — HistogramPlot","text":"displays time series plot.","code":""},{"path":"/reference/plot-histPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Histogram and Density Plots — HistogramPlot","text":"","code":"## data -     data(LPP2005REC, package = \"timeSeries\")    SPI <- LPP2005REC[, \"SPI\"]    plot(SPI, type = \"l\", col = \"steelblue\", main = \"SP500\")    abline(h = 0, col = \"grey\")      ## histPlot -    histPlot(SPI)       ## densityPlot -    densityPlot(SPI)"},{"path":"/reference/plot-qqPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Quantile-Quantile Plots — QuantileQuantilePlots","title":"Quantile-Quantile Plots — QuantileQuantilePlots","text":"Returns quantile-quantile plots normal,     normal inverse Gaussian, generalized      hyperbolic Student-t generalized lambda     distribution. List Functions:","code":""},{"path":"/reference/plot-qqPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quantile-Quantile Plots — QuantileQuantilePlots","text":"","code":"qqnormPlot(x, labels = TRUE, col = \"steelblue\", pch = 19,     title = TRUE, mtext = TRUE, grid = FALSE, rug = TRUE,      scale = TRUE, ...)  qqnigPlot(x, labels = TRUE, col = \"steelblue\", pch = 19,     title = TRUE, mtext = TRUE, grid = FALSE, rug = TRUE,      scale = TRUE, ...)  qqghtPlot(x, labels = TRUE, col = \"steelblue\", pch = 19,     title = TRUE, mtext = TRUE, grid = FALSE, rug = TRUE,      scale = TRUE, ...)  qqgldPlot(x, labels = TRUE, col = \"steelblue\", pch = 19,     title = TRUE, mtext = TRUE, grid = FALSE, rug = TRUE,      scale = TRUE, ...)"},{"path":"/reference/plot-qqPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quantile-Quantile Plots — QuantileQuantilePlots","text":"x object class \"timeSeries\" object         can transformed function .timeSeries         object class timeSeries. latter case,         timeSeries objects, less untested. labels logical flag, plot returned default labels         decorated automated way? default TRUE. col color series. univariate case use just          color name like default, col=\"steelblue\",         multivariate case recommend select colors          color palette, e.g. col=heat.colors(ncol(x)). pch integer value, default 19. plot character          used plot? title logical flag, default TRUE. default title added          plot? mtext logical flag, default TRUE. marginal text         printed third site graph? grid logical flag, grid added plot?          default TRUE. plot horizontal lines         use grid=\"h\" vertical lines use grid=\"h\",         respectively. rug logical flag, default TRUE. rug representation          data added plot? scale logical flag, default TRUE. time series          scaled investigation? ... optional arguments passed.","code":""},{"path":"/reference/plot-qqPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quantile-Quantile Plots — QuantileQuantilePlots","text":"displays quantile-quantile plot.","code":""},{"path":"/reference/plot-qqPlot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Quantile-Quantile Plots — QuantileQuantilePlots","text":"Diethelm Wuertz Rmetrics R-port.","code":""},{"path":"/reference/plot-qqPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quantile-Quantile Plots — QuantileQuantilePlots","text":"","code":"## data -     data(LPP2005REC, package = \"timeSeries\")    SPI <- LPP2005REC[, \"SPI\"]    plot(SPI, type = \"l\", col = \"steelblue\", main = \"SP500\")    abline(h = 0, col = \"grey\")      ## qqPlot -    qqnormPlot(SPI)"},{"path":"/reference/plot-returnSeriesGUI.html","id":null,"dir":"Reference","previous_headings":"","what":"Return Series Plots — ReturnSeriesGUI","title":"Return Series Plots — ReturnSeriesGUI","text":"graphical user interface display     finanical time series plots. List Functions:","code":""},{"path":"/reference/plot-returnSeriesGUI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return Series Plots — ReturnSeriesGUI","text":"","code":"returnSeriesGUI(x)"},{"path":"/reference/plot-returnSeriesGUI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return Series Plots — ReturnSeriesGUI","text":"x object class \"timeSeries\" object         can transformed function .timeSeries         object class timeSeries. latter case,         timeSeries objects, less untested.","code":""},{"path":"/reference/plot-returnSeriesGUI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return Series Plots — ReturnSeriesGUI","text":"returnSeriesGUI    returnSeriesGUI function, beside graphical     user interface values returned.","code":""},{"path":"/reference/plot-returnSeriesGUI.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Return Series Plots — ReturnSeriesGUI","text":"Diethelm Wuertz Rmetrics R-port.","code":""},{"path":"/reference/plot-returnSeriesGUI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return Series Plots — ReturnSeriesGUI","text":"","code":"##"},{"path":"/reference/plot-scalinglawPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Scaling Law Bahaviour — ScalingLawPlot","title":"Scaling Law Bahaviour — ScalingLawPlot","text":"Evaluates scaling exponent financial      return series plots scaling law.","code":""},{"path":"/reference/plot-scalinglawPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scaling Law Bahaviour — ScalingLawPlot","text":"","code":"scalinglawPlot(x, span = ceiling(log(length(x)/252)/log(2)), doplot = TRUE,      labels = TRUE, trace = TRUE, ...)"},{"path":"/reference/plot-scalinglawPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scaling Law Bahaviour — ScalingLawPlot","text":"doplot logical value. plot displayed? labels logical value. Whether x- y-axes automatically          labeled default main title added plot.         default TRUE. span integer value, determines qqgaussPlot          plot range, default 5, scalingPlot         reasonable number points scaling range,         default daily data 252 business days per year         assumed. trace logical value. computation traced? x uni- multivariate return series class timeSeries          object can transformed function         .timeSeries() object class timeSeries. ... arguments passed.","code":""},{"path":"/reference/plot-scalinglawPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scaling Law Bahaviour — ScalingLawPlot","text":"returns list following components: Intercept, Exponent scaling exponent, InverseExponent    inverse value.","code":""},{"path":"/reference/plot-scalinglawPlot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Scaling Law Bahaviour — ScalingLawPlot","text":"Scaling Behavior:          function scalingPlot plots scaling law financial      time series aggregation returns estimate scaling      exponent. scaling behavior striking effect      foreign exchange market also markets expressing regular     structure volatility. Considering average absolute     return individual data periods one finds scaling power law     relates mean volatility given time intervals     size intervals. power law many cases      valid several orders magnitude time. exponent       usually deviates significantly Gaussian random walk model      implies 1/2.","code":""},{"path":"/reference/plot-scalinglawPlot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Scaling Law Bahaviour — ScalingLawPlot","text":"Taylor S.J. (1986);      Modeling Financial Time Series,     John Wiley Sons, Chichester.","code":""},{"path":"/reference/plot-scalinglawPlot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Scaling Law Bahaviour — ScalingLawPlot","text":"Diethelm Wuertz Rmetrics R-port.","code":""},{"path":"/reference/plot-scalinglawPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scaling Law Bahaviour — ScalingLawPlot","text":"","code":"## data -     data(LPP2005REC, package = \"timeSeries\")    SPI <- LPP2005REC[, \"SPI\"]    plot(SPI, type = \"l\", col = \"steelblue\", main = \"SP500\")    abline(h = 0, col = \"grey\")   ## teffectPlot -    # Scaling Law Effect:    scalinglawPlot(SPI)  #>  #> Scaling Law:          SPI #>   Plot Intercept      0.7135344 #>   Plot Slope          0.5213102 #>   Plot Inverse Slope  1.918244 #>"},{"path":"/reference/plot-seriesPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Financial Time Series Plots — TimeSeriesPlots","title":"Financial Time Series Plots — TimeSeriesPlots","text":"Returns index/price, return,     drawdown plot. List Functions:","code":""},{"path":"/reference/plot-seriesPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Financial Time Series Plots — TimeSeriesPlots","text":"","code":"seriesPlot(x, labels = TRUE, type = \"l\", col = \"steelblue\",      title = TRUE, grid = TRUE, box = TRUE, rug = TRUE, ...)  cumulatedPlot(x, index = 100, labels = TRUE, type = \"l\", col = \"steelblue\",      title = TRUE, grid = TRUE, box = TRUE, rug = TRUE, ...)  returnPlot(x, labels = TRUE, type = \"l\", col = \"steelblue\",      title = TRUE, grid = TRUE, box = TRUE, rug = TRUE, ...)  drawdownPlot(x, labels = TRUE, type = \"l\", col = \"steelblue\",      title = TRUE, grid = TRUE, box = TRUE, rug = TRUE, ...)"},{"path":"/reference/plot-seriesPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Financial Time Series Plots — TimeSeriesPlots","text":"box logical flag, box added plot?          default TRUE. col color series. univariate case use just          color name like default, col=\"steelblue\",         multivariate case recommend select colors          color palette, e.g. col=heat.colors(ncol(x)). grid logical flag, grid added plot?          default TRUE. index numeric value, default 100. function cumulates          column colum returns multiplies result          index value: index*exp(colCumsums(x)). labels logical flag, plot returned default labels         decorated automated way? default TRUE. rug logical flag, default TRUE. rug representation          data added plot? title logical flag, default TRUE. default title added          plot? type type plot drawn? default use line plot,         type=\"l\". alternative plot style produces nice          figures example type=\"h\". x object class \"timeSeries\" object         can transformed function .timeSeries         object class timeSeries. latter case,         timeSeries objects, less untested. ... optional arguments passed.","code":""},{"path":"/reference/plot-seriesPlot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Financial Time Series Plots — TimeSeriesPlots","text":"plot functions can used plot univariate multivariate     time series class timeSeries. graphical parameters type col can set     values specified argument list. case multivariate     time series col can specified values returned     color palette. Automated titles including main title, x- y-lables, grid lines,     box style rug represenatations cann selected setting     arguments TRUE default. title flag     unset, main title, x-, y-labels empty strings.     allows set user defined labels function title     plot drawn. Beside type, col, main, xlab      ylab, par arguments can passed     plot function. labels flag unset FALSE, decorations      added tothe  plot, plot can fully decorated     user.","code":""},{"path":"/reference/plot-seriesPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Financial Time Series Plots — TimeSeriesPlots","text":"displays time series plot.","code":""},{"path":"/reference/plot-seriesPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Financial Time Series Plots — TimeSeriesPlots","text":"","code":"## seriesPlot -    data(LPP2005REC, package = \"timeSeries\")    tS <- as.timeSeries(LPP2005REC)    seriesPlot(tS)"},{"path":"/reference/stableSlider.html","id":null,"dir":"Reference","previous_headings":"","what":"Slider GUI for Stable Distribution — StableSlider","title":"Slider GUI for Stable Distribution — StableSlider","text":"stableSlider() function provides interactive displays   density probabilities stable distributions.","code":""},{"path":"/reference/stableSlider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Slider GUI for Stable Distribution — StableSlider","text":"","code":"stableSlider(col= \"steelblue\", col.med = \"gray30\")"},{"path":"/reference/stableSlider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Slider GUI for Stable Distribution — StableSlider","text":"col, col.med optional arguments slider.","code":""},{"path":"/reference/stableSlider.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Slider GUI for Stable Distribution — StableSlider","text":"stableSlider() function displays densities     probabilities skew stable distribution, educational     purposes.","code":""},{"path":"/reference/stableSlider.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Slider GUI for Stable Distribution — StableSlider","text":"Diethelm Wuertz Rmetrics R-port.","code":""},{"path":"/reference/stableSlider.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Slider GUI for Stable Distribution — StableSlider","text":"see dstable, package stabledist.","code":""},{"path":"/reference/stableSlider.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Slider GUI for Stable Distribution — StableSlider","text":"","code":"if(dev.interactive())    stableSlider()"},{"path":"/reference/stats-basicStats.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic Time Series Statistics — BasicStatistics","title":"Basic Time Series Statistics — BasicStatistics","text":"Computes basic financial time series statististics. List Functions:","code":""},{"path":"/reference/stats-basicStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic Time Series Statistics — BasicStatistics","text":"","code":"basicStats(x, ci = 0.95)"},{"path":"/reference/stats-basicStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basic Time Series Statistics — BasicStatistics","text":"ci confidence interval, numeric value, default 0.95,          .e. 95 percent. x object class \"timeSeries\" object         can transformed function .timeSeries         object class timeSeries. latter case,         timeSeries objects, less untested.","code":""},{"path":"/reference/stats-basicStats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Basic Time Series Statistics — BasicStatistics","text":"basicsStats    returns data frame following entries row names:     nobs, NAs, Minimum, Maximum , 1. Quartile, 3. Quartile,     Mean, Median, Sum, SE Mean, LCL Mean, UCL Mean, Variance,     Stdev, Skewness, Kurtosis.","code":""},{"path":"/reference/stats-basicStats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Basic Time Series Statistics — BasicStatistics","text":"","code":"## basicStats -    # Simulated Monthly Return Data:    tS = timeSeries(matrix(rnorm(12)), timeDate::timeCalendar())    basicStats(tS) #>                  TS.1 #> nobs        12.000000 #> NAs          0.000000 #> Minimum     -1.853133 #> Maximum      2.061269 #> 1. Quartile -0.616955 #> 3. Quartile  0.704696 #> Mean         0.165781 #> Median       0.492461 #> Sum          1.989370 #> SE Mean      0.335319 #> LCL Mean    -0.572252 #> UCL Mean     0.903814 #> Variance     1.349268 #> Stdev        1.161580 #> Skewness    -0.051765 #> Kurtosis    -1.177763"},{"path":"/reference/stats-interpAkima.html","id":null,"dir":"Reference","previous_headings":"","what":"Bivariate Spline Interpolation — akimaInterp","title":"Bivariate Spline Interpolation — akimaInterp","text":"Interpolates bivariate data sets using Akima     spline interpolation.","code":""},{"path":"/reference/stats-interpAkima.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bivariate Spline Interpolation — akimaInterp","text":"","code":"akimaInterp(x, y = NULL, z = NULL, gridPoints = 21,     xo = seq(min(x), max(x), length = gridPoints),     yo = seq(min(y), max(y), length = gridPoints), extrap = FALSE)  akimaInterpp(x, y = NULL, z = NULL, xo, yo, extrap = FALSE)"},{"path":"/reference/stats-interpAkima.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bivariate Spline Interpolation — akimaInterp","text":"x, y, z akimaInterp arguments x y         two numeric vectors grid pounts, z numeric         matrix rectangular object can transformed         function .matrix matrix object.         akimaInterpp  consider either three numeric vectors         equal length  y z NULL, list         entries x, y, z, named data frame         x first, y second, z         third column. gridPoints integer value specifying number grid points x         y direction. xo, yo akimaInterp         two numeric vectors data points spanning grid,         akimaInterpp         two numeric vectors data points building pairs pointwise         interpolation. extrap logical, TRUE data points extrapolated.","code":""},{"path":"/reference/stats-interpAkima.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bivariate Spline Interpolation — akimaInterp","text":"Two options available gridded pointwise interpolation. akimaInterp function wrapper interp     function provided contributed R package akima.     Fortran code Akima spline interpolation routine     written H. Akima. Linear surface fitting krige surface fitting provided     functions linearInterp krigeInterp.","code":""},{"path":"/reference/stats-interpAkima.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Bivariate Spline Interpolation — akimaInterp","text":"IMPORTANT: contributed package akima     dependence list DESCRIPTION file due license conditions.     user install package CRAN     responsibility, please check license conditions.","code":""},{"path":"/reference/stats-interpAkima.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bivariate Spline Interpolation — akimaInterp","text":"akimaInterp returns list least three entries, x, y       z. Note, returned values, can directly       used  persp contour 3D plotting methods. akimaInterpp returns data.frame columns \"x\", \"y\",       \"z\".","code":""},{"path":[]},{"path":"/reference/stats-interpAkima.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bivariate Spline Interpolation — akimaInterp","text":"Akima H., 1978,     Method Bivariate Interpolation Smooth Surface Fitting     Irregularly Distributed Data Points,     ACM Transactions Mathematical Software 4, 149-164. Akima H., 1996,     Algorithm 761: Scattered-Data Surface Fitting Accuracy     Cubic Polynomial,     ACM Transactions Mathematical Software 22, 362-371.","code":""},{"path":"/reference/stats-interpAkima.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bivariate Spline Interpolation — akimaInterp","text":"","code":"# \\donttest{ ## Does not run for r-solaris-x86 ## akimaInterp -- Akima Interpolation: if (requireNamespace(\"interp\")) {   set.seed(1953)   x <- runif(999) - 0.5   y <- runif(999) - 0.5   z <- cos(2*pi*(x^2+y^2))   ans <- akimaInterp(x, y, z, gridPoints = 41, extrap = FALSE)   persp(ans, theta = -40, phi = 30, col = \"steelblue\",        xlab = \"x\", ylab = \"y\", zlab = \"z\")   contour(ans) } #> Loading required namespace: interp    ## Use spatial as alternative on r-solaris-x86 ## spatialInterp - Generate Kriged Grid Data: if (requireNamespace(\"spatial\")) {   RNGkind(kind = \"Marsaglia-Multicarry\", normal.kind = \"Inversion\")   set.seed(4711, kind = \"Marsaglia-Multicarry\")   x <- runif(999)-0.5   y <- runif(999)-0.5   z <- cos(2*pi*(x^2+y^2))   ans <- krigeInterp(x, y, z, extrap = FALSE)   persp(ans)   title(main = \"Kriging\")   contour(ans)   title(main = \"Kriging\") }   # }"},{"path":"/reference/stats-interpKrige.html","id":null,"dir":"Reference","previous_headings":"","what":"Bivariate Krige Interpolation — krigeInterp","title":"Bivariate Krige Interpolation — krigeInterp","text":"Bivariate Krige Interpolation.","code":""},{"path":"/reference/stats-interpKrige.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bivariate Krige Interpolation — krigeInterp","text":"","code":"krigeInterp(x, y = NULL, z = NULL, gridPoints = 21,     xo = seq(min(x), max(x), length = gridPoints),     yo = seq(min(y), max(y), length = gridPoints),     extrap = FALSE, polDegree = 6)"},{"path":"/reference/stats-interpKrige.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bivariate Krige Interpolation — krigeInterp","text":"x, y, z arguments x y         two numeric vectors grid pounts, z numeric         matrix rectangular object can transformed         function .matrix matrix object. gridPoints integer value specifying number grid points x         y direction. xo, yo two numeric vectors data points spanning grid. extrap logical, TRUE data points extrapolated. polDegree polynomial krige degree, integer ranging 1 6.","code":""},{"path":"/reference/stats-interpKrige.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Bivariate Krige Interpolation — krigeInterp","text":"function krigeInterp() requires R package     spatial.","code":""},{"path":"/reference/stats-interpKrige.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bivariate Krige Interpolation — krigeInterp","text":"krigeInterp    returns list least three entries, x, y    z. Note, returned values, can directly     used  persp contour 3D     plotting methods.","code":""},{"path":[]},{"path":"/reference/stats-interpKrige.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bivariate Krige Interpolation — krigeInterp","text":"","code":"# \\donttest{ ## The akima library is not auto-installed because of a different licence. ## krigeInterp -  Kriging: set.seed(1953) x = runif(999) - 0.5 y = runif(999) - 0.5 z = cos(2*pi*(x^2+y^2)) ans = krigeInterp(x, y, z, extrap = FALSE) persp(ans, theta = -40, phi = 30, col = \"steelblue\",     xlab = \"x\", ylab = \"y\", zlab = \"z\")  contour(ans)  # }"},{"path":"/reference/stats-interpLinear.html","id":null,"dir":"Reference","previous_headings":"","what":"Bivariate Linear Interpolation — linearInterp","title":"Bivariate Linear Interpolation — linearInterp","text":"Bivariate Linear Interpolation. Two options     available gridded pointwise interpolation.","code":""},{"path":"/reference/stats-interpLinear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bivariate Linear Interpolation — linearInterp","text":"","code":"linearInterp(x, y = NULL, z = NULL, gridPoints = 21,     xo = seq(min(x), max(x), length = gridPoints),     yo = seq(min(y), max(y), length = gridPoints))      linearInterpp(x, y = NULL, z = NULL, xo, yo)"},{"path":"/reference/stats-interpLinear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bivariate Linear Interpolation — linearInterp","text":"x, y, z linearInterp arguments x y          two numeric vectors grid pounts, z numeric          matrix rectangular object can transformed          function .matrix matrix object.           linearInterpp  consider either three numeric vectors          equal length  y z NULL, list          entries x, y, z, named data frame          x first, y second, z          third column. gridPoints integer value specifying number grid points x          y direction. xo, yo linearInterp         two numeric vectors data points spanning grid,         linearInterpp         two numeric vectors data points building pairs pointwise         interpolation.","code":""},{"path":"/reference/stats-interpLinear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bivariate Linear Interpolation — linearInterp","text":"linearInterp    returns list least three entries, x, y    z. Note, returned values, can directly      used  persp contour 3D plotting methods. linearInterpp    returns data.frame columns \"x\", \"y\",      \"z\".","code":""},{"path":[]},{"path":"/reference/stats-interpLinear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bivariate Linear Interpolation — linearInterp","text":"","code":"## linearInterp -    # Linear Interpolation:        if (requireNamespace(\"interp\")) {      set.seed(1953)      x = runif(999) - 0.5      y = runif(999) - 0.5      z = cos(2*pi*(x^2+y^2))      ans = linearInterp(x, y, z, gridPoints = 41)      persp(ans, theta = -40, phi = 30, col = \"steelblue\",         xlab = \"x\", ylab = \"y\", zlab = \"z\")      contour(ans)    }"},{"path":"/reference/stats-maxdd.html","id":null,"dir":"Reference","previous_headings":"","what":"Drawdown Statistics — maxdd","title":"Drawdown Statistics — maxdd","text":"collection description      functions compute drawdown statistics.      Included density, distribution function,       random generation maximum drawdown      distribution. addition expectation      drawdowns Brownian motion can computed. functions :","code":""},{"path":"/reference/stats-maxdd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drawdown Statistics — maxdd","text":"","code":"dmaxdd(x, sd = 1, horizon = 100, N = 1000)  pmaxdd(q, sd = 1, horizon = 100, N = 1000)  rmaxdd(n, mean = 0, sd = 1, horizon = 100)  maxddStats(mean = 0, sd = 1, horizon = 1000)"},{"path":"/reference/stats-maxdd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drawdown Statistics — maxdd","text":"x, q numeric vector quantiles. n integer value, number observations. mean, sd two numeric values, mean standard deviation. horizon integer value, (run time) horizon investor. N integer value, precession index summations.          change value please inspect Magdon-Ismail         et. al. (2003).","code":""},{"path":"/reference/stats-maxdd.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Drawdown Statistics — maxdd","text":"Currrently, functions dmaxdd pmaxdd     trend driftless case implemented.","code":""},{"path":"/reference/stats-maxdd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drawdown Statistics — maxdd","text":"dmaxdd    returns trendless Brownian process mean=0     standard deviation \"sd\" density probability      maximum drawdown \"D\" larger equal \"h\"       interval [0,T], \"T\" denotes time horizon    investor. pmaxdd    returns trendless Brownian process mean=0     standard deviation \"sd\" probability      maximum drawdown \"D\" larger equal \"h\"       interval [0,T], \"T\" denotes time horizon    investor. rmaxdd    returns Brownian Motion process mean mean      standard deviation sd random variates maximum drawdowns. maxddStats    returns expectation Value E[D] maximum drawdowns     Brownian Motion given drift mean, variance sd,       runtime horizon Brownian Motion process.","code":""},{"path":"/reference/stats-maxdd.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Drawdown Statistics — maxdd","text":"Magdon-Ismail M., Atiya .F., Pratap ., Abu-Mostafa Y.S. (2003);     Maximum Drawdown Brownian Motion,     Preprint, CalTech, Pasadena USA, p. 24.","code":""},{"path":"/reference/stats-maxdd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drawdown Statistics — maxdd","text":"","code":"## rmaxdd -    # Set a random seed    set.seed(1953)                   # horizon of the investor, time T    horizon = 1000                   # number of MC samples, N -> infinity    samples = 1000                   # Range of expected Drawdons    xlim = c(0, 5)*sqrt(horizon)     # Plot Histogram of Simulated Max Drawdowns:    r = rmaxdd(n = samples, mean = 0, sd = 1, horizon = horizon)    hist(x = r, n = 40, probability = TRUE, xlim = xlim,       col = \"steelblue4\", border = \"white\", main = \"Max. Drawdown Density\")     points(r, rep(0, samples), pch = 20, col = \"orange\", cex = 0.7)     ## dmaxdd -     x = seq(0, xlim[2], length = 200)    d = dmaxdd(x = x, sd = 1, horizon = horizon, N = 1000)    lines(x, d, lwd = 2)       ## pmaxdd -    # Count Frequencies of Drawdowns Greater or Equal to \"h\":    n = 50    x = seq(0, xlim[2], length = n)    g = rep(0, times = n)    for (i in 1:n) g[i] = length (r[r > x[i]]) / samples    plot(x, g, type =\"h\", lwd = 3,      xlab = \"q\", main = \"Max. Drawdown Probability\")    # Compare with True Probability \"G_D(h)\":    x = seq(0, xlim[2], length = 5*n)    p = pmaxdd(q = x, sd = 1, horizon = horizon, N = 5000)    lines(x, p, lwd = 2, col=\"steelblue4\")       ## maxddStats -    # Compute expectation Value E[D]:    maxddStats(mean = -0.5, sd = 1, horizon = 10^(1:4)) #> [1]    6.841696   52.000000  502.000000 5002.000000    maxddStats(mean =  0.0, sd = 1, horizon = 10^(1:4)) #> [1]   3.963327  12.533141  39.633273 125.331414    maxddStats(mean =  0.5, sd = 1, horizon = 10^(1:4)) #> [1] 2.529253 4.566413 6.809237 9.101853"},{"path":"/reference/stats-rowStats.html","id":null,"dir":"Reference","previous_headings":"","what":"Row Statistics — rowStats","title":"Row Statistics — rowStats","text":"Functions compute row statistical properties      financial economic time series data. functions :","code":""},{"path":"/reference/stats-rowStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Row Statistics — rowStats","text":"","code":"rowStats(x, FUN, ...)   <!-- % rowSums(x, \\dots) --> <!-- % rowMeans(x, \\dots) -->  rowSds(x, ...) rowVars(x, ...) rowSkewness(x, ...) rowKurtosis(x, ...) rowMaxs(x, ...) rowMins(x, ...) rowProds(x, ...) rowQuantiles(x, prob = 0.05, ...)  rowStdevs(x, ...) rowAvgs(x, ...)"},{"path":"/reference/stats-rowStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Row Statistics — rowStats","text":"FUN function name. statistical function applied. prob numeric value, probability value [0,1]. x rectangular object can transformed matrix         function .matrix. ... arguments passed.","code":""},{"path":"/reference/stats-rowStats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Row Statistics — rowStats","text":"functions return numeric vector statistics.","code":""},{"path":[]},{"path":"/reference/stats-rowStats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Row Statistics — rowStats","text":"","code":"## Simulated Return Data in Matrix Form:    x = matrix(rnorm(10*10), nrow = 10)       ## rowStats -    rowStats(x, FUN = mean) #>  [1]  0.18422758 -0.07130207  0.41613040  0.01773426  0.33939605  0.18244729 #>  [7]  0.19210571 -0.22218828  0.23648095 -0.14000824     ## rowMaxs -    rowMaxs(x)   #>  [1] 1.8815871 0.6135046 1.4881833 1.6704000 2.9194556 2.4254361 1.7637915 #>  [8] 1.0885857 2.1724900 0.9874172"},{"path":"/reference/stats-sampleLMoments.html","id":null,"dir":"Reference","previous_headings":"","what":"Robust Moments for the GLD — sampleRobMoments","title":"Robust Moments for the GLD — sampleRobMoments","text":"Computes first four robust moments     Normal Inverse Gaussian Distribution.","code":""},{"path":"/reference/stats-sampleLMoments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Robust Moments for the GLD — sampleRobMoments","text":"","code":"sampleMED(x) sampleIQR(x) sampleSKEW(x) sampleKURT(x)"},{"path":"/reference/stats-sampleLMoments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Robust Moments for the GLD — sampleRobMoments","text":"x numeric vector, sample values.","code":""},{"path":"/reference/stats-sampleLMoments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Robust Moments for the GLD — sampleRobMoments","text":"values *sample functions numeric vectors:  d* returns density, p* returns distribution function, q* returns quantile function, r* generates random deviates.     values attributes named \"param\" listing     values distributional parameters.","code":""},{"path":"/reference/stats-sampleLMoments.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Robust Moments for the GLD — sampleRobMoments","text":"Diethelm Wuertz.","code":""},{"path":"/reference/stats-sampleLMoments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Robust Moments for the GLD — sampleRobMoments","text":"","code":"## Sample:    x = rt(100, 4)     ## sampleMED -    # Median:    sampleMED(x) #>         MED  #> -0.01580327    ## sampleIQR -     # Inter-quartile Range:    sampleIQR(x) #>      IQR  #> 1.391907    ## sampleSKEW -      # Robust Skewness:    sampleSKEW(x) #>        SKEW  #> 0.009924021      ## sampleKURT -    # Robust Kurtosis:    sampleKURT(x) #>     KURT  #> 1.314856"},{"path":"/reference/stats-sampleRobMoments.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample L-Moments — sampleLMoments","title":"Sample L-Moments — sampleLMoments","text":"Computes L-moments empirical sample data set.","code":""},{"path":"/reference/stats-sampleRobMoments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample L-Moments — sampleLMoments","text":"","code":"sampleLmoments(x, rmax=4)"},{"path":"/reference/stats-sampleRobMoments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample L-Moments — sampleLMoments","text":"x numeric vector, sample values. rmax integer value, number L-moments         returned.","code":""},{"path":"/reference/stats-sampleRobMoments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample L-Moments — sampleLMoments","text":"values *sample functions numeric vectors:  d* returns density, p* returns distribution function, q* returns quantile function, r* generates random deviates.     values attributes named \"param\" listing     values distributional parameters.","code":""},{"path":"/reference/stats-sampleRobMoments.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sample L-Moments — sampleLMoments","text":"Diethelm Wuertz.","code":""},{"path":"/reference/stats-sampleRobMoments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample L-Moments — sampleLMoments","text":"","code":"## Sample:    x = rt(100, 4)     ## sampleLmoments -    sampleLmoments(x) #>          L1          L2          L3          L4  #> 0.141501641 0.746736414 0.001826407 0.155024769"},{"path":"/reference/test-correlationTest.html","id":null,"dir":"Reference","previous_headings":"","what":"Correlation Tests — correlationTest","title":"Correlation Tests — correlationTest","text":"Tests two series correlated.","code":""},{"path":"/reference/test-correlationTest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correlation Tests — correlationTest","text":"","code":"correlationTest(x, y, method = c(\"pearson\", \"kendall\", \"spearman\"),      title = NULL, description = NULL)      pearsonTest(x, y, title = NULL, description = NULL)  kendallTest(x, y, title = NULL, description = NULL) spearmanTest(x, y, title = NULL, description = NULL)"},{"path":"/reference/test-correlationTest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correlation Tests — correlationTest","text":"x, y numeric vectors data values. method character string naming test applied. title optional title string, specified inputs data          name deparsed. description optional description string, vector character strings.","code":""},{"path":"/reference/test-correlationTest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Correlation Tests — correlationTest","text":"contrast R's output report S3 objects class \"htest\"    different output report produced. classical tests presented     return S4 object class \"fHTEST\". object contains     following slots: @call function call. @data data specified input argument(s). @test list whose elements contain results statistical         test. information provided similar list object         class \"htest\". @title character string name test. can          overwritten specifying user defined input argument. @description character string optional user defined description.          default just current date test applied         returned. slot @test returns object class \"list\"    containing (least) following elements: statistic value(s) test statistic. p.value p-value(s) test. parameters numeric value vector parameters. estimate numeric value vector sample estimates. conf.int numeric two row vector matrix 95 method character string indicating type test performed. data.name character string giving name(s) data.","code":""},{"path":"/reference/test-correlationTest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Correlation Tests — correlationTest","text":"function correlationTest tests association      paired samples allowing compute Pearson's product moment correlation      coefficient, Kendall's tau, Spearman's rho.","code":""},{"path":"/reference/test-correlationTest.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Correlation Tests — correlationTest","text":"test implementations selected R's ctest      package.","code":""},{"path":"/reference/test-correlationTest.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Correlation Tests — correlationTest","text":"Conover, W. J. (1971);     Practical nonparametric statistics,     New York: John Wiley & Sons. Lehmann E.L. (1986);      Testing Statistical Hypotheses,      John Wiley Sons, New York.","code":""},{"path":"/reference/test-correlationTest.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Correlation Tests — correlationTest","text":"R-core team hypothesis tests implemented R's      package ctest.","code":""},{"path":[]},{"path":"/reference/test-correlationTest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Correlation Tests — correlationTest","text":"","code":"## x, y -    x = rnorm(50)    y = rnorm(50)    ## correlationTest -     correlationTest(x, y, \"pearson\") #>  #> Title: #>  Pearson's Correlation Test #>  #> Test Results: #>   PARAMETER: #>     Degrees of Freedom: 48 #>   SAMPLE ESTIMATES: #>     Correlation: 2e-04 #>   STATISTIC: #>     t: 0.0016 #>   P VALUE: #>     Alternative Two-Sided: 0.9987  #>     Alternative      Less: 0.5006  #>     Alternative   Greater: 0.4994  #>   CONFIDENCE INTERVAL: #>     Two-Sided: -0.2781, 0.2786 #>          Less: -1, 0.2356 #>       Greater: -0.2352, 1 #>  #> Description: #>  Mon Aug  8 08:09:50 2022 #>     correlationTest(x, y, \"kendall\") #>  #> Title: #>  Kendall's tau Correlation Test #>  #> Test Results: #>   SAMPLE ESTIMATES: #>     tau: 0.009 #>   STATISTIC: #>     z: 0.092 #>     T | Exact: 618 #>   P VALUE: #>     Alternative         Two-Sided: 0.9267  #>     Alternative Two-Sided | Exact: 0.9337  #>     Alternative              Less: 0.5367  #>     Alternative      Less | Exact: 0.5398  #>     Alternative           Greater: 0.4633  #>     Alternative   Greater | Exact: 0.4668  #>  #> Description: #>  Mon Aug  8 08:09:50 2022 #>     spearmanTest(x, y) #>  #> Title: #>  Spearman's rho Correlation Test #>  #> Test Results: #>   SAMPLE ESTIMATES: #>     rho: 0.016 #>   STATISTIC: #>     S: 20492 #>   P VALUE: #>     Alternative Two-Sided: 0.9122  #>     Alternative      Less: 0.5442  #>     Alternative   Greater: 0.4561  #>  #> Description: #>  Mon Aug  8 08:09:50 2022 #>"},{"path":"/reference/test-fHTEST.html","id":null,"dir":"Reference","previous_headings":"","what":"Tests Class Representation and Utilities — fHTEST","title":"Tests Class Representation and Utilities — fHTEST","text":"Class representation, methods utility      functions objects class 'fHTEST'. class representation methods :","code":""},{"path":"/reference/test-fHTEST.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tests Class Representation and Utilities — fHTEST","text":"","code":"# S4 method for fHTEST show(object)"},{"path":"/reference/test-fHTEST.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tests Class Representation and Utilities — fHTEST","text":"object [show] -          S4 object class \"fHTEST\".","code":""},{"path":"/reference/test-fHTEST.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tests Class Representation and Utilities — fHTEST","text":"contrast R's output report S3 objects class \"htest\"    different output report produced. tests return S4 object      class \"fHTEST\". object contains following slots: @call function call. @data data specified input argument(s). @test list whose elements contain results statistical         test. information provided similar list object         class \"htest\". @title character string name test. can          overwritten specifying user defined input argument. @description character string optional user defined description.          default just current date test applied         returned. slot @test returns object class \"list\"    containing following elements: statistic value(s) test statistic. p.value p-value(s) test. parameters numeric value vector parameters. estimate numeric value vector sample estimates. conf.int numeric two row vector matrix 95 method character string indicating type test performed. data.name character string giving name(s) data.","code":""},{"path":"/reference/test-fHTEST.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tests Class Representation and Utilities — fHTEST","text":"","code":"## fHTEST -    getClass(\"fHTEST\") #> Class \"fHTEST\" [package \"fBasics\"] #>  #> Slots: #>                                                                    #> Name:         call        data        test       title description #> Class:        call        list        list   character   character    getSlots(\"fHTEST\") #>        call        data        test       title description  #>      \"call\"      \"list\"      \"list\" \"character\" \"character\""},{"path":"/reference/test-ks2Test.html","id":null,"dir":"Reference","previous_headings":"","what":"Two Sample Kolmogorov--Smirnov Test — ks2Test","title":"Two Sample Kolmogorov--Smirnov Test — ks2Test","text":"Tests two series distributional equivalent.","code":""},{"path":"/reference/test-ks2Test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Two Sample Kolmogorov--Smirnov Test — ks2Test","text":"","code":"ks2Test(x, y, title = NULL, description = NULL)"},{"path":"/reference/test-ks2Test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Two Sample Kolmogorov--Smirnov Test — ks2Test","text":"x, y numeric vectors data values. title optional title string, specified inputs data          name deparsed. description optional description string, vector character strings.","code":""},{"path":"/reference/test-ks2Test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Two Sample Kolmogorov--Smirnov Test — ks2Test","text":"contrast R's output report S3 objects class \"htest\"    different output report produced. classical tests presented     return S4 object class \"fHTEST\". object contains     following slots: @call function call. @data data specified input argument(s). @test list whose elements contain results statistical         test. information provided similar list object         class \"htest\". @title character string name test. can          overwritten specifying user defined input argument. @description character string optional user defined description.          default just current date test applied         returned. slot @test returns object class \"list\"    containing (least) following elements: statistic value(s) test statistic. p.value p-value(s) test. parameters numeric value vector parameters. estimate numeric value vector sample estimates. conf.int numeric two row vector matrix 95 method character string indicating type test performed. data.name character string giving name(s) data.","code":""},{"path":"/reference/test-ks2Test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Two Sample Kolmogorov--Smirnov Test — ks2Test","text":"test ks2Test performs Kolmogorov--Smirnov two sample test      two data samples x y come      distribution, necessarily normal distribution. means      specified common distribution .","code":""},{"path":"/reference/test-ks2Test.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Two Sample Kolmogorov--Smirnov Test — ks2Test","text":"Conover, W. J. (1971);     Practical nonparametric statistics,     New York: John Wiley & Sons. Lehmann E.L. (1986);      Testing Statistical Hypotheses,      John Wiley Sons, New York.","code":""},{"path":"/reference/test-ks2Test.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Two Sample Kolmogorov--Smirnov Test — ks2Test","text":"R-core team hypothesis tests implemented R's      package ctest.","code":""},{"path":"/reference/test-ks2Test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Two Sample Kolmogorov--Smirnov Test — ks2Test","text":"","code":"## rnorm -     # Generate Series:    x = rnorm(50)    y = rnorm(50)    ## ks2Test -     ks2Test(x, y) #>  #> Title: #>  Kolmogorov-Smirnov Two Sample Test #>  #> Test Results: #>   STATISTIC: #>     D | Two Sided: 0.22 #>        D^- | Less: 0.1 #>     D^+ | Greater: 0.22 #>   P VALUE: #>     Alternative       Two-Sided: 0.1786  #>     Alternative Exact Two-Sided: 0.1786  #>     Alternative            Less: 0.6065  #>     Alternative         Greater: 0.08892  #>  #> Description: #>  Mon Aug  8 08:09:50 2022 #>"},{"path":"/reference/test-locationTest.html","id":null,"dir":"Reference","previous_headings":"","what":"Two Sample Location Tests — locationTest","title":"Two Sample Location Tests — locationTest","text":"Tests two series differ distributional     location parameter.","code":""},{"path":"/reference/test-locationTest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Two Sample Location Tests — locationTest","text":"","code":"locationTest(x, y, method = c(\"t\", \"kw2\"),      title = NULL, description = NULL)"},{"path":"/reference/test-locationTest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Two Sample Location Tests — locationTest","text":"x, y numeric vectors data values. method character string naming test applied. title optional title string, specified inputs data          name deparsed. description optional description string, vector character strings.","code":""},{"path":"/reference/test-locationTest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Two Sample Location Tests — locationTest","text":"contrast R's output report S3 objects class \"htest\"    different output report produced. classical tests presented     return S4 object class \"fHTEST\". object contains     following slots: @call function call. @data data specified input argument(s). @test list whose elements contain results statistical         test. information provided similar list object         class \"htest\". @title character string name test. can          overwritten specifying user defined input argument. @description character string optional user defined description.          default just current date test applied         returned. slot @test returns object class \"list\"    containing (least) following elements: statistic value(s) test statistic. p.value p-value(s) test. parameters numeric value vector parameters. estimate numeric value vector sample estimates. conf.int numeric two row vector matrix 95 method character string indicating type test performed. data.name character string giving name(s) data.","code":""},{"path":"/reference/test-locationTest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Two Sample Location Tests — locationTest","text":"method=\"t\" can used determine two sample      means equal unpaired data sets. Two variants used,     assuming equal unequal variances. method=\"kw2\" performs Kruskal-Wallis rank sum      test null hypothesis central tendencies medians      two samples . alternative differ.      Note, assumed two samples drawn      distribution. also worth know test assumes      variables consideration underlying continuous      distributions.","code":""},{"path":"/reference/test-locationTest.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Two Sample Location Tests — locationTest","text":"test implementations selected R's ctest      package.","code":""},{"path":"/reference/test-locationTest.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Two Sample Location Tests — locationTest","text":"Conover, W. J. (1971);     Practical nonparametric statistics,     New York: John Wiley & Sons. Lehmann E.L. (1986);      Testing Statistical Hypotheses,      John Wiley Sons, New York.","code":""},{"path":"/reference/test-locationTest.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Two Sample Location Tests — locationTest","text":"R-core team hypothesis tests implemented R's      package ctest.","code":""},{"path":"/reference/test-locationTest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Two Sample Location Tests — locationTest","text":"","code":"## rnorm -     # Generate Series:    x = rnorm(50)    y = rnorm(50)    ## locationTest -    locationTest(x, y, \"t\") #>  #> Title: #>  t Test #>  #> Test Results: #>   PARAMETER: #>     x Observations: 50 #>     y Observations: 50 #>     mu: 0 #>   SAMPLE ESTIMATES: #>     Mean of x: -0.1242 #>     Mean of y: 0.2947 #>     Var  of x: 0.7276 #>     Var  of y: 1.1013 #>   STATISTIC: #>                 T: -2.19 #>     T | Equal Var: -2.19 #>   P VALUE: #>     Alternative Two-Sided: 0.031  #>     Alternative      Less: 0.0155  #>     Alternative   Greater: 0.9845  #>     Alternative Two-Sided | Equal Var: 0.0309  #>     Alternative      Less | Equal Var: 0.01545  #>     Alternative   Greater | Equal Var: 0.9846  #>   CONFIDENCE INTERVAL: #>     Two-Sided: -0.7986, -0.0391 #>          Less: -Inf, -0.1011 #>       Greater: -0.7366, Inf #>     Two-Sided | Equal Var: -0.7984, -0.0393 #>          Less | Equal Var: -Inf, -0.1013 #>       Greater | Equal Var: -0.7364, Inf #>  #> Description: #>  Mon Aug  8 08:09:50 2022 #>     locationTest(x, y, \"kw2\") #>  #> Title: #>  Kruskal-Wallis Two Sample Test #>  #> Test Results: #>   PARAMETER: #>     x Observations: 50 #>     y Observations: 50 #>   SAMPLE ESTIMATES: #>     Mean of x: -0.1242 #>     Mean of y: 0.2947 #>     Var  of x: 0.7276 #>     Var  of y: 1.1013 #>   STATISTIC: #>     KW chi-squared: 3.9693 #>   P VALUE: #>     0.04634  #>  #> Description: #>  Mon Aug  8 08:09:50 2022 #>"},{"path":"/reference/test-normalityTests.html","id":null,"dir":"Reference","previous_headings":"","what":"Normality Tests — NormalityTests","title":"Normality Tests — NormalityTests","text":"collection description functions one     sample tests testing normality financial     return series. functions testing normality :  Functions high precision Jarque Bera LM ALM tests:  Additional functions testing normality 'nortest' package:  SPlus/Finmetrics Compatibility:","code":""},{"path":"/reference/test-normalityTests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normality Tests — NormalityTests","text":"","code":"ksnormTest(x, title = NULL, description = NULL)  jbTest(x, title = NULL, description = NULL) shapiroTest(x, title = NULL, description = NULL) normalTest(x, method = c(\"sw\", \"jb\"), na.rm = FALSE)  jarqueberaTest(x, title = NULL, description = NULL) dagoTest(x, title = NULL, description = NULL)  adTest(x, title = NULL, description = NULL) cvmTest(x, title = NULL, description = NULL) lillieTest(x, title = NULL, description = NULL) pchiTest(x, title = NULL, description = NULL) sfTest(x, title = NULL, description = NULL)"},{"path":"/reference/test-normalityTests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normality Tests — NormalityTests","text":"description optional description string, vector character strings. method [normalTest] -          indicates four different methods normality test,         \"ks\" Kolmogorov-Smirnov one--sample test,         \"sw\" Shapiro-Wilk test,         \"jb\" Jarque-Bera Test,         \"da\" D'Agostino Test.         default value \"ks\". na.rm [normalTest] -          logical value. missing values removed computing         tests? default value FALSE. title optional title string, specified inputs data         name deparsed. x numeric vector data values S4 object class         timeSeries.","code":""},{"path":"/reference/test-normalityTests.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normality Tests — NormalityTests","text":"contrast R's output report S3 objects class \"htest\"    different output report produced. tests return S4     object class \"fHTEST\". object contains following slots: @call function call. @data data specified input argument(s). @test list whose elements contain results statistical         test. information provided similar list object         class \"htest\". @title character string name test. can         overwritten specifying user defined input argument. @description character string optional user defined description.         default just current date test applied         returned. slot @test returns object class \"list\"    containing following (otionally empty) elements: statistic value(s) test statistic. p.value p-value(s) test. parameters numeric value vector parameters. estimate numeric value vector sample estimates. conf.int numeric two row vector matrix 95 method character string indicating type test performed. data.name character string giving name(s) data. meaning elements @test slot following: ksnormTest    returns values 'D' statistic p-values three     alternatives 'two-sided, 'less' 'greater'. shapiroTest    returns values 'W' statistic p-value. jarqueberaTestjbTest    returns values 'Chi-squared' statistic 2 degrees     freedom, asymptotic p-value. jbTest finite sample     version Jarque Bera Lagrange multiplier, LM, adjusted     Lagrange multiplier test, ALM. dagoTest    returns values 'Chi-squared', 'Z3' (Skewness) 'Z4'     (Kurtosis) statistic together corresponding p values. adTest    returns value '' statistic p-value. cvmTest    returns value 'W' statistic p-value. lillieTest    returns value 'D' statistic p-value. pchiTest    returns value 'P' statistic p-values     adjusted adjusted test cases.  addition number     classes printed, taking default value due Moore (1986)     computed expression n.classes = ceiling(2 * (n^(2/5))),     n number observations. sfTest    returns value 'W' statistic p-value.","code":""},{"path":"/reference/test-normalityTests.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Normality Tests — NormalityTests","text":"hypothesis tests may interest many financial     economic applications, especially investigation     univariate time series returns. Normal Tests:          Several tests testing records data set normally     distributed available. input functions may     just vector x univariate time series object x     class timeSeries. First exists wrapper function allows call one     two normal tests either Shapiro--Wilks test Jarque--Bera     test. wrapper introduced compatibility S-Plus'     FinMetrics package. Also available Kolmogorov--Smirnov one sample test     D'Agostino normality test. remaining five normal tests Anderson--Darling test,     Cramer--von Mises test, Lilliefors (Kolmogorov--Smirnov)     test, Pearson chi--square test, Shapiro--Francia test.     calling functions R's contributed package nortest.     difference original test functions implemented R     contributed R packages Rmetrics functions accept     time series objects input give detailed output report. Anderson-Darling test used test sample data came     population specific distribution, normal     distribution. adTest goodness--fit test can     considered modification Kolmogorov--Smirnov test     gives weight tails ksnormTest.","code":""},{"path":"/reference/test-normalityTests.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Normality Tests — NormalityTests","text":"test implementations selected R's ctest     nortest packages.","code":""},{"path":"/reference/test-normalityTests.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Normality Tests — NormalityTests","text":"Anderson T.W., Darling D.. (1954);     Test Goodness Fit,     JASA 49:765--69. Conover, W. J. (1971);     Practical nonparametric statistics,     New York: John Wiley & Sons. D'Agostino R.B., Pearson E.S. (1973);     Tests Departure Normality,     Biometrika 60, 613--22. D'Agostino R.B., Rosman B. (1974);     Power Geary's Test Normality,     Biometrika 61, 181--84. Durbin J. (1961);     Methods Constructing Exact Tests,     Biometrika 48, 41--55. Durbin,J. (1973);     Distribution Theory Based Sample Distribution Function,     SIAM, Philadelphia. Geary R.C. (1947);     Testing Normality;     Biometrika 36, 68--97. Lehmann E.L. (1986);     Testing Statistical Hypotheses,     John Wiley Sons, New York. Linnet K. (1988);     Testing Normality Transformed Data,     Applied Statistics 32, 180--186. Moore, D.S. (1986);     Tests chi-squared type,     : D'Agostino, R.B. Stephens, M.., eds.,     Goodness--Fit Techniques, Marcel Dekker, New York. Shapiro S.S., Francia R.S. (1972);     Approximate Analysis Variance Test Normality,     JASA 67, 215--216. Shapiro S.S., Wilk M.B., Chen V. (1968);     Comparative Study Various Tests Normality,     JASA 63, 1343--72. Thode H.C. (2002);     Testing Normality,     Marcel Dekker, New York. Weiss M.S. (1978);     Modification Kolmogorov-Smirnov         Statistic Use Correlated Data,     JASA 73, 872--75. Wuertz D., Katzgraber H.G. (2005);     Precise finite-sample quantiles         Jarque-Bera adjusted Lagrange multiplier test,     ETHZ Preprint.","code":""},{"path":"/reference/test-normalityTests.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Normality Tests — NormalityTests","text":"R-core team tests R's ctest package,     Adrian Trapletti runs test R's tseries package,     Juergen Gross normal tests R's nortest package,     James Filliben Fortran program producing runs report,     Diethelm Wuertz Helmut Katzgraber finite sample JB tests,      Diethelm Wuertz Rmetrics R-port.      Earlier versions theses functions  based Fortran code Paul Johnson.","code":""},{"path":"/reference/test-normalityTests.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normality Tests — NormalityTests","text":"","code":"## Series:    x = rnorm(100)  ## ksnormTests -    # Kolmogorov - Smirnov One-Sampel Test    ksnormTest(x) #>  #> Title: #>  One-sample Kolmogorov-Smirnov test #>  #> Test Results: #>   STATISTIC: #>     D: 0.1162 #>   P VALUE: #>     Alternative Two-Sided: 0.1341  #>     Alternative      Less: 0.06709  #>     Alternative   Greater: 0.7917  #>  #> Description: #>  Mon Aug  8 08:09:50 2022 by user: georgi #>   ## shapiroTest - Shapiro-Wilk Test    shapiroTest(x) #>  #> Title: #>  Shapiro - Wilk Normality Test #>  #> Test Results: #>   STATISTIC: #>     W: 0.9817 #>   P VALUE: #>     0.18  #>  #> Description: #>  Mon Aug  8 08:09:50 2022 by user: georgi #>   ## jarqueberaTest -    # Jarque - Bera Test    # jarqueberaTest(x)    # jbTest(x)"},{"path":"/reference/test-scaleTest.html","id":null,"dir":"Reference","previous_headings":"","what":"Two Sample Scale Tests — scaleTest","title":"Two Sample Scale Tests — scaleTest","text":"Tests two series differ distributional     scale parameter.","code":""},{"path":"/reference/test-scaleTest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Two Sample Scale Tests — scaleTest","text":"","code":"scaleTest(x, y, method = c(\"ansari\", \"mood\"),      title = NULL, description = NULL)"},{"path":"/reference/test-scaleTest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Two Sample Scale Tests — scaleTest","text":"x, y numeric vectors data values. method character string naming test applied. title optional title string, specified inputs data          name deparsed. description optional description string, vector character strings.","code":""},{"path":"/reference/test-scaleTest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Two Sample Scale Tests — scaleTest","text":"contrast R's output report S3 objects class \"htest\"    different output report produced. classical tests presented     return S4 object class \"fHTEST\". object contains     following slots: @call function call. @data data specified input argument(s). @test list whose elements contain results statistical         test. information provided similar list object         class \"htest\". @title character string name test. can          overwritten specifying user defined input argument. @description character string optional user defined description.          default just current date test applied         returned. slot @test returns object class \"list\"    containing (least) following elements: statistic value(s) test statistic. p.value p-value(s) test. parameters numeric value vector parameters. estimate numeric value vector sample estimates. conf.int numeric two row vector matrix 95 method character string indicating type test performed. data.name character string giving name(s) data.","code":""},{"path":"/reference/test-scaleTest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Two Sample Scale Tests — scaleTest","text":"method=\"ansari\" performs Ansari--Bradley two--sample      test difference scale parameters. test returns      sizes series x y exact p value      together asymptotic limit. method=\"mood\", another test performs      two--sample test difference scale parameters. underlying      model two samples drawn f(x-l)      f((x-l)/s)/s, respectively, l common      location parameter s scale parameter. null      hypothesis s=1.","code":""},{"path":"/reference/test-scaleTest.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Two Sample Scale Tests — scaleTest","text":"test implementations selected R's ctest      package.","code":""},{"path":"/reference/test-scaleTest.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Two Sample Scale Tests — scaleTest","text":"Conover, W. J. (1971);     Practical nonparametric statistics,     New York: John Wiley & Sons. Lehmann E.L. (1986);      Testing Statistical Hypotheses,      John Wiley Sons, New York. Moore, D.S. (1986);     Tests chi-squared type,      : D'Agostino, R.B. Stephens, M.., eds.,      Goodness--Fit Techniques, Marcel Dekker, New York.","code":""},{"path":"/reference/test-scaleTest.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Two Sample Scale Tests — scaleTest","text":"R-core team hypothesis tests implemented R's      package ctest.","code":""},{"path":"/reference/test-scaleTest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Two Sample Scale Tests — scaleTest","text":"","code":"## rnorm -     # Generate Series:    x = rnorm(50)    y = rnorm(50)     ## scaleTest -    scaleTest(x, y, \"ansari\") #>  #> Title: #>  Ansari-Bradley Test for Scale #>  #> Test Results: #>   STATISTIC: #>     AB: 1212 #>   P VALUE: #>     Alternative Two-Sided        : 0.385  #>     Alternative Two-Sided | Exact: 0.3904  #>     Alternative      Less        : 0.8075  #>     Alternative      Less | Exact: 0.8086  #>     Alternative   Greater        : 0.1925  #>     Alternative   Greater | Exact: 0.1952  #>   CONFIDENCE INTERVAL: #>     Two-Sided | Asymptotic : 0.7992, 1.8253 #>     Two-Sided |      Exact : 0.7992, 1.8253 #>     Less      | Asymptotic : 0, 1.688 #>     Less      |      Exact : 0, 1.6881 #>     Greater   | Asymptotic : 0.8382, Inf #>     Greater   |      Exact : 0.8382, Inf #>  #> Description: #>  Mon Aug  8 08:09:51 2022 #>     scaleTest(x, y, \"mood\") #>  #> Title: #>  Mood Two-Sample Test of Scale #>  #> Test Results: #>   STATISTIC: #>     Z: 0.9283 #>   P VALUE: #>     Alternative Two-Sided: 0.3533  #>     Alternative      Less: 0.8234  #>     Alternative   Greater: 0.1766  #>  #> Description: #>  Mon Aug  8 08:09:51 2022 #>"},{"path":"/reference/test-varianceTest.html","id":null,"dir":"Reference","previous_headings":"","what":"Two Sample Variance Tests — varianceTest","title":"Two Sample Variance Tests — varianceTest","text":"Tests two series differ distributional     variance parameter.","code":""},{"path":"/reference/test-varianceTest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Two Sample Variance Tests — varianceTest","text":"","code":"varianceTest(x, y, method = c(\"varf\", \"bartlett\", \"fligner\"),      title = NULL, description = NULL)"},{"path":"/reference/test-varianceTest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Two Sample Variance Tests — varianceTest","text":"x, y numeric vectors data values. method character string naming test applied. title optional title string, specified inputs data          name deparsed. description optional description string, vector character strings.","code":""},{"path":"/reference/test-varianceTest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Two Sample Variance Tests — varianceTest","text":"contrast R's output report S3 objects class \"htest\"    different output report produced. classical tests presented     return S4 object class \"fHTEST\". object contains     following slots: @call function call. @data data specified input argument(s). @test list whose elements contain results statistical         test. information provided similar list object         class \"htest\". @title character string name test. can          overwritten specifying user defined input argument. @description character string optional user defined description.          default just current date test applied         returned. slot @test returns object class \"list\"    containing (least) following elements: statistic value(s) test statistic. p.value p-value(s) test. parameters numeric value vector parameters. estimate numeric value vector sample estimates. conf.int numeric two row vector matrix 95 method character string indicating type test performed. data.name character string giving name(s) data.","code":""},{"path":"/reference/test-varianceTest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Two Sample Variance Tests — varianceTest","text":"method=\"varf\" can used compare variances two      normal samples performing F test. null hypothesis      ratio variances populations      drawn equal one. method=\"bartlett\" performs Bartlett test      null hypothesis variances samples      . fact equal variances across samples also called      homogeneity variances. Note, Bartlett's test      sensitive departures normality. , samples      come non-normal distributions, Bartlett's test may simply      testing non-normality. Levene test (yet implemented)     alternative Bartlett test less sensitive      departures normality. method=\"fligner\" performs Fligner-Killeen test      null variances two samples .","code":""},{"path":"/reference/test-varianceTest.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Two Sample Variance Tests — varianceTest","text":"test implementations selected R's ctest      package.","code":""},{"path":"/reference/test-varianceTest.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Two Sample Variance Tests — varianceTest","text":"Conover, W. J. (1971);     Practical nonparametric statistics,     New York: John Wiley & Sons. Lehmann E.L. (1986);      Testing Statistical Hypotheses,      John Wiley Sons, New York.","code":""},{"path":"/reference/test-varianceTest.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Two Sample Variance Tests — varianceTest","text":"R-core team hypothesis tests implemented R's      package ctest.","code":""},{"path":"/reference/test-varianceTest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Two Sample Variance Tests — varianceTest","text":"","code":"## rnorm -     # Generate Series:    x = rnorm(50)    y = rnorm(50)     ## varianceTest -    varianceTest(x, y, \"varf\") #>  #> Title: #>  F Test of Variances #>  #> Test Results: #>   PARAMETER: #>     Hypothesized Ratio: 1 #>     Numerator   df: 49 #>     Denumerator df: 49 #>   SAMPLE ESTIMATES: #>     Ratio of Variances: 0.9813 #>   STATISTIC: #>     F: 0.9813 #>   P VALUE: #>     Alternative Two-Sided: 0.9476  #>     Alternative      Less: 0.4738  #>     Alternative   Greater: 0.5262  #>   CONFIDENCE INTERVAL: #>     Two-Sided: 0.5569, 1.7292 #>          Less: 0, 1.5772 #>       Greater: 0.6105, Inf #>  #> Description: #>  Mon Aug  8 08:09:51 2022 #>     varianceTest(x, y, \"bartlett\") #>  #> Title: #>  Bartlett Test for Homogeneity of Variances #>  #> Test Results: #>   STATISTIC: #>     Bartlett's Chi-squared: 0.0043 #>   P VALUE: #>     0.9476  #>  #> Description: #>  Mon Aug  8 08:09:51 2022 #>     varianceTest(x, y, \"fligner\") #>  #> Title: #>  Fligner-Killeen Test for Homogeneity of Variances #>  #> Test Results: #>   STATISTIC: #>     FK:med chi-squared: 0.0066 #>   P VALUE: #>     0.9354  #>  #> Description: #>  Mon Aug  8 08:09:51 2022 #>"},{"path":"/reference/utils-Heaviside.html","id":null,"dir":"Reference","previous_headings":"","what":"Heaviside and Related Functions — Heaviside","title":"Heaviside and Related Functions — Heaviside","text":"Functions compute Heaviside      related functions. include sign      function, delta function, boxcar      function, ramp function. functions :","code":""},{"path":"/reference/utils-Heaviside.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heaviside and Related Functions — Heaviside","text":"","code":"Heaviside(x, a = 0) Sign(x, a = 0) Delta(x, a = 0) Boxcar(x, a = 0.5) Ramp(x, a = 0)"},{"path":"/reference/utils-Heaviside.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heaviside and Related Functions — Heaviside","text":"numeric value, location break. x numeric vector.","code":""},{"path":"/reference/utils-Heaviside.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Heaviside and Related Functions — Heaviside","text":"Heaviside step function Heaviside 1 x>,      1/2 x=, 0 x<. Sign function Sign 1 x>,      0 x=, -1 x<. delta function Delta defined :      Delta(x) = d/dx H(x-). boxcar function Boxcar defined :      Boxcar(x) = H(x+) - H(x-). ramp function defined :      Ramp(x)= (x-)*H(x-).","code":""},{"path":"/reference/utils-Heaviside.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Heaviside and Related Functions — Heaviside","text":"returns function values selected function.","code":""},{"path":"/reference/utils-Heaviside.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Heaviside and Related Functions — Heaviside","text":"Heaviside function used implementation skew     Normal, Student-t, Generalized Error distributions, distributions     functions play important role modelling GARCH processes.","code":""},{"path":[]},{"path":"/reference/utils-Heaviside.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Heaviside and Related Functions — Heaviside","text":"Weisstein W. (2004);     http://mathworld.wolfram.com/HeavisideStepFunction.html,     Mathworld.","code":""},{"path":"/reference/utils-Heaviside.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Heaviside and Related Functions — Heaviside","text":"","code":"## Heaviside -    x = sort(round(c(-1, -0.5, 0, 0.5, 1, 5*rnorm(5)), 2))    h = Heaviside(x)      ## Sign -    s = Sign(x)     ## Delta -    d = Delta(x)     ## Boxcar -    Pi = Boxcar(x)  ## Ramp -     r = Ramp(x)    cbind(x = x, Step = h, Signum = s, Delta = d, Pi = Pi, R = r)         #>           x Step Signum Delta   Pi    R #>  [1,] -8.93  0.0     -1     0  0.0 0.00 #>  [2,] -1.84  0.0     -1     0  0.0 0.00 #>  [3,] -1.00  0.0     -1     0  0.0 0.00 #>  [4,] -0.72  0.0     -1     0  0.0 0.00 #>  [5,] -0.50  0.0     -1     0 -0.5 0.00 #>  [6,]  0.00  0.5      0   Inf -1.0 0.00 #>  [7,]  0.50  1.0      1     0 -0.5 0.50 #>  [8,]  0.87  1.0      1     0  0.0 0.87 #>  [9,]  1.00  1.0      1     0  0.0 1.00 #> [10,]  2.77  1.0      1     0  0.0 2.77"},{"path":"/reference/utils-characterTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of Characters — characterTable","title":"Table of Characters — characterTable","text":"Displays table numerical equivalents Latin characters.","code":""},{"path":"/reference/utils-characterTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of Characters — characterTable","text":"","code":"characterTable(font = 1, cex = 0.7)"},{"path":"/reference/utils-characterTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Table of Characters — characterTable","text":"cex numeric value, determines character size, default          size 0.7. font integer value, number font, default font          number 1.","code":""},{"path":"/reference/utils-characterTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Table of Characters — characterTable","text":"characterTable    displays table characters requested font.     character line \"xy\" column \"z\" table      code \"\\xyz\", e.g cat(\"\\126\") prints: V font      number 1. codes can used characters.","code":""},{"path":[]},{"path":"/reference/utils-characterTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Table of Characters — characterTable","text":"","code":"## Character Table for Font 2: # characterTable(font = 1)"},{"path":"/reference/utils-colIds.html","id":null,"dir":"Reference","previous_headings":"","what":"Set and Retrieve Column/Row Names — Ids","title":"Set and Retrieve Column/Row Names — Ids","text":"Sets retrieves column row names. functions     compatibility SPlus.","code":""},{"path":"/reference/utils-colIds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set and Retrieve Column/Row Names — Ids","text":"","code":"colIds(x, ...) rowIds(x, ...)"},{"path":"/reference/utils-colIds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set and Retrieve Column/Row Names — Ids","text":"x numeric matrix. ... arguments passed.","code":""},{"path":"/reference/utils-colIds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set and Retrieve Column/Row Names — Ids","text":"Usualli R functions colnames, rownames      used retrieve set names matrices. functions      rowIds colIds, S-Plus like synonyms.","code":""},{"path":"/reference/utils-colIds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set and Retrieve Column/Row Names — Ids","text":"","code":"## pascal -    # Create Pascal Matrix:    P = pascal(3)    P #>      [,1] [,2] [,3] #> [1,]    1    1    1 #> [2,]    1    2    3 #> [3,]    1    3    6   ## rownames -      rownames(P) <- letters[1:3]    P    #>   [,1] [,2] [,3] #> a    1    1    1 #> b    1    2    3 #> c    1    3    6     ## colIds<- -      colIds(P) <- as.character(1:3)    P                             #>   1 2 3 #> a 1 1 1 #> b 1 2 3 #> c 1 3 6"},{"path":"/reference/utils-colorLocator.html","id":null,"dir":"Reference","previous_headings":"","what":"Color Selection — colorLocator","title":"Color Selection — colorLocator","text":"Displays R's 657 named colors selection     returns optionally R's color names.","code":""},{"path":"/reference/utils-colorLocator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Color Selection — colorLocator","text":"","code":"colorLocator(locator = FALSE, cex.axis = 0.7) colorMatrix()"},{"path":"/reference/utils-colorLocator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Color Selection — colorLocator","text":"locator logical, true, locator used     interactive selection color names, default FALSE. cex.axis size axis labels.","code":""},{"path":"/reference/utils-colorLocator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Color Selection — colorLocator","text":"Color Locator: colorsLocator() generates plot R colors , locator true, returns matrix graph coordinates     names colors selected. colorsMatrix() quietly returns matrix names.","code":""},{"path":"/reference/utils-colorLocator.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Color Selection — colorLocator","text":"Color Locator: colorLocator function plots R's 657 named colors.      locator=TRUE can interactively point click     select colors want names. end selection, right     click mouse select 'Stop', R returns selected     color names. functions used wrappers functions provided     Tomas Aragon contributed R package. epitools.","code":""},{"path":[]},{"path":"/reference/utils-colorLocator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Color Selection — colorLocator","text":"","code":"colorLocator()"},{"path":"/reference/utils-colorPalette.html","id":null,"dir":"Reference","previous_headings":"","what":"Color Palettes — colorPalette","title":"Color Palettes — colorPalette","text":"Functions create color palettes. functions :","code":""},{"path":"/reference/utils-colorPalette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Color Palettes — colorPalette","text":"","code":"rainbowPalette(n = 64, ...)  heatPalette(n = 64, ...)  terrainPalette(n = 64, ...)  topoPalette(n = 64, ...)  cmPalette(n = 64, ...)   greyPalette(n = 64, ...) timPalette(n = 64)  rampPalette(n, name = c(\"blue2red\", \"green2red\", \"blue2green\",          \"purple2green\", \"blue2yellow\", \"cyan2magenta\"))      seqPalette(n, name = c(     \"Blues\", \"BuGn\", \"BuPu\", \"GnBu\", \"Greens\", \"Greys\", \"Oranges\",      \"OrRd\", \"PuBu\", \"PuBuGn\", \"PuRd\", \"Purples\", \"RdPu\", \"Reds\",      \"YlGn\", \"YlGnBu\", \"YlOrBr\", \"YlOrRd\")) divPalette(n, name = c(     \"BrBG\", \"PiYG\", \"PRGn\", \"PuOr\", \"RdBu\", \"RdGy\", \"RdYlBu\", \"RdYlGn\",      \"Spectral\"))    qualiPalette(n, name = c(     \"Accent\", \"Dark2\", \"Paired\", \"Pastel1\", \"Pastel2\", \"Set1\", \"Set2\",      \"Set3\"))       focusPalette(n, name = c(\"redfocus\", \"greenfocus\", \"bluefocus\")) monoPalette(n, name = c(\"redmono\", \"greenmono\", \"bluemono\"))"},{"path":"/reference/utils-colorPalette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Color Palettes — colorPalette","text":"n integer, giving number greys colors constructed. name character string, name color set. ... arguments passed, see details section","code":""},{"path":"/reference/utils-colorPalette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Color Palettes — colorPalette","text":"returns character string color strings.","code":""},{"path":"/reference/utils-colorPalette.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Color Palettes — colorPalette","text":"Rmetrics' color sets named fooPalette      prefix foo denotes name underlying color set. R's Contiguous Color Palettes:     Palettes n contiguous colors implemented     grDevices package. conform Rmetrics' naming     convention color palettes build wrapper around     underlying functions. rainbowPalette,       heatPalette, terrainPalette, topoPalette,       cmPalette.      Conceptually, functions actually use (parts ) line      cut 3-dimensional color space, parametrized function     hsv(h,s,v,gamma), gamma=1 fooPalette      function, hence, equispaced hues RGB space tend cluster      red, green blue primaries. applications contouring      require palette colors wrap around give final      color close starting one. pass additional arguments     underlying functions refer consult help(rainbow).     rainbow, parameters start end can used specify      particular subranges hues. Synonyme function calls      rainbow,  heat.colors,terrain.colors,      topo.colors, cm.colors. R's Gamma-Corrected Gray Palette:     function grayPalette chooses series n      gamma-corrected gray levels. range gray levels can     optionally monitored ... arguments,     details help(gray.colors), synonyme function call     grDevices package. Tim's Matlab like Color Palette:     function timPalette creates color set ranging blue      red, passes colors cyan, yellow, orange.     comes Matlab software, originally used fluid dynamics     simulations. function copy R's contributed package     fields spline interpolation n=64 color points. Color Ramp Palettes:     function rampPalette creates several color ramps.      function implemented Tim Keitt's contributed R package      colorRamps.      Supported argument name following color     ramps: \"blue2red\", \"green2red\", \"blue2green\",      \"purple2green\", \"blue2yellow\", \"cyan2magenta\". Color Brewer Palettes:     functions seqPalette, divPalette,     qualiPalette create color sets according R's      contributed RColorBrewer package. first letter     function name denotes type color set: \"s\"     sequential palettes, 'd\" diverging palettes, \"q\"     qualitative palettes.     Sequential palettes suited ordered data progress       low high. Lightness steps dominate look schemes,      light colors low data values dark colors high data      values. sequential palettes names :     Blues, BuGn, BuPu, GnBu, Greens, Greys, Oranges, OrRd, PuBu,     PuBuGn, PuRd, Purples, RdPu, Reds, YlGn, YlGnBu, YlOrBr, YlOrRd.     Diverging palettes put equal emphasis mid-range critical values      extremes ends data range. critical class      break middle legend emphasized light colors      low high extremes emphasized dark colors      contrasting hues.     diverging palettes names :     BrBG, PiYG, PRGn, PuOr, RdBu, RdGy, RdYlBu, RdYlGn, Spectral.     Qualitative palettes imply magnitude differences      legend classes, hues used create primary visual      differences classes. Qualitative schemes best suited      representing nominal categorical data.     qualitative palettes names :     Accent, Dark2, Paired, Pastel1, Pastel2, Set1, Set2, Set3.          contrast original color brewer palettes, palettes     created spline interpolation color variation     different values, .e sequential palettes     9 values, diverging palettes 11 values,     qualitative palettes 8 12 values     dependeing color set. Graph Color Palettes:        function perfanPalette creates color sets inspired      R's cotributed package Performance Analytics.      color palettes designed create readable,      comparable line bar graphs specific objectives.     Focused Color Palettes: Color sets designed provide focus      data graphed first element. palette best used      clearly important data set viewer focus ,      remaining data secondary, tertiary, etc. Later elements      graphed diminishing values gray.     Monchrome Color Palettes: include color sets monochrome      color displays.","code":""},{"path":"/reference/utils-colorPalette.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Color Palettes — colorPalette","text":"palettes wrapper functions provided several contributed      R packages. include: Cynthia Brewer Mark Harrower brewer palettes,      Peter Carl Brian G. Peterson \"PerformanceAnalytics\" package,      Tim Keitt \"colorRamps\" package,      Ross Ihaka \"colorspace\" package,      Tomas Aragon \"epitools\" package,      Doug Nychka \"fields\" package,      Erich Neuwirth \"RColorBrewer\" package. Additional undocumented hidden functions:","code":""},{"path":"/reference/utils-colorPalette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Color Palettes — colorPalette","text":"","code":"## GreyPalette:    greyPalette() #>  [1] \"#4D4D4D\" \"#525252\" \"#575757\" \"#5C5C5C\" \"#606060\" \"#646464\" \"#686868\" #>  [8] \"#6C6C6C\" \"#707070\" \"#737373\" \"#777777\" \"#7A7A7A\" \"#7D7D7D\" \"#808080\" #> [15] \"#838383\" \"#868686\" \"#898989\" \"#8C8C8C\" \"#8E8E8E\" \"#919191\" \"#949494\" #> [22] \"#969696\" \"#999999\" \"#9B9B9B\" \"#9D9D9D\" \"#A0A0A0\" \"#A2A2A2\" \"#A4A4A4\" #> [29] \"#A7A7A7\" \"#A9A9A9\" \"#ABABAB\" \"#ADADAD\" \"#AFAFAF\" \"#B1B1B1\" \"#B3B3B3\" #> [36] \"#B5B5B5\" \"#B7B7B7\" \"#B9B9B9\" \"#BBBBBB\" \"#BDBDBD\" \"#BFBFBF\" \"#C1C1C1\" #> [43] \"#C3C3C3\" \"#C5C5C5\" \"#C6C6C6\" \"#C8C8C8\" \"#CACACA\" \"#CCCCCC\" \"#CDCDCD\" #> [50] \"#CFCFCF\" \"#D1D1D1\" \"#D2D2D2\" \"#D4D4D4\" \"#D6D6D6\" \"#D7D7D7\" \"#D9D9D9\" #> [57] \"#DBDBDB\" \"#DCDCDC\" \"#DEDEDE\" \"#DFDFDF\" \"#E1E1E1\" \"#E2E2E2\" \"#E4E4E4\" #> [64] \"#E6E6E6\""},{"path":"/reference/utils-colorTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of Colors — colorTable","title":"Table of Colors — colorTable","text":"Displays Table color codes plots colors .","code":""},{"path":"/reference/utils-colorTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of Colors — colorTable","text":"","code":"colorTable(cex = 0.7)"},{"path":"/reference/utils-colorTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Table of Colors — colorTable","text":"cex numeric value, determines character size         color plot, default size 0.7.","code":""},{"path":"/reference/utils-colorTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Table of Colors — colorTable","text":"colorTable    returns table plot plot colors associated color numbers.","code":""},{"path":[]},{"path":"/reference/utils-colorTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Table of Colors — colorTable","text":"","code":"## Color Table:    colorTable()"},{"path":"/reference/utils-decor.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions for decorating plots — decor","title":"Functions for decorating plots — decor","text":"Functions decorating plots.","code":""},{"path":"/reference/utils-decor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions for decorating plots — decor","text":"","code":"decor()  hgrid(ny = NULL, ...)  vgrid(nx = NULL, ...)   boxL(col = \"white\")  box_(col = c(\"white\", \"black\"))   copyright()"},{"path":"/reference/utils-decor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions for decorating plots — decor","text":"col color background, \"black\" foreground     \"white\" lines box. nx, ny number cells grid x y direction. NULL,      per default, grid aligns tick marks      corresponding default axis (.e., tick marks computed axTicks). ... additional arguments passed grid() function.","code":""},{"path":"/reference/utils-decor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Functions for decorating plots — decor","text":"plot decorating functions :  decor simple decoration function, equivalent hgrid() followed       boxL(), hgrid creates horizontal grid lines, vgrid creates vertical grid lines, boxL creates L-shaped box, box_ creates bottom line box, copyright adds Rmetrics copyright plot.","code":""},{"path":"/reference/utils-decor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Functions for decorating plots — decor","text":"","code":"## Test Plot Function:    plot(x = rnorm(100), type = \"l\", col = \"red\",       xlab = \"\", ylab = \"Variates\", las = 1)    title(\"Normal Deviates\", adj = 0)    hgrid()    boxL()    copyright()"},{"path":"/reference/utils-getS4.html","id":null,"dir":"Reference","previous_headings":"","what":"General S4 Class Extractor Functions — getS4","title":"General S4 Class Extractor Functions — getS4","text":"collection description functions extract     slots S4 class objects. extractor functions :  Since R version 2.14.0, generic getCall() part R;   earlier versions, provided simple version S4 objects.","code":""},{"path":"/reference/utils-getS4.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"General S4 Class Extractor Functions — getS4","text":"","code":"<!-- % getCall(x, \\dots) --> getModel(object) getTitle(object) getDescription(object)  getSlot(object, slotName)  getArgs(f, signature)"},{"path":"/reference/utils-getS4.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"General S4 Class Extractor Functions — getS4","text":"f generic function character-string name one. object object class S4. signature signature classes match arguments f slotName character string, name slot extracted     S4 object.","code":""},{"path":"/reference/utils-getS4.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"General S4 Class Extractor Functions — getS4","text":"getModelgetTitlegetDescriptiongetSlot    return content slot. getArgs    returns names arguments.","code":""},{"path":"/reference/utils-getS4.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"General S4 Class Extractor Functions — getS4","text":"","code":"## Example S4 Representation:    # Hyothesis Testing with Control Settings    setClass(\"hypTest\",      representation(        call = \"call\",        data = \"numeric\",        test = \"list\",        description = \"character\")    )  ## Shapiro Wilk Normaility Test    swTest = function(x, description = \"\") {      ans = shapiro.test(x)      class(ans) = \"list\"      new(\"hypTest\",        call = match.call(),        data = x,        test = ans,        description = description)    }    test = swTest(x = rnorm(500), description = \"500 RVs\")  ## Extractor Functions:    isS4(test) #> [1] TRUE    getCall(test) #> swTest(x = rnorm(500), description = \"500 RVs\")    getDescription(test) #> [1] \"500 RVs\"  ## get arguments args(returns) #> function (x, ...)  #> NULL getArgs(returns) #> returns,: #> function (x, method = c(\"continuous\", \"discrete\", \"compound\",  #>     \"simple\"), percentage = FALSE, ...)  #> NULL getArgs(\"returns\") #> returns,: #> function (x, method = c(\"continuous\", \"discrete\", \"compound\",  #>     \"simple\"), percentage = FALSE, ...)  #> NULL getArgs(returns, \"timeSeries\") #> returns,timeSeries: #> function (x, method = c(\"continuous\", \"discrete\", \"compound\",  #>     \"simple\"), percentage = FALSE, na.rm = TRUE, trim = TRUE,  #>     ...)  #> NULL getArgs(\"returns\", \"timeSeries\") #> returns,timeSeries: #> function (x, method = c(\"continuous\", \"discrete\", \"compound\",  #>     \"simple\"), percentage = FALSE, na.rm = TRUE, trim = TRUE,  #>     ...)  #> NULL"},{"path":"/reference/utils-hessian.html","id":null,"dir":"Reference","previous_headings":"","what":"Two sided approximated Hessian — tsHessian","title":"Two sided approximated Hessian — tsHessian","text":"Computes two sided (TS) approximated Hessian.","code":""},{"path":"/reference/utils-hessian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Two sided approximated Hessian — tsHessian","text":"","code":"tsHessian(x, fun, ...)"},{"path":"/reference/utils-hessian.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Two sided approximated Hessian — tsHessian","text":"x argument passed fun. fun function. ... additional parameters passed fun.","code":""},{"path":"/reference/utils-hessian.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Two sided approximated Hessian — tsHessian","text":"function borrowed Kevin Sheppard's Matlab garch toolbox   implemented Alexios Ghalanos rgarch package","code":""},{"path":"/reference/utils-interactivePlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Interactive Plot Utility — interactivePlot","title":"Interactive Plot Utility — interactivePlot","text":"Plots emphasis interactive plots.","code":""},{"path":"/reference/utils-interactivePlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interactive Plot Utility — interactivePlot","text":"","code":"interactivePlot(x, choices = paste(\"Plot\", 1:9),      plotFUN = paste(\"plot.\", 1:9, sep = \"\"), which = \"all\", ...)"},{"path":"/reference/utils-interactivePlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interactive Plot Utility — interactivePlot","text":"choices vector character strings         choice menu. Default \"Plot 1\" ... \"Plot 9\"         allowing 9 plots maximum. plotFUN vector character strings naming         plot functions. Default \"plot.1\" ... \"plot.9\"         allowing 9 plots maximum. plot selection, graph displayed? \"\"         character string named \"ask\" user interactively asked          plot, logical vector length N, plots          set TRUE displayed, character string         named \"\" plots displayed. x object plotted. ... additional arguments passed FUN plot function.","code":""},{"path":"/reference/utils-interactivePlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interactive Plot Utility — interactivePlot","text":"","code":"## Test Plot Function:    testPlot = function(x, which = \"all\", ...) {         # Plot Function and Addons:      plot.1 <<- function(x, ...) plot(x, ...)            plot.2 <<- function(x, ...) acf(x, ...)      plot.3 <<- function(x, ...) hist(x, ...)            plot.4 <<- function(x, ...) qqnorm(x, ...)      # Plot:      interactivePlot(x,        choices = c(\"Series Plot\", \"ACF\", \"Histogram\", \"QQ Plot\"),        plotFUN = c(\"plot.1\", \"plot.2\", \"plot.3\", \"plot.4\"),        which = which, ...)             # Return Value:      invisible()    }      # Plot:    par(mfrow = c(2, 2), cex = 0.7)    testPlot(rnorm(500))            # Try:    # par(mfrow = c(1,1))    # testPlot(rnorm(500), which = \"ask\")"},{"path":"/reference/utils-listDescription.html","id":null,"dir":"Reference","previous_headings":"","what":"Description File Listing — listDescription","title":"Description File Listing — listDescription","text":"Lists content description file.","code":""},{"path":"/reference/utils-listDescription.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Description File Listing — listDescription","text":"","code":"listDescription(package, character.only = FALSE)"},{"path":"/reference/utils-listDescription.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Description File Listing — listDescription","text":"package literal character character string denoting name         package listed. character.logical indicating whether 'package' can         assumed character strings.","code":""},{"path":"/reference/utils-listDescription.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Description File Listing — listDescription","text":"prints description file.","code":""},{"path":[]},{"path":"/reference/utils-listDescription.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Description File Listing — listDescription","text":"","code":"## listDescription -    listDescription(\"fBasics\") #>  #>  fBasics Description: #>  #>   Package:       fBasics #>   Title:         Rmetrics - Markets and Basic Statistics #>   Date:          2022-09-08 #>   Version:       4021.92 #>   Authors@R:     c(person(\"Diethelm\", \"Wuertz\", role=\"aut\", comment = #>                    \"original code\") , person(\"Tobias\", \"Setz\", role = #>                    c(\"aut\"), email = \"tobias.setz@live.com\") , #>                    person(\"Yohan\", \"Chalabi\", role = \"aut\") , #>                    person(\"Martin\",\"Maechler\", role=\"ctb\", #>                    email=\"maechler@stat.math.ethz.ch\", comment = c(ORCID = #>                    \"0000-0002-8685-9910\")) , person(\"CRAN Team\", role = #>                    \"ctb\") , person(given = c(\"Georgi\", \"N.\"), family = #>                    \"Boshnakov\", role = c(\"cre\", \"ctb\"), email = #>                    \"georgi.boshnakov@manchester.ac.uk\") ) #>   Description:   Provides a collection of functions to explore and to #>                    investigate basic properties of financial returns and #>                    related quantities.  The covered fields include #>                    techniques of explorative data analysis and the #>                    investigation of distributional properties, including #>                    parameter estimation and hypothesis testing. Even more #>                    there are several utility functions for data handling #>                    and management. #>   Depends:       R (>= 2.15.1) #>   Imports:       timeDate, timeSeries, stats, grDevices, graphics, #>                    methods, utils, MASS, spatial, gss, stabledist #>   Suggests:      interp, RUnit, tcltk #>   LazyData:      yes #>   License:       GPL (>= 2) #>   Encoding:      UTF-8 #>   URL:           https://r-forge.r-project.org/scm/viewvc.php/pkg/fBasics/?root=rmetrics #>                    )devel), https://www.rmetrics.org #>   BugReports:    https://r-forge.r-project.org/projects/rmetrics #>   Author:        Diethelm Wuertz [aut] (original code), Tobias Setz #>                    [aut], Yohan Chalabi [aut], Martin Maechler [ctb] #>                    (<https://orcid.org/0000-0002-8685-9910>), CRAN Team #>                    [ctb], Georgi N. Boshnakov [cre, ctb] #>   Maintainer:    Georgi N. Boshnakov <georgi.boshnakov@manchester.ac.uk> #>   Built:         R 4.0.3; x86_64-pc-linux-gnu; 2022-08-08 07:09:03 UTC; #>                    unix"},{"path":"/reference/utils-listFunctions.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions Listing — listFunctions","title":"Functions Listing — listFunctions","text":"Lists counts functions packages.","code":""},{"path":"/reference/utils-listFunctions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions Listing — listFunctions","text":"","code":"listFunctions(package, character.only = FALSE) countFunctions(package, character.only = FALSE)"},{"path":"/reference/utils-listFunctions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions Listing — listFunctions","text":"package literal character character string denoting name         package listed. character.logical indicating whether 'package' can         assumed character strings.","code":""},{"path":"/reference/utils-listFunctions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions Listing — listFunctions","text":"prints list counts functions.","code":""},{"path":[]},{"path":"/reference/utils-listFunctions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Functions Listing — listFunctions","text":"","code":"## listFunctions -    listFunctions(\"fBasics\") #>   [1] \".acfPlot\"             \".contourPlot\"         \".distCheck\"           #>   [4] \".firePlot\"            \".mrlPlot\"             \".pacfPlot\"            #>   [7] \".perspPlot\"           \".plot\"                \".predict\"             #>  [10] \".qStableFit\"          \".residualsPlot\"       \".responsesPlot\"       #>  [13] \".sliderMenu\"          \".unirootNA\"           \"Boxcar\"               #>  [16] \"Delta\"                \"Heaviside\"            \"Ramp\"                 #>  [19] \"Sign\"                 \"Triang\"               \"acfPlot\"              #>  [22] \"adTest\"               \"akimaInterp\"          \"akimaInterpp\"         #>  [25] \"as.timeSeries\"        \"basicStats\"           \"boxL\"                 #>  [28] \"boxPercentilePlot\"    \"boxPlot\"              \"box_\"                 #>  [31] \"characterTable\"       \"cmPalette\"            \"colIds\"               #>  [34] \"colIds<-\"             \"colVec\"               \"colorLocator\"         #>  [37] \"colorMatrix\"          \"colorTable\"           \"copyright\"            #>  [40] \"correlationTest\"      \"countFunctions\"       \"cumulatedPlot\"        #>  [43] \"cvmTest\"              \"dagoTest\"             \"decor\"                #>  [46] \"densityPlot\"          \"dgh\"                  \"dght\"                 #>  [49] \"dgld\"                 \"dhyp\"                 \"distCheck\"            #>  [52] \"divPalette\"           \"dmaxdd\"               \"dnig\"                 #>  [55] \"drawdownPlot\"         \"dsgh\"                 \"dsght\"                #>  [58] \"dsnig\"                \"dssd\"                 \"focusPalette\"         #>  [61] \"get.lcgseed\"          \"getArgs\"              \"getDescription\"       #>  [64] \"getModel\"             \"getSlot\"              \"getTitle\"             #>  [67] \"ghFit\"                \"ghIQR\"                \"ghKURT\"               #>  [70] \"ghKurt\"               \"ghMED\"                \"ghMean\"               #>  [73] \"ghMode\"               \"ghMoments\"            \"ghSKEW\"               #>  [76] \"ghSkew\"               \"ghSlider\"             \"ghVar\"                #>  [79] \"ghtFit\"               \"ghtIQR\"               \"ghtKURT\"              #>  [82] \"ghtKurt\"              \"ghtMED\"               \"ghtMean\"              #>  [85] \"ghtMode\"              \"ghtMoments\"           \"ghtSKEW\"              #>  [88] \"ghtSkew\"              \"ghtVar\"               \"gldFit\"               #>  [91] \"gldIQR\"               \"gldKURT\"              \"gldMED\"               #>  [94] \"gldMode\"              \"gldSKEW\"              \"greyPalette\"          #>  [97] \"gridVector\"           \"heatPalette\"          \"hgrid\"                #> [100] \"hilbert\"              \"histPlot\"             \"hypFit\"               #> [103] \"hypIQR\"               \"hypKURT\"              \"hypKurt\"              #> [106] \"hypMED\"               \"hypMean\"              \"hypMode\"              #> [109] \"hypMoments\"           \"hypSKEW\"              \"hypSkew\"              #> [112] \"hypSlider\"            \"hypVar\"               \"interactivePlot\"      #> [115] \"inv\"                  \"isPositiveDefinite\"   \"jarqueberaTest\"       #> [118] \"jbTest\"               \"kendallTest\"          \"krigeInterp\"          #> [121] \"kron\"                 \"ks2Test\"              \"ksnormTest\"           #> [124] \"kurtosis\"             \"lacfPlot\"             \"lillieTest\"           #> [127] \"linearInterp\"         \"linearInterpp\"        \"listDescription\"      #> [130] \"listFunctions\"        \"listIndex\"            \"locationTest\"         #> [133] \"logDensityPlot\"       \"makePositiveDefinite\" \"maxddStats\"           #> [136] \"monoPalette\"          \"nFit\"                 \"nigFit\"               #> [139] \"nigIQR\"               \"nigKURT\"              \"nigKurt\"              #> [142] \"nigMED\"               \"nigMean\"              \"nigMode\"              #> [145] \"nigMoments\"           \"nigSKEW\"              \"nigShapeTriangle\"     #> [148] \"nigSkew\"              \"nigSlider\"            \"nigVar\"               #> [151] \"norm2\"                \"normIQR\"              \"normKURT\"             #> [154] \"normMED\"              \"normSKEW\"             \"normalTest\"           #> [157] \"pacfPlot\"             \"pascal\"               \"pchiTest\"             #> [160] \"pdl\"                  \"pearsonTest\"          \"pgh\"                  #> [163] \"pght\"                 \"pgld\"                 \"phyp\"                 #> [166] \"pmaxdd\"               \"pnig\"                 \"psgh\"                 #> [169] \"psght\"                \"psnig\"                \"pssd\"                 #> [172] \"qgh\"                  \"qght\"                 \"qgld\"                 #> [175] \"qhyp\"                 \"qnig\"                 \"qqghtPlot\"            #> [178] \"qqgldPlot\"            \"qqnigPlot\"            \"qqnormPlot\"           #> [181] \"qsgh\"                 \"qsght\"                \"qsnig\"                #> [184] \"qssd\"                 \"qualiPalette\"         \"rainbowPalette\"       #> [187] \"rampPalette\"          \"returnPlot\"           \"returnSeriesGUI\"      #> [190] \"returns\"              \"rgh\"                  \"rght\"                 #> [193] \"rgld\"                 \"rhyp\"                 \"rk\"                   #> [196] \"rmaxdd\"               \"rnig\"                 \"rnorm.lcg\"            #> [199] \"rowAvgs\"              \"rowIds\"               \"rowIds<-\"             #> [202] \"rowKurtosis\"          \"rowMaxs\"              \"rowMins\"              #> [205] \"rowProds\"             \"rowQuantiles\"         \"rowSds\"               #> [208] \"rowSkewness\"          \"rowStats\"             \"rowStdevs\"            #> [211] \"rowVars\"              \"rowVec\"               \"rsgh\"                 #> [214] \"rsght\"                \"rsnig\"                \"rssd\"                 #> [217] \"rt.lcg\"               \"runif.lcg\"            \"sampleIQR\"            #> [220] \"sampleKURT\"           \"sampleLmoments\"       \"sampleMED\"            #> [223] \"sampleSKEW\"           \"scaleTest\"            \"scalinglawPlot\"       #> [226] \"seqPalette\"           \"seriesPlot\"           \"set.lcgseed\"          #> [229] \"sfTest\"               \"sghFit\"               \"shapiroTest\"          #> [232] \"show\"                 \"skewness\"             \"snigFit\"              #> [235] \"spearmanTest\"         \"ssdFit\"               \"stableFit\"            #> [238] \"stableSlider\"         \"stdev\"                \"symbolTable\"          #> [241] \"tFit\"                 \"teffectPlot\"          \"termPlot\"             #> [244] \"terrainPalette\"       \"timPalette\"           \"timeSeries\"           #> [247] \"topoPalette\"          \"tr\"                   \"triang\"               #> [250] \"tsHessian\"            \"tslag\"                \"varianceTest\"         #> [253] \"vec\"                  \"vech\"                 \"vgrid\"                #> [256] \"volatility\"               ## countFunctions -    countFunctions(\"fBasics\") #> fBasics  #>     256"},{"path":"/reference/utils-listIndex.html","id":null,"dir":"Reference","previous_headings":"","what":"Index File Listing — listIndex","title":"Index File Listing — listIndex","text":"Lists content index file.","code":""},{"path":"/reference/utils-listIndex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Index File Listing — listIndex","text":"","code":"listIndex(package, character.only = FALSE)"},{"path":"/reference/utils-listIndex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Index File Listing — listIndex","text":"package literal character string character string denoting name         package listed. character.logical indicating whether 'package' can         assumed character strings.","code":""},{"path":"/reference/utils-listIndex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Index File Listing — listIndex","text":"prints index file.","code":""},{"path":[]},{"path":"/reference/utils-listIndex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Index File Listing — listIndex","text":"","code":"## listIndex -    listIndex(\"fBasics\") #>  #>  fBasics Index: #>  #>   DistributionFits        Parameter Fit of a Distribution #>   Heaviside               Heaviside and Related Functions #>   Ids                     Set and Retrieve Column/Row Names #>   NormalityTests          Normality Tests #>   acfPlot                 Autocorrelation Function Plots #>   akimaInterp             Bivariate Spline Interpolation #>   baseMethods             Generic Functions Extensions #>   basicStats              Basic Time Series Statistics #>   boxPlot                 Time Series Box Plots #>   characterTable          Table of Characters #>   colVec                  Column and Row Vectors #>   colorLocator            Color Selection #>   colorPalette            Color Palettes #>   colorTable              Table of Colors #>   correlationTest         Correlation Tests #>   decor                   Functions for decorating plots #>   dght                    Generalized Hyperbolic Student-t #>   distCheck               Distribution Check #>   fBasics-deprecated      Deprecated Functions in Package fBasics #>   fBasics-package         Portfolio Modelling, Optimization and #>                           Backtesting #>   fBasicsData             fBasics Data Sets #>   fHTEST                  Tests Class Representation and Utilities #>   getS4                   General S4 Class Extractor Functions #>   gh                      Generalized Hyperbolic Distribution #>   ghFit                   GH Distribution Fit #>   ghMode                  Generalized Hyperbolic Mode #>   ghMoments               Generalized Hyperbolic Distribution Moments #>   ghRobMoments            Robust Moments for the GH #>   ghSlider                Generalized Hyperbolic Distribution Slider #>   ghtFit                  GHT Distribution Fit #>   ghtMode                 Generalized Hyperbolic Student-t Mode #>   ghtMoments              Generalized Hyperbolic Student-t Moments #>   ghtRobMoments           Robust Moments for the GHT #>   gld                     Generalized Lambda Distribution #>   gldFit                  GH Distribution Fit #>   gldMode                 Generalized Lambda Distribution Mode #>   gldRobMoments           Robust Moments for the GLD #>   gridVector              Grid Vector Coordinates #>   hilbert                 Hilbert Matrix #>   histPlot                Histogram and Density Plots #>   hyp                     Hyperbolic Distribution #>   hypFit                  Fit of a Hyperbolic Distribution #>   hypMode                 Hyperbolic Mode #>   hypMoments              Hyperbolic Distribution Moments #>   hypRobMoments           Robust Moments for the HYP #>   hypSlider               Hyperbolic Distribution Slider #>   interactivePlot         Interactive Plot Utility #>   inv                     The Inverse of a Matrix #>   krigeInterp             Bivariate Krige Interpolation #>   kron                    Kronecker Product #>   ks2Test                 Two Sample Kolmogorov-Smirnov Test #>   lcg                     Generator for Portable Random Innovations #>   linearInterp            Bivariate Linear Interpolation #>   listDescription         Description File Listing #>   listFunctions           Functions Listing #>   listIndex               Index File Listing #>   locationTest            Two Sample Location Tests #>   maxdd                   Drawdown Statistics #>   nig                     Normal Inverse Gaussian Distribution #>   nigFit                  Fit of a Normal Inverse Gaussian Distribution #>   nigMode                 Normal Inverse Gaussian Mode #>   nigMoments              Moments for the Normal Inverse Gaussian #>   nigRobMoments           Robust Moments for the NIG #>   nigShapeTriangle        NIG Shape Triangle #>   nigSlider               nigerbolic Distribution Slider #>   norm2                   Matrix Norm #>   normRobMoments          Robust Moments for the NORM #>   pascal                  Pascal Matrix #>   pdl                     Polynomial Distributed Lags #>   positiveDefinite        Positive Definite Matrixes #>   print                   Print Control #>   qqnormPlot              Quantile-Quantile Plots #>   returnSeriesGUI         Return Series Plots #>   rk                      The Rank of a Matrix #>   rowStats                Row Statistics #>   sampleLMoments          Sample L-Moments #>   sampleRobMoments        Robust Moments for the GLD #>   scaleTest               Two Sample Scale Tests #>   scalinglawPlot          Scaling Law Bahaviour #>   seriesPlot              Financial Time Series Plots #>   sgh                     Standardized Generalized Hyperbolic #>                           Distribution #>   sghFit                  Standardized GH Distribution Fit #>   sght                    Standardized generalized hyperbolic Student-t #>                           Distribution #>   snig                    Standardized Normal Inverse Gaussian #>                           Distribution #>   snigFit                 Fit of a Standardized NIG Distribution #>   ssd                     Spline Smoothed Distribution #>   ssdFit                  Fit Density Using Smoothing Splines #>   stableSlider            Slider GUI for Stable Distribution #>   symbolTable             Table of Symbols #>   tr                      Trace of a Matrix #>   triang                  Upper and Lower Triangular Matrixes #>   tsHessian               Two sided approximated Hessian #>   tslag                   Lagged or Leading Vector/Matrix #>   varianceTest            Two Sample Variance Tests #>   vec                     Stacking Vectors and Matrixes"},{"path":"/reference/utils-printControl.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Control — print","title":"Print Control — print","text":"Unlists prints control object.","code":""},{"path":"/reference/utils-printControl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Control — print","text":"","code":"# S3 method for control print(x, ...)"},{"path":"/reference/utils-printControl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Control — print","text":"x object printed. ... arguments passed.","code":""},{"path":"/reference/utils-printControl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Control — print","text":"print.control    prints control.","code":""},{"path":"/reference/utils-printControl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Control — print","text":"","code":"## print -    control = list(n = 211, seed = 54, name = \"generator\")    print(control)  #> $n #> [1] 211 #>  #> $seed #> [1] 54 #>  #> $name #> [1] \"generator\" #>     class(control) = \"control\"    print(control)   #>           n        seed        name  #>       \"211\"        \"54\" \"generator\""},{"path":"/reference/utils-randLCG.html","id":null,"dir":"Reference","previous_headings":"","what":"Generator for Portable Random Innovations — lcg","title":"Generator for Portable Random Innovations — lcg","text":"Functions generate portable random innovations.      functions run R S-Plus generate      sequence random numbers. Supported      uniform, normal Student-t distributed      random numbers. functions :","code":""},{"path":"/reference/utils-randLCG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generator for Portable Random Innovations — lcg","text":"","code":"set.lcgseed(seed = 4711) get.lcgseed()  runif.lcg(n, min = 0, max = 1) rnorm.lcg(n, mean = 0, sd = 1) rt.lcg(n, df)"},{"path":"/reference/utils-randLCG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generator for Portable Random Innovations — lcg","text":"df number degrees freedom, positive integer, maybe          non-integer. mean, sd means standard deviation normal distributed          innovations. min, max lower upper limits uniform distributed          innovations. seed integer value, random number seed. n integer, number random innovations          generated.","code":""},{"path":"/reference/utils-randLCG.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generator for Portable Random Innovations — lcg","text":"simple portable random number generator use R      SPlus. recommend use generator comparisons      calculations R Splus. generator linear congruential generator parameters     LCG(=13445, c=0, m=2^31-1, X=0). simple random      number generator passes bitwise randomness test.","code":""},{"path":"/reference/utils-randLCG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generator for Portable Random Innovations — lcg","text":"vector generated random innovations. value     current seed stored variable lcg.seed.","code":""},{"path":"/reference/utils-randLCG.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generator for Portable Random Innovations — lcg","text":"Altman, N.S. (1988);     Bitwise Behavior Random Number Generators,      SIAM J. Sci. Stat. Comput., 9(5), September, 941--949.","code":""},{"path":"/reference/utils-randLCG.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generator for Portable Random Innovations — lcg","text":"","code":"## set.lcgseed -    set.lcgseed(seed = 65890)   ## runif.lcg - rnorm.lcg - rt.lcg -    cbind(runif.lcg(10), rnorm.lcg(10), rt.lcg(10, df = 4)) #>            [,1]       [,2]        [,3] #>  [1,] 0.4125252  0.1343111  2.04846215 #>  [2,] 0.4008696  0.6894022 -0.51108298 #>  [3,] 0.6922567 -1.0722959  1.74930732 #>  [4,] 0.3915458 -0.2155675 -1.97028909 #>  [5,] 0.3328643 -1.0960369  0.19380579 #>  [6,] 0.3609585  0.4220095 -1.80223886 #>  [7,] 0.0872767  0.3471476  0.08012026 #>  [8,] 0.4352189  0.8073492  1.69154270 #>  [9,] 0.5179752 -1.0614631 -1.40535393 #> [10,] 0.1761661 -0.5147036  0.99432970  ## get.lcgseed -    get.lcgseed()   #> lcg.seed.lcg.seed.lcg.seed.lcg.seed.lcg.seed.lcg.seed.lcg.seed.lcg.seed.lcg.seed.lcg.seed.lcg.seed.lcg.seed.lcg.seed.lcg.seed.lcg.seed.lcg.seed.lcg.seed.lcg.seed.lcg.seed.lcg.seed.lcg.seed.lcg.seed.lcg.seed.lcg.seed.lcg.seed.lcg.seed.lcg.seed.lcg.seed.lcg.seed.lcg.seed.lcg.seed  #>                                                                                                                                                                                                                                                                             1743389204      ## Note, to overwrite rnorm, use    # rnorm = rnorm.lcg    # Going back to rnorm    # rm(rnorm)"},{"path":"/reference/utils-symbolTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of Symbols — symbolTable","title":"Table of Symbols — symbolTable","text":"Displays Table plot characters symbols.","code":""},{"path":"/reference/utils-symbolTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of Symbols — symbolTable","text":"","code":"symbolTable(font = par('font'), cex = 0.7)"},{"path":"/reference/utils-symbolTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Table of Symbols — symbolTable","text":"cex numeric value, determines character size, default          size 0.7. font integer value, number font, default font          number 1.","code":""},{"path":"/reference/utils-symbolTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Table of Symbols — symbolTable","text":"symbolTable    displays table plot characters symbols numbered      0 255 returns invisible name font.","code":""},{"path":[]},{"path":"/reference/utils-symbolTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Table of Symbols — symbolTable","text":"","code":"## symbolTable -     # Default Symbol Table: # symbolTable()"}]
