{
    "collab_server" : "",
    "contents" : "## \n# @file  runifInterface.R\n# @brief R file for runif interface\n#\n# @author Petr Savicky\n#\n#\n# Copyright (C) 2009, Petr Savicky, Academy of Sciences of the Czech Republic.\n# All rights reserved.\n#\n# The new BSD License is applied to this software.\n# Copyright (c) 2009 Petr Savicky. \n# All rights reserved.\n#\n#      Redistribution and use in source and binary forms, with or without\n#      modification, are permitted provided that the following conditions are\n#      met:\n#      \n#          - Redistributions of source code must retain the above copyright\n#          notice, this list of conditions and the following disclaimer.\n#          - Redistributions in binary form must reproduce the above\n#          copyright notice, this list of conditions and the following\n#          disclaimer in the documentation and/or other materials provided\n#          with the distribution.\n#          - Neither the name of the Academy of Sciences of the Czech Republic\n#          nor the names of its contributors may be used to endorse or promote \n#          products derived from this software without specific prior written\n#          permission.\n#     \n#      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n#      \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n#      LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n#      A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n#      OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n#      SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n#      LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n#      DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n#      THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n#      (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n#      OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n#  \n#\n#############################################################################\n### runif interface\n###\n###\t\t\tR functions\n### \n\n\nset.generator <- function(name=c(\"congruRand\", \"WELL\", \"MersenneTwister\", \"default\"), parameters=NULL, seed=NULL, ...,\n\tonly.dsc=FALSE)\n{\n\tname <- match.arg(name)\n\tdots <- list(...)\n\tif (name == \"congruRand\")\n\t{\n\t\tif (is.null(parameters))\n\t\t\tparameters <- c(mod=dots$mod, mult=dots$mult, incr=dots$incr)\n\t\tif (length(parameters) == 0)\n\t\t\tparameters <- c(mod=\"2147483647\", mult=\"16807\", incr=\"0\")\n\t\tif (!identical(names(parameters), c(\"mod\", \"mult\", \"incr\")))\n\t\t{\n\t\t\tparam.names <- paste(names(parameters),collapse=\" \")\n\t\t\tstop(\"parameter list \\\"\", param.names, \"\\\" is not correct for congruRand\")\n\t\t}\n\t\tif (is.null(seed))\n\t\t\tseed <- floor(as.double(parameters[\"mod\"]) * runif(1))\n\t\tif (is.numeric(parameters))\n\t\t\tparameters <- formatC(parameters, format=\"f\", digits=0)\n\t\tif (is.numeric(seed))\n\t\t\tseed <- formatC(seed, format=\"f\", digits=0)\n\t\tstate <- c(seed=seed)\n\t\tdescription <- list(name=name, parameters=parameters, state=state)\n\t} else if (name == \"WELL\")\n\t{\n\t\tif (is.null(parameters))\n\t\t{\n\t\t\tif (is.null(dots$order)) dots$order <- \"\"\n\t\t\tif (is.null(dots$version)) dots$version <- \"\"\n\t\t\tif (dots$order != \"\" & nchar(dots$version) != 1) {\n\t\t\t\tstop(\"unsupported parameters order=\", dots$order, \", version=\", dots$version,\" for WELL\")\n\t\t\t}\n\t\t\tversion.name <- paste(dots$order, dots$version, sep=\"\")\n\t\t\torder <- substr(version.name, 1, nchar(version.name) - 1)\n\t\t\tversion <- substr(version.name, nchar(version.name), nchar(version.name))\n\t\t\tparameters <- c(order=order, version=version)\n\t\t}\n\t\tif (!identical(names(parameters), c(\"order\", \"version\")))\n\t\t{\n\t\t\tparam.names <- paste(names(parameters),collapse=\" \")\n\t\t\tcat(\"parameters required for WELL: order, version\\n\")\n\t\t\tcat(\"parameters provided: \", param.names, \"\\n\")\n\t\t\tstop(\"parameter list is not correct for WELL\")\n\t\t}\n\t\tif (! paste(parameters, collapse=\"\") %in% c(\"512a\", \"521a\", \"521b\", \"607a\", \"607b\", \"800a\", \"800b\", \"1024a\", \"1024b\",\n\t\t\t\"19937a\", \"19937b\", \"19937c\", \"21701a\", \"23209a\", \"23209b\", \"44497a\", \"44497b\"))\n\t\t\tstop(\"unsupported parameters order=\", parameters[\"order\"], \", version=\", parameters[\"version\"],\" for WELL\")\n\t\tif (is.null(seed))\n\t\t\tseed <- floor(2^31 * runif(1))\n\t\tsize <- ceiling(as.numeric(parameters[\"order\"])/32)\n\t\t\n\t\t#implemented in rngWELL package, see NAMESPACE\n\t\tstate <- doinitMT2002(seed, size, size)[[3]]\n\n\t\t#old call was\n\t\t#\t\tstate <- .C(\"initMT2002\", as.integer(seed), as.integer(size), integer(size), PACKAGE=\"rngWELL\")[[3]]\n\t\t\n\t\tdescription <- list(name=name, parameters=parameters, state=state)\n\t} else if (name == \"MersenneTwister\")\n\t{\n\t\tif (is.null(parameters))\n\t\t\tparameters <- c(initialization=dots$initialization, resolution=dots$resolution)\n\t\tif (!identical(names(parameters), c(\"initialization\", \"resolution\")))\n\t\t{\n\t\t\tparam.names <- paste(names(parameters),collapse=\" \")\n\t\t\tstop(\"parameter list \\\"\", param.names, \"\\\" is not correct for MersenneTwister\")\n\t\t}\n\t\ttype <- match(parameters[\"initialization\"], c(\"init2002\", \"array2002\"), nomatch=0)\n\t\tif (type == 0)\n\t\t\tstop(\"initialization \", parameters[\"initialization\"], \" is not in c(\\\"init2002\\\", \\\"array2002\\\")\")\n\t\tif ( ! parameters[\"resolution\"] %in% c(\"32\", \"53\"))\n\t\t\tstop(\"resolution \\\"\", parameters[\"resolution\"], \"\\\" is not in c(\\\"32\\\", \\\"53\\\")\")\n\t\tif (is.null(seed))\n\t\t\tseed <- floor(2^31 * runif(1))\n\t\t\n\t\t#implemented in src/mt19937ar.c\n\t\tstate <- .C(CF_initMersenneTwister,\n\t\t\t\t\tas.integer(type),\n\t\t\t\t\tlength(seed),\n\t\t\t\t\tas.integer(seed),\n\t\t\t\t\tstate=integer(625),\n\t\t\t\t\tPACKAGE=\"randtoolbox\")$state\n\t\tdescription <- list(name=name, parameters=parameters, state=state)\n\t} else if (name == \"default\")\n\t{\n\t\tRNGkind(\"default\")\n\t\tif (!is.null(seed))\n\t\t\tset.seed(seed)\n\t\treturn(invisible(NULL))\n\t} else\n\t\tstop(\"unsupported generator: \", name)\n\tif (only.dsc)\n\t\treturn(description)\n\tcat(\"to be removed\\n\")\n\tprint(description)\n\tput.description(description)\n\tinvisible(NULL)\n}\n\nput.description <- function(description)\n{\n\tname <- description$name\n\tparameters <- description$parameters\n\tstate <- description$state\n\tif (name == \"congruRand\")\n\t{\n\t  #implemented in src/congruRand.c\n\t\taux <- .C(CF_put_state_congru,\n\t\t\tparameters,\n\t\t\tstate,\n\t\t\terr = integer(1),\n\t\t\tPACKAGE=\"randtoolbox\")\n\t\tif (aux$err != 0)\n\t\t\tstop(\"check congruRand error: \", aux$err)\n\t\tif (RNGkind()[1] != \"user-supplied\")\n\t\t{\n\t\t  #implemented in src/runifInterface.c\n\t\t\t.C(CF_set_noop, PACKAGE=\"randtoolbox\")\n\t\t\tRNGkind(\"user-supplied\")\n\t\t\t#implemented in src/congruRand.c\n\t\t\taux <- .C(CF_put_state_congru,\n\t\t\t\tparameters,\n\t\t\t\tstate,\n\t\t\t\terr = integer(1),\n\t\t\t\tPACKAGE=\"randtoolbox\")\n\t\t\tif (aux$err != 0)\n\t\t\t\tstop(\"check congruRand error: \", aux$err)\n\t\t}\n\t} else if (name == \"WELL\")\n\t{\n\t  #implemented in src/runifInterface.c\n\t\t.C(CF_set_noop, PACKAGE=\"randtoolbox\")\n\t\tRNGkind(\"user-supplied\")\n\t\t#implemented in rngWELL package, see NAMESPACE\n\t\tdoputRngWELL(parameters[\"order\"], parameters[\"version\"], state)\n#\t\t.C(\"putRngWELL\",\n#\t\t\tas.integer(parameters[\"order\"]),\n#\t\t\tmatch(parameters[\"version\"], c(\"a\", \"b\", \"c\"), nomatch=0),\n#\t\t\tas.integer(state),\n#\t\t\tPACKAGE=\"rngWELL\")\n\t} else if (name == \"MersenneTwister\")\n\t{\n\t  #implemented in src/runifInterface.c\n\t\t.C(CF_set_noop, PACKAGE=\"randtoolbox\")\n\t\tRNGkind(\"user-supplied\")\n\t\t#implemented in src/mt19937ar.c\n\t\t.C(CF_putMersenneTwister,\n\t\t\tmatch(parameters[\"initialization\"], c(\"init2002\", \"array2002\"), nomatch=0),\n\t\t\tas.integer(parameters[\"resolution\"]),\n\t\t\tas.integer(state),\n\t\t\tNAOK=TRUE,\n\t\t\tPACKAGE=\"randtoolbox\")\n\t} else \n\t\tstop(\"unsupported generator: \", name)\n\tinvisible(NULL)\n}\n\nget.description <- function()\n{\n\tif (RNGkind(NULL)[1] != \"user-supplied\")\n\t\tstop(\"For R base generators, use .Random.seed, not get.description()\")\n  \n  #implemented in src/runifInterface.c\n\tgenerator <- .C(CF_current_generator,\n\t\tinteger(1),\n\t\tPACKAGE=\"randtoolbox\")[[1]]\n\tif (generator == 1)\n\t{\n\t\tname <- \"congruRand\"\n\t\toutspace <- \"18446744073709551616\" # 2^64\n\t\t#implemented in src/congruRand.c\n\t\taux <- .C(CF_get_state_congru,\n\t\t\tparameters=rep(outspace, times=3),\n\t\t\tseed=outspace,\n\t\t\tPACKAGE=\"randtoolbox\")\n\t\tparameters <- aux$parameters\n\t\tnames(parameters) <- c(\"mod\", \"mult\", \"incr\")\n\t\tseed <- aux$seed\n\t\tstate <- c(seed=aux$seed)\n\t\tif(parameters[1] == \"4294967296\" && parameters[2] == \"1664525\" && parameters[3] == \"1013904223\")\n\t\t\tliterature <- \"Knuth - Lewis\"\n\t\telse if(parameters[1] == \"281474976710656\" && parameters[2] == \"31167285\" && parameters[3] == \"1\")\n\t\t\tliterature <- \"Lavaux - Jenssens\"\n\t\telse if(parameters[1] == \"18446744073709551616\" && parameters[2] == \"636412233846793005\" && parameters[3] == \"1\")\n\t\t\tliterature <- \"Haynes\"\n\t\telse if(parameters[1] == \"4294967296\" && parameters[2] == \"69069\" && parameters[3] == \"0\") \n\t\t\tliterature <- \"Marsaglia\"\n\t\telse if(parameters[1] == \"4294967295\" && parameters[2] == \"16807\" && parameters[3] == \"0\") \n\t\t\tliterature <- \"Park - Miller\"\n\t\telse \n\t\t\tliterature <- \"Unknown\"\n\t} else if (generator == 2)\n\t{\n\t\tname <- \"WELL\"\n\t\t#implemented in rngWELL package, see NAMESPACE\n\t\ttmp <- dogetRngWELL(1, 1, 2000)\n#\t\ttmp <- .C(\"getRngWELL\",\n#\t\t\torder = integer(1),\n#\t\t\tversion = integer(1),\n#\t\t\tstate = integer(2000),\n#\t\t\tPACKAGE=\"rngWELL\")\n\t\torder <- as.character(tmp$order)\n\t\tprint(tmp)\n\t\tversion <- letters[tmp$version]\n\t\tparameters <- c(order=order, version=version)\n\t\tsize <- ceiling(tmp$order/32)\n\t\tstate <- tmp$state[1:size]\n\t\tliterature <- \"Panneton - L'Ecuyer - Matsumoto\"\n\t} else if (generator == 3)\n\t{\n\t\tname <- \"MersenneTwister\"\n\t\t#implemented in src/mt19937.c\n\t\ttmp <- .C(CF_getMersenneTwister,\n\t\t\tinitialization = integer(1),\n\t\t\tresolution = integer(1),\n\t\t\tstate = integer(625),\n\t\t\tPACKAGE=\"randtoolbox\")\n\t\tinitialization <- c(\"init2002\", \"array2002\")[tmp$initialization]\n\t\tresolution <- as.character(tmp$resolution)\n\t\tparameters <- c(initialization=initialization, resolution=resolution)\n\t\tstate <- tmp$state\n\t\tliterature <- \"M. Matsumoto, T. Nishimura, 1998\"\n\t} else\n\t\tstop(\"internal error of randtoolbox\")\n\tlist(name=name, parameters=parameters, state=state, authors=literature)\n}\n\n",
    "created" : 1521533716817.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1785088591",
    "id" : "6D37B093",
    "lastKnownWriteTime" : 1521537087,
    "last_content_update" : 1521537087627,
    "path" : "~/Documents/recherche-enseignement/code/R/rmetrics/Rmetrics2/rmetrics/pkg/randtoolbox/R/runifInterface.R",
    "project_path" : "R/runifInterface.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}