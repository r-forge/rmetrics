{
    "collab_server" : "",
    "contents" : "/** \n * @file  randtoolbox.h\n * @brief header file for all RNGs\n *\n * @author Christophe Dutang\n * @author Petr Savicky \n *\n * Copyright (C) 2016, Christophe Dutang\n *\n * Copyright (C) 2009, Christophe Dutang, \n * Petr Savicky, Academy of Sciences of the Czech Republic. \n * All rights reserved.\n *\n * The new BSD License is applied to this software.\n * Copyright (c) 2009 Christophe Dutang, Petr Savicky. \n * All rights reserved.\n *\n *      Redistribution and use in source and binary forms, with or without\n *      modification, are permitted provided that the following conditions are\n *      met:\n *      \n *          - Redistributions of source code must retain the above copyright\n *          notice, this list of conditions and the following disclaimer.\n *          - Redistributions in binary form must reproduce the above\n *          copyright notice, this list of conditions and the following\n *          disclaimer in the documentation and/or other materials provided\n *          with the distribution.\n *          - Neither the name of the Academy of Sciences of the Czech Republic\n *          nor the names of its contributors may be used to endorse or promote \n *          products derived from this software without specific prior written\n *          permission.\n *     \n *      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n *      \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n *      LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n *      A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n *      OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n *      SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n *      LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n *      DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n *      THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n *      (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n *      OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *  \n */\n/*****************************************************************************\n *  Random number generators algorithms\n *  \n *\t\t\theader file\n *\n */\n\n//R header files\n#include <R.h>\n#include <Rinternals.h>\n#include <Rdefines.h>\n#include <Rmath.h>\n#include <R_ext/Error.h>\n\n#include \"config.h\"\n#include \"locale.h\"\n\n//Halton\n#include \"LowDiscrepancy-halton.h\"\n\n//Sobol\n#include \"LowDiscrepancy-sobol.h\"\n\n//congruRand\n#include \"congruRand.h\"\n\n//SFMT\n#include \"SFMT.h\"\n\n//Knuth TAOCP\n#include \"knuthTAOCP2002.h\"\n\n//WELL RNGs\n#include \"wellrng.h\"\n\n//the first 100 000 prime numbers taken from http://primes.utm.edu/ is included \n//in randtoolbox.c by #include \"primes.h\"\n\n\n\n\n\n//time header files\n#if HAVE_TIME_H\n# include <time.h>\n#endif\n\n#if HAVE_SYS_TIME_H\n# include <sys/time.h>\n#endif\n\n#if HAVE_WINDOWS_H\n# include <windows.h>\n#endif\n\n#if defined(HAVE_SSE2)\n# include <emmintrin.h>\n#endif\n\n\n/* Functions accessed from .Call() */\nSEXP doTorus(SEXP n, SEXP d, SEXP p, SEXP offset, SEXP ismixed, SEXP timedseed, SEXP mersexpo);\nSEXP doHalton(SEXP n, SEXP d, SEXP offset, SEXP ismixed, SEXP timedseed, SEXP mersexpo);\nSEXP doSobol(SEXP n, SEXP d, SEXP offset, SEXP ismixed, SEXP timedseed, SEXP mersexpo);\nSEXP doSetSeed(SEXP s);\nSEXP doCongruRand(SEXP n, SEXP d, SEXP modulus, SEXP multiplier, SEXP increment, SEXP echo);\nSEXP doSFMersenneTwister(SEXP n, SEXP d, SEXP mersexpo, SEXP paramset);\nSEXP doWELL(SEXP n, SEXP d, SEXP order, SEXP tempering, SEXP version);\nSEXP doKnuthTAOCP(SEXP n, SEXP d);\n\n/* utility functions */\nvoid torus(double *u, int nb, int dim, int *prime, int offset, int ismixed, int usetime, int mexp);\nvoid halton_c(double *u, int nb, int dim, int offset, int ismixed, int usetime, int mexp);\nvoid sobol_c(double *u, int nb, int dim, int offset, int ismixed, int usetime, int mexp);\nvoid congruRand(double *u, int nb, int dim, uint64_t mod, uint64_t mult, uint64_t incr, uint64_t mask, int show);\nvoid SFmersennetwister(double *u, int nb, int dim, int mexp, int usepset);\nvoid knuthTAOCP(double *u, int nb, int dim);\n\nvoid setSeed(long s);\nvoid randSeedByArray(int length);\nvoid randSeed();\n\nvoid reconstruct_primes();\n\n/* Functions accessed from .C() */\nvoid get_primes(int *n, int *pri);\n\n",
    "created" : 1521551211051.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "258159514",
    "id" : "91300F0",
    "lastKnownWriteTime" : 1521551241,
    "last_content_update" : 1521551241754,
    "path" : "~/Documents/recherche-enseignement/code/R/rmetrics/Rmetrics2/rmetrics/pkg/randtoolbox/src/randtoolbox.h",
    "project_path" : "src/randtoolbox.h",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "h"
}