
R version 4.2.2 Patched (2022-11-10 r83330) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> setwd('~/repos/rmetrics/pkg/timeDate')
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> ?POSIXct
> showClass(timeDate)
Error in .getClassesFromCache(Class) : 
  class should be either a character-string name or a class definition
> showClass("timeDate")
Class "timeDate" [package "timeDate"]

Slots:
                                    
Name:       Data    format FinCenter
Class:   POSIXct character character
> ?pmatch
> devtools::load_all()
*** output flushed ***
> timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
> 
Called from: seq.timeDate(from = from, to = to, by = by)
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate-Sequence.R#231: timeDate(res, zone = zone, FinCenter = FinCenter)
Browse[2]> res
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
Browse[2]> class(res)
[1] "POSIXct" "POSIXt" 
Browse[2]> zone
[1] "London"
Browse[2]> FinCenter
[1] "London"
Browse[2]> showMethods("timeDate")
Function: timeDate (package timeDate)
charvec="ANY"
charvec="character"
charvec="Date"
charvec="missing"
charvec="numeric"
charvec="POSIXt"
charvec="timeDate"

Browse[2]> format(res)
[1] "2004-03-26 01:00:00" "2004-03-27 01:00:00" "2004-03-28 01:00:00"
[4] "2004-03-29 01:00:00" "2004-03-30 01:00:00" "2004-03-31 01:00:00"
[7] "2004-04-01 01:00:00"
Browse[2]> 
London
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 00:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> 
> 
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> 
> 
> timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
> 
Called from: .formatFinCenterNum(unclass(ct), zone, type = "any2gmt")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#309: offSetIdx[offSetIdx < 1] <- 1
Browse[2]> ls()
[1] "dst.list"  "FinCenter" "num"       "offSetIdx" "signum"    "try"      
[7] "type"     
Browse[2]> offSetIdx
[1] 173
Browse[2]> signum
[1] -1
Browse[2]> num
[1] 1080262800
attr(,"tzone")
[1] "GMT"
Browse[2]> dst.list
*** output flushed ***
Browse[2]> offSet[offSetIdx]
Error: object 'offSet' not found
Browse[2]> dst.list$offSet[offSetIdx]
[1] 0
Browse[2]> dst.list$offSet
  [1]    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0
 [16] 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600
 [31]    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0
 [46] 3600    0 3600    0 3600 7200 3600 7200 3600 7200 3600 7200 3600 7200 3600
 [61]    0 3600    0 3600 7200 3600    0 3600    0 3600    0 3600    0 3600    0
 [76] 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600
 [91]    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0
[106] 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600
[121]    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0
[136] 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600
[151]    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0
[166] 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600
[181]    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0
[196] 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600
[211]    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0
[226] 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600
[241]    0
Browse[2]> offSetIdx[offSetIdx < 1]
integer(0)
Browse[2]> num
[1] 1080262800
attr(,"tzone")
[1] "GMT"
Browse[2]> signum
[1] -1
Browse[2]> num + signum * dst.list$offSet[offSetIdx]
[1] 1080262800
attr(,"tzone")
[1] "GMT"
Browse[2]> num
[1] 1080262800
attr(,"tzone")
[1] "GMT"
Browse[2]> 
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#310: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> offSetIdx
[1] 173
Browse[2]> 
Called from: .formatFinCenterNum(num, .Object@FinCenter, "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#309: offSetIdx[offSetIdx < 1] <- 1
Browse[2]> num
[1] 1080262800
Browse[2]> 
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#310: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> offSetIdx
[1] 173
Browse[2]> 
Called from: .formatFinCenterNum(unclass(ct), zone, type = "any2gmt")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#309: offSetIdx[offSetIdx < 1] <- 1
Browse[2]> num
[1] 1080781200
attr(,"tzone")
[1] "GMT"
Browse[2]> 
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#310: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
Called from: .formatFinCenterNum(num, .Object@FinCenter, "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#309: offSetIdx[offSetIdx < 1] <- 1
Browse[2]> num
[1] 1080777600
Browse[2]> offSetIdx
[1] 174
Browse[2]> 
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#310: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> num + signum * dst.list$offSet[offSetIdx]
[1] 1080781200
Browse[2]> 
Called from: .formatFinCenterNum(as.numeric(getDataPart(x)), FinCenter, type = "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#309: offSetIdx[offSetIdx < 1] <- 1
Browse[2]> 
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#310: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
Called from: .formatFinCenterNum(as.numeric(getDataPart(x)), FinCenter, type = "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#309: offSetIdx[offSetIdx < 1] <- 1
Browse[2]> 
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#310: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
Called from: .formatFinCenterNum(unclass(ct), zone, type = "any2gmt")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#309: offSetIdx[offSetIdx < 1] <- 1
Browse[2]> 
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#310: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
Called from: .formatFinCenterNum(num, .Object@FinCenter, "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#309: offSetIdx[offSetIdx < 1] <- 1
Browse[2]> 
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#310: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
Called from: .formatFinCenterNum(as.numeric(getDataPart(x)), FinCenter, type = "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#309: offSetIdx[offSetIdx < 1] <- 1
Browse[2]> 
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#310: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
London
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 00:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> 
> 
> 
> devtools::load_all()
*** output flushed ***
> timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
> 
Called from: .formatFinCenterNum(unclass(ct), zone, type = "any2gmt")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#310: offSetIdx[offSetIdx < 1] <- 1
Browse[2]> num
[1] 1080262800 1080349200 1080435600 1080522000 1080608400 1080694800 1080781200
attr(,"tzone")
[1] "GMT"
Browse[2]> offSetIdx
[1] 173 173 174 174 174 174 174
Browse[2]> dst.list$offSet[offSetIdx]
[1]    0    0 3600 3600 3600 3600 3600
Browse[2]> signum
[1] -1
Browse[2]> findInterval
function (x, vec, rightmost.closed = FALSE, all.inside = FALSE, 
    left.open = FALSE) 
{
    if (!identical(FALSE, is.unsorted(vec))) 
        stop("'vec' must be sorted non-decreasingly and not contain NAs")
    .Internal(findInterval(as.double(vec), as.double(x), rightmost.closed, 
        all.inside, left.open))
}
<bytecode: 0x5638e2682098>
<environment: namespace:base>
Browse[2]> dst.list(numeric)
Error in dst.list(numeric) (from timeDate.R#310) : could not find function "dst.list"
Browse[2]> dst.list$numeric
  [1] -2147397248 -1691964000 -1680472800 -1664143200 -1650146400 -1633903200
  [7] -1617487200 -1601848800 -1586037600 -1570399200 -1552168800 -1538344800
 [13] -1522533600 -1507500000 -1490565600 -1473631200 -1460930400 -1442786400
 [19] -1428876000 -1410732000 -1396216800 -1379282400 -1364767200 -1348437600
 [25] -1333317600 -1315778400 -1301263200 -1284328800 -1269813600 -1253484000
 [31] -1238364000 -1221429600 -1206914400 -1189980000 -1175464800 -1159135200
 [37] -1143410400 -1126476000 -1111960800 -1095631200 -1080511200 -1063576800
 [43] -1049061600 -1032127200 -1017612000 -1001282400  -986162400  -969228000
 [49]  -950479200  -942012000  -904518000  -896050800  -875487600  -864601200
 [55]  -844038000  -832546800  -812588400  -798073200  -781052400  -772066800
 [61]  -764805600  -748476000  -733356000  -719445600  -717030000  -706748400
 [67]  -699487200  -687996000  -668037600  -654732000  -636588000  -622072800
 [73]  -605743200  -590623200  -574293600  -558568800  -542239200  -527119200
 [79]  -512604000  -496274400  -481154400  -464220000  -449704800  -432165600
 [85]  -417650400  -401320800  -386200800  -369266400  -354751200  -337816800
 [91]  -323301600  -306972000  -291852000  -276732000  -257983200  -245282400
 [97]  -226533600  -213228000  -195084000  -182383200  -163634400  -150933600
[103]  -132184800  -119484000  -100735200   -88034400   -68680800   -37242000
[109]    57722400    69818400    89172000   101268000   120621600   132717600
[115]   152071200   164167200   183520800   196221600   214970400   227671200
[121]   246420000   259120800   278474400   290570400   309924000   322020000
[127]   341373600   354675600   372819600   386125200   404269200   417574800
[133]   435718800   449024400   467773200   481078800   499222800   512528400
[139]   530672400   543978000   562122000   575427600   593571600   606877200
[145]   625626000   638326800   657075600   670381200   688525200   701830800
[151]   719974800   733280400   751424400   764730000   782874000   796179600
[157]   814323600   828234000   846378000   859683600   877827600   891133200
[163]   909277200   922582800   941331600   954032400   972781200   985482000
[169]  1004230800  1017536400  1035680400  1048986000  1067130000  1080435600
[175]  1099184400  1111885200  1130634000  1143334800  1162083600  1174784400
[181]  1193533200  1206838800  1224982800  1238288400  1256432400  1269738000
[187]  1288486800  1301187600  1319936400  1332637200  1351386000  1364691600
[193]  1382835600  1396141200  1414285200  1427590800  1445734800  1459040400
[199]  1477789200  1490490000  1509238800  1521939600  1540688400  1553994000
[205]  1572138000  1585443600  1603587600  1616893200  1635642000  1648342800
[211]  1667091600  1679792400  1698541200  1711846800  1729990800  1743296400
[217]  1761440400  1774746000  1792890000  1806195600  1824944400  1837645200
[223]  1856394000  1869094800  1887843600  1901149200  1919293200  1932598800
[229]  1950742800  1964048400  1982797200  1995498000  2014246800  2026947600
[235]  2045696400  2058397200  2077146000  2090451600  2108595600  2121901200
[241]  2140045200
Browse[2]> ?findInterval
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#311: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> > offSetIdx
[1] 173 173 174 174 174 174 174
Browse[2]> dst.list$numeric[174]
[1] 1080435600
Browse[2]> num
[1] 1080262800 1080349200 1080435600 1080522000 1080608400 1080694800 1080781200
attr(,"tzone")
[1] "GMT"
Browse[2]> num == dst.list$numeric[174]
[1] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE
Browse[2]> 
Called from: .formatFinCenterNum(num, .Object@FinCenter, "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#310: offSetIdx[offSetIdx < 1] <- 1
Browse[2]> 
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#311: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
Called from: .formatFinCenterNum(as.numeric(getDataPart(x)), FinCenter, type = "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#310: offSetIdx[offSetIdx < 1] <- 1
Browse[2]> 
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#311: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
London
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 00:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> 
> 
> 
> 
> 
> 
> timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
[1] "res:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
class(res):  POSIXct POSIXt 
unclass(res):  1080262800 1080349200 1080435600 1080522000 1080608400 1080694800 1080781200 

Called from: .formatFinCenterNum(unclass(ct), zone, type = "any2gmt")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#310: offSetIdx[offSetIdx < 1] <- 1
Browse[2]> num
[1] 1080262800 1080349200 1080435600 1080522000 1080608400 1080694800 1080781200
attr(,"tzone")
[1] "GMT"
Browse[2]> 
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#311: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
Called from: .formatFinCenterNum(num, .Object@FinCenter, "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#310: offSetIdx[offSetIdx < 1] <- 1
Browse[2]> num
[1] 1080262800 1080349200 1080432000 1080518400 1080604800 1080691200 1080777600
Browse[2]> 
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#311: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
Called from: .formatFinCenterNum(as.numeric(getDataPart(x)), FinCenter, type = "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#310: offSetIdx[offSetIdx < 1] <- 1
Browse[2]> num
[1] 1080262800 1080349200 1080432000 1080518400 1080604800 1080691200 1080777600
Browse[2]> 
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#311: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
London
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 00:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> 
> 
> 
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")

+ by = "DSTday", zone = "London", FinCenter = "London")
[1] "res:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
class(res):  POSIXct POSIXt 
unclass(res):  1080262800 1080349200 1080435600 1080522000 1080608400 1080694800 1080781200 

Called from: .formatFinCenterNum(unclass(ct), zone, type = "any2gmt")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#310: offSetIdx[offSetIdx < 1] <- 1
Browse[2]> num
[1] 1080262800 1080349200 1080435600 1080522000 1080608400 1080694800 1080781200
attr(,"tzone")
[1] "GMT"
Browse[2]> num == dst.list$numeric[174]
[1] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE
Browse[2]> 
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#311: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
Called from: .formatFinCenterNum(num, .Object@FinCenter, "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#310: offSetIdx[offSetIdx < 1] <- 1
Browse[2]> num
[1] 1080262800 1080349200 1080432000 1080518400 1080604800 1080691200 1080777600
Browse[2]> num == dst.list$numeric[174]
[1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE
Browse[2]> offSetIdx
[1] 173 173 173 174 174 174 174
Browse[2]> num == dst.list$numeric[173]
[1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE
Browse[2]> 
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#311: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
> tmp
Called from: .formatFinCenterNum(as.numeric(getDataPart(x)), FinCenter, type = "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#310: offSetIdx[offSetIdx < 1] <- 1
Browse[2]> 
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#311: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
London
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 00:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> timeDate("2004-03-28 01:00:00 GMT")
GMT
[1] [NA]
Warning message:
In whichFormat(charvec[1]) :
  character string is not in a standard unambiguous format
> timeDate("2004-03-28 01:00:00", zone = "GMT", FinCenter = "London")
London
[1] [2004-03-28 02:00:00]
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> timeDate("2004-03-28 01:00:00", zone = "GMT", FinCenter = "London")
Called from: .formatFinCenterNum(num, .Object@FinCenter, "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#310: offSetIdx[offSetIdx < 1] <- 1
Browse[2]> num
[1] 1080435600
Browse[2]> offSetIdx
[1] 174
Browse[2]> signum
[1] 1
Browse[2]> 
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#311: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
Called from: .formatFinCenterNum(as.numeric(getDataPart(x)), FinCenter, type = "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#310: offSetIdx[offSetIdx < 1] <- 1
Browse[2]> 
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#311: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
London
[1] [2004-03-28 02:00:00]
> timeDate("2004-03-28 01:00:00", zone = "London", FinCenter = "London")
Called from: .formatFinCenterNum(unclass(ct), zone, type = "any2gmt")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#310: offSetIdx[offSetIdx < 1] <- 1
Browse[2]> 
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#311: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> num
[1] 1080435600
attr(,"tzone")
[1] "GMT"
Browse[2]> offSetIdx
[1] 174
Browse[2]> 
Called from: .formatFinCenterNum(num, .Object@FinCenter, "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#310: offSetIdx[offSetIdx < 1] <- 1
Browse[2]> 
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#311: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
Called from: .formatFinCenterNum(as.numeric(getDataPart(x)), FinCenter, type = "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#310: offSetIdx[offSetIdx < 1] <- 1
Browse[2]> 
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#311: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
London
[1] [2004-03-28]
> 
> 
> 
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
[1] "charvec:"
[1] "2004-03-26 01:00:00"
[1] ""
[1] "charvec:"
[1] "2004-04-01 01:00:00"
[1] ""
[1] "res:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
class(res):  POSIXct POSIXt 
unclass(res):  1080262800 1080349200 1080435600 1080522000 1080608400 1080694800 1080781200 

[1] "charvec:"
[1] "2004-03-26 01:00:00" "2004-03-27 01:00:00" "2004-03-28 01:00:00"
[4] "2004-03-29 01:00:00" "2004-03-30 01:00:00" "2004-03-31 01:00:00"
[7] "2004-04-01 01:00:00"
[1] ""
London
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 00:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
[1] "charvec:"
[1] "2004-03-26 01:00:00"
[1] ""
[1] "2004-03-26 01:00:00 GMT"
[1] ""
[1] "charvec:"
[1] "2004-04-01 01:00:00"
[1] ""
[1] "2004-04-01 01:00:00 GMT"
[1] ""
[1] "res:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
class(res):  POSIXct POSIXt 
unclass(res):  1080262800 1080349200 1080435600 1080522000 1080608400 1080694800 1080781200 

[1] "charvec:"
[1] "2004-03-26 01:00:00" "2004-03-27 01:00:00" "2004-03-28 01:00:00"
[4] "2004-03-29 01:00:00" "2004-03-30 01:00:00" "2004-03-31 01:00:00"
[7] "2004-04-01 01:00:00"
[1] ""
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
London
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 00:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
[1] "charvec:"
[1] "2004-03-26 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT"
[1] ""
[1] "charvec:"
[1] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-04-01 01:00:00 GMT"
[1] ""
Called from: seq.timeDate(from = from, to = to, by = by)
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate-Sequence.R#231: print("res:")
Browse[2]> r1
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT" "2004-04-02 01:00:00 GMT"
Browse[2]> str(r1)
 POSIXlt[1:8], format: "2004-03-26 01:00:00" "2004-03-27 01:00:00" "2004-03-28 01:00:00" ...
Browse[2]> class(r1)
[1] "POSIXlt" "POSIXt" 
Browse[2]> unclass(r1)
$sec
[1] 0

$min
[1] 0

$hour
[1] 1

$mday
[1] 26 27 28 29 30 31 32 33

$mon
[1] 2

$year
[1] 104

$wday
[1] 5

$yday
[1] 85

$isdst
[1] -1

attr(,"tzone")
[1] "GMT"
Browse[2]> help(as.POSIXct)
[1] "res:"
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate-Sequence.R#232: print(res)
Browse[2]> help(POSIXct)
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate-Sequence.R#233: print("")
Browse[2]> 
[1] ""
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate-Sequence.R#234: cat("class(res): ", class(res), "\n")
Browse[2]> 
class(res):  POSIXct POSIXt 
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate-Sequence.R#235: cat("unclass(res): ", unclass(res), "\n\n")
Browse[2]> 
unclass(res):  1080262800 1080349200 1080435600 1080522000 1080608400 1080694800 1080781200 

debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate-Sequence.R#237: timeDate(res, zone = zone, FinCenter = FinCenter)
Browse[2]> 
[1] "charvec:"
[1] "2004-03-26 01:00:00" "2004-03-27 01:00:00" "2004-03-28 01:00:00"
[4] "2004-03-29 01:00:00" "2004-03-30 01:00:00" "2004-03-31 01:00:00"
[7] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
London
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 00:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
[1] "charvec:"
[1] "2004-03-26 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT"
[1] ""
[1] "charvec:"
[1] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-04-01 01:00:00 GMT"
[1] ""
Called from: seq.timeDate(from = from, to = to, by = by)
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate-Sequence.R#231: print("res:")
Browse[2]> r1
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT" "2004-04-02 01:00:00 GMT"
Browse[2]> unclass(r1)
$sec
[1] 0

$min
[1] 0

$hour
[1] 1

$mday
[1] 26 27 28 29 30 31 32 33

$mon
[1] 2

$year
[1] 104

$wday
[1] 5

$yday
[1] 85

$isdst
[1] -1

attr(,"tzone")
[1] "GMT"
Browse[2]> class(r1)
[1] "POSIXlt" "POSIXt" 
Browse[2]> 
[1] "res:"
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate-Sequence.R#232: print(res)
Browse[2]> 
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate-Sequence.R#233: print("")
Browse[2]> 
[1] ""
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate-Sequence.R#234: cat("class(res): ", class(res), "\n")
Browse[2]> 
class(res):  POSIXct POSIXt 
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate-Sequence.R#235: cat("unclass(res): ", unclass(res), "\n\n")
Browse[2]> 
unclass(res):  1080262800 1080349200 1080435600 1080522000 1080608400 1080694800 1080781200 

debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate-Sequence.R#237: timeDate(res, zone = zone, FinCenter = FinCenter)
Browse[2]> 
[1] "charvec:"
[1] "2004-03-26 01:00:00" "2004-03-27 01:00:00" "2004-03-28 01:00:00"
[4] "2004-03-29 01:00:00" "2004-03-30 01:00:00" "2004-03-31 01:00:00"
[7] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
London
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 00:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> timeDate("2004-03-28 01:00:00", zone = "London", FinCenter = "London")
[1] "charvec:"
[1] "2004-03-28 01:00:00"
[1] "ct:"
[1] "2004-03-28 01:00:00 GMT"
[1] ""
London
[1] [2004-03-28]
> unclass(timeDate("2004-03-28 01:00:00", zone = "London", FinCenter = "London"))
[1] "charvec:"
[1] "2004-03-28 01:00:00"
[1] "ct:"
[1] "2004-03-28 01:00:00 GMT"
[1] ""
<S4 Type Object>
attr(,"Data")
[1] "2004-03-28 GMT"
attr(,"format")
[1] "%Y-%m-%d"
attr(,"FinCenter")
[1] "London"
> as.POSIXlt("2004-03-28 01:00:00")
[1] "2004-03-28 01:00:00 BST"
> as.POSIXlt("2004-03-28 01:00:00", tz = "BST")
[1] "2004-03-28 01:00:00 BST"
> as.POSIXlt("2004-03-28 01:01:00", tz = "BST")
[1] "2004-03-28 01:01:00 BST"
> as.POSIXct(strptime("2011-03-27 01:30:00", "%Y-%m-%d %H:%M:%S"))
[1] "2011-03-27 00:30:00 GMT"
> as.POSIXct(strptime("2011-03-27 01:30:00", "%Y-%m-%d %H:%M:%S", tz = "BST"))
[1] "2011-03-27 01:30:00 BST"
> ?strptime
> class(strptime("2011-03-27 01:30:00", "%Y-%m-%d %H:%M:%S", tz = "BST"))
[1] "POSIXlt" "POSIXt" 
> unclass(strptime("2011-03-27 01:30:00", "%Y-%m-%d %H:%M:%S", tz = "BST"))
$sec
[1] 0

$min
[1] 30

$hour
[1] 1

$mday
[1] 27

$mon
[1] 2

$year
[1] 111

$wday
[1] 0

$yday
[1] 85

$isdst
[1] 0

$zone
[1] "BST"

$gmtoff
[1] NA

attr(,"tzone")
[1] "BST" "BST" ""   
> unclass(strptime("2011-03-27 01:30:00", "%Y-%m-%d %H:%M:%S"))
$sec
[1] 0

$min
[1] 30

$hour
[1] 1

$mday
[1] 27

$mon
[1] 2

$year
[1] 111

$wday
[1] 0

$yday
[1] 85

$isdst
[1] 1

$zone
[1] "BST"

$gmtoff
[1] NA

> as.POSIXct
function (x, tz = "", ...) 
UseMethod("as.POSIXct")
<bytecode: 0x5638dc66b128>
<environment: namespace:base>
> methods(as.POSIXct)
[1] as.POSIXct.Date     as.POSIXct.default  as.POSIXct.numeric 
[4] as.POSIXct.POSIXlt  as.POSIXct.timeDate
see '?methods' for accessing help and source code
> as.POSIXct.POSIXlt
function (x, tz = "", ...) 
{
    tzone <- attr(x, "tzone")
    if (missing(tz) && !is.null(tzone)) 
        tz <- tzone[1L]
    y <- .Internal(as.POSIXct(x, tz))
    names(y) <- names(x$year)
    .POSIXct(y, tz)
}
<bytecode: 0x5638e192d8a8>
<environment: namespace:base>
> .POSIXct
function (xx, tz = NULL, cl = c("POSIXct", "POSIXt")) 
{
    class(xx) <- cl
    attr(xx, "tzone") <- tz
    xx
}
<bytecode: 0x5638da6a4270>
<environment: namespace:base>
> as.POSIXct.default
*** output flushed ***
> timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
[1] "charvec:"
[1] "2004-03-26 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT"
[1] ""
[1] "charvec:"
[1] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-04-01 01:00:00 GMT"
[1] ""
Called from: seq.timeDate(from = from, to = to, by = by)
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate-Sequence.R#231: print("res:")
Browse[2]> 
[1] "res:"
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate-Sequence.R#232: print(res)
Browse[2]> 
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate-Sequence.R#233: print("")
Browse[2]> 
[1] ""
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate-Sequence.R#234: cat("class(res): ", class(res), "\n")
Browse[2]> 
class(res):  POSIXct POSIXt 
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate-Sequence.R#235: cat("unclass(res): ", unclass(res), "\n\n")
Browse[2]> 
unclass(res):  1080262800 1080349200 1080435600 1080522000 1080608400 1080694800 1080781200 

debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate-Sequence.R#237: timeDate(res, zone = zone, FinCenter = FinCenter)
Browse[2]> 
[1] "charvec:"
[1] "2004-03-26 01:00:00" "2004-03-27 01:00:00" "2004-03-28 01:00:00"
[4] "2004-03-29 01:00:00" "2004-03-30 01:00:00" "2004-03-31 01:00:00"
[7] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
London
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 00:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> showMethods(timeDate)
Function: timeDate (package timeDate)
charvec="ANY"
charvec="character"
charvec="Date"
charvec="missing"
charvec="numeric"
charvec="POSIXct"
    (inherited from: charvec="POSIXt")
charvec="POSIXt"
charvec="timeDate"

> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> 
> 
> 
> timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
[1] "charvec:"
[1] "2004-03-26 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT"
[1] ""
[1] "charvec:"
[1] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-04-01 01:00:00 GMT"
[1] ""
[1] "res:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
class(res):  POSIXct POSIXt 
unclass(res):  1080262800 1080349200 1080435600 1080522000 1080608400 1080694800 1080781200 

[1] "charvec:"
[1] "2004-03-26 01:00:00" "2004-03-27 01:00:00" "2004-03-28 01:00:00"
[4] "2004-03-29 01:00:00" "2004-03-30 01:00:00" "2004-03-31 01:00:00"
[7] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
London
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 00:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> .POSIXct
function (xx, tz = NULL, cl = c("POSIXct", "POSIXt")) 
{
    class(xx) <- cl
    attr(xx, "tzone") <- tz
    xx
}
<bytecode: 0x5638da6a4270>
<environment: namespace:base>
> midnightStandard
function(charvec, format)
{
    # YC: uses now the faster midngithStandard2() function
    # but still return a character

    # Description:
    #   Midnight Standard & conversion to isoFormat:

    # FUNCTION:

    # Missing Format:
    if (missing(format)) format <- whichFormat(charvec)
    ans <- midnightStandard2(charvec, format = format)
    ans <- format(ans, format = "%Y-%m-%d %H:%M:%S")

    # Return Value:
    ans
}
<environment: namespace:timeDate>
> midnightStandard2
*** output flushed ***
> 
> 
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
[1] "charvec:"
[1] "2004-03-26 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT"
[1] ""
[1] "charvec:"
[1] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-04-01 01:00:00 GMT"
[1] ""
[1] "res:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
class(res):  POSIXct POSIXt 
unclass(res):  1080262800 1080349200 1080435600 1080522000 1080608400 1080694800 1080781200 

[1] "charvec:"
[1] "2004-03-26 01:00:00" "2004-03-27 01:00:00" "2004-03-28 01:00:00"
[4] "2004-03-29 01:00:00" "2004-03-30 01:00:00" "2004-03-31 01:00:00"
[7] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
Called from: .formatFinCenterNum(unclass(ct), zone, type = "any2gmt")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#315: offSetIdx[offSetIdx < 1] <- 1
Browse[2]> num
[1] 1080262800 1080349200 1080435600 1080522000 1080608400 1080694800 1080781200
attr(,"tzone")
[1] "GMT"
Browse[2]> dst.list$offSet[offSetIdx]
[1]    0    0 3600 3600 3600 3600 3600
Browse[2]> 
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#316: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> dst.list$offSet[offSetIdx]
[1]    0    0 3600 3600 3600 3600 3600
Browse[2]> offSetIdx
[1] 173 173 174 174 174 174 174
Browse[2]> dst.list$offSet[offSetIdx]
[1]    0    0 3600 3600 3600 3600 3600
Browse[2]> signum
[1] -1
Browse[2]> num - dst.list$offSet[offSetIdx]
[1] 1080262800 1080349200 1080432000 1080518400 1080604800 1080691200 1080777600
attr(,"tzone")
[1] "GMT"
Browse[2]> findInterval(num - dst.list$offSet[offSetIdx], dst.list$numeric)
[1] 173 173 173 174 174 174 174
Browse[2]> dst.list$offSet
  [1]    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0
 [16] 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600
 [31]    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0
 [46] 3600    0 3600    0 3600 7200 3600 7200 3600 7200 3600 7200 3600 7200 3600
 [61]    0 3600    0 3600 7200 3600    0 3600    0 3600    0 3600    0 3600    0
 [76] 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600
 [91]    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0
[106] 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600
[121]    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0
[136] 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600
[151]    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0
[166] 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600
[181]    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0
[196] 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600
[211]    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0
[226] 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600    0 3600
[241]    0
Browse[2]> 
Called from: .formatFinCenterNum(num, .Object@FinCenter, "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#315: offSetIdx[offSetIdx < 1] <- 1
Browse[2]> 
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#316: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
Called from: .formatFinCenterNum(as.numeric(getDataPart(x)), FinCenter, type = "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#315: offSetIdx[offSetIdx < 1] <- 1
Browse[2]> 
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#316: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
London
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 00:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> 
> 
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
[1] "charvec:"
[1] "2004-03-26 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT"
[1] ""
[1] "charvec:"
[1] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-04-01 01:00:00 GMT"
[1] ""
[1] "res:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
class(res):  POSIXct POSIXt 
unclass(res):  1080262800 1080349200 1080435600 1080522000 1080608400 1080694800 1080781200 

[1] "charvec:"
[1] "2004-03-26 01:00:00" "2004-03-27 01:00:00" "2004-03-28 01:00:00"
[4] "2004-03-29 01:00:00" "2004-03-30 01:00:00" "2004-03-31 01:00:00"
[7] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
Called from: .formatFinCenterNum(unclass(ct), zone, type = "any2gmt")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#327: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> changed
[1] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE
Browse[2]> 
Called from: .formatFinCenterNum(num, .Object@FinCenter, "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#327: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
Called from: .formatFinCenterNum(as.numeric(getDataPart(x)), FinCenter, type = "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#327: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
London
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 01:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> 
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
[1] "charvec:"
[1] "2004-03-26 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT"
[1] ""
[1] "charvec:"
[1] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-04-01 01:00:00 GMT"
[1] ""
[1] "res:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
class(res):  POSIXct POSIXt 
unclass(res):  1080262800 1080349200 1080435600 1080522000 1080608400 1080694800 1080781200 

[1] "charvec:"
[1] "2004-03-26 01:00:00" "2004-03-27 01:00:00" "2004-03-28 01:00:00"
[4] "2004-03-29 01:00:00" "2004-03-30 01:00:00" "2004-03-31 01:00:00"
[7] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
Called from: .formatFinCenterNum(unclass(ct), zone, type = "any2gmt")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#327: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
Called from: .formatFinCenterNum(num, .Object@FinCenter, "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#327: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
> tmp
Called from: .formatFinCenterNum(as.numeric(getDataPart(x)), FinCenter, type = "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#327: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
London
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 01:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> class(tmp)
[1] "timeDate"
attr(,"package")
[1] "timeDate"
> as.POSIXlt(tmp)
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 00:00:00 GMT"
[5] "2004-03-30 00:00:00 GMT" "2004-03-31 00:00:00 GMT"
[7] "2004-04-01 00:00:00 GMT"
> as.POSIXct(as.POSIXlt(tmp)))
Error: unexpected ')' in "as.POSIXct(as.POSIXlt(tmp)))"
> as.POSIXct(as.POSIXlt(tmp))
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 00:00:00 GMT"
[5] "2004-03-30 00:00:00 GMT" "2004-03-31 00:00:00 GMT"
[7] "2004-04-01 00:00:00 GMT"
> as.POSIXct(as.POSIXlt(tmp), tz = "BST")
[1] "2004-03-26 01:00:00 BST" "2004-03-27 01:00:00 BST"
[3] "2004-03-28 01:00:00 BST" "2004-03-29 00:00:00 BST"
[5] "2004-03-30 00:00:00 BST" "2004-03-31 00:00:00 BST"
[7] "2004-04-01 00:00:00 BST"
> as.POSIXct
function (x, tz = "", ...) 
UseMethod("as.POSIXct")
<bytecode: 0x5638dc66b128>
<environment: namespace:base>
> as.POSIXlt(tmp, tz = "BST")
Called from: .formatFinCenterNum(as.numeric(getDataPart(x)), FinCenter, type = "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#327: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
[1] "2004-03-26 01:00:00 BST" "2004-03-27 01:00:00 BST"
[3] "2004-03-28 01:00:00 BST" "2004-03-29 01:00:00 BST"
[5] "2004-03-30 01:00:00 BST" "2004-03-31 01:00:00 BST"
[7] "2004-04-01 01:00:00 BST"
> as.POSIXlt(tmp@Data, tz = "BST")
[1] "2004-03-26 01:00:00 BST" "2004-03-27 01:00:00 BST"
[3] "2004-03-28 01:00:00 BST" "2004-03-29 00:00:00 BST"
[5] "2004-03-30 00:00:00 BST" "2004-03-31 00:00:00 BST"
[7] "2004-04-01 00:00:00 BST"
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
[1] "charvec:"
[1] "2004-03-26 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT"
[1] ""
[1] "charvec:"
[1] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-04-01 01:00:00 GMT"
[1] ""
[1] "res:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
class(res):  POSIXct POSIXt 
unclass(res):  1080262800 1080349200 1080435600 1080522000 1080608400 1080694800 1080781200 

[1] "charvec:"
[1] "2004-03-26 01:00:00" "2004-03-27 01:00:00" "2004-03-28 01:00:00"
[4] "2004-03-29 01:00:00" "2004-03-30 01:00:00" "2004-03-31 01:00:00"
[7] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
> as.POSIXlt(tmp, tz = "BST")
[1] "2004-03-26 01:00:00 BST" "2004-03-27 01:00:00 BST"
[3] "2004-03-28 00:00:00 BST" "2004-03-29 01:00:00 BST"
[5] "2004-03-30 01:00:00 BST" "2004-03-31 01:00:00 BST"
[7] "2004-04-01 01:00:00 BST"
> tmp@Data
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 00:00:00 GMT" "2004-03-29 00:00:00 GMT"
[5] "2004-03-30 00:00:00 GMT" "2004-03-31 00:00:00 GMT"
[7] "2004-04-01 00:00:00 GMT"
> unclass(tmp@Data)
[1] 1080262800 1080349200 1080432000 1080518400 1080604800 1080691200 1080777600
attr(,"tzone")
[1] "GMT"
> 
> 
> 
> 
> 
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
[1] "charvec:"
[1] "2004-03-26 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT"
[1] ""
[1] "charvec:"
[1] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-04-01 01:00:00 GMT"
[1] ""
[1] "res:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
class(res):  POSIXct POSIXt 
unclass(res):  1080262800 1080349200 1080435600 1080522000 1080608400 1080694800 1080781200 

[1] "charvec:"
[1] "2004-03-26 01:00:00" "2004-03-27 01:00:00" "2004-03-28 01:00:00"
[4] "2004-03-29 01:00:00" "2004-03-30 01:00:00" "2004-03-31 01:00:00"
[7] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
Called from: .formatFinCenterNum(unclass(ct), zone, type = "any2gmt")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#328: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> class(num)
[1] "numeric"
Browse[2]> offSetIdx
[1] 173 173 173 174 174 174 174
Browse[2]> 
Called from: .formatFinCenterNum(num, .Object@FinCenter, "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#328: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
> tmp
Called from: .formatFinCenterNum(as.numeric(getDataPart(x)), FinCenter, type = "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#328: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> offSetIdx
[1] 173 173 173 174 174 174 174
Browse[2]> changed
[1] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE
Browse[2]> 
London
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 01:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> 
> 
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
[1] "charvec:"
[1] "2004-03-26 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT"
[1] ""
[1] "charvec:"
[1] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-04-01 01:00:00 GMT"
[1] ""
[1] "res:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
class(res):  POSIXct POSIXt 
unclass(res):  1080262800 1080349200 1080435600 1080522000 1080608400 1080694800 1080781200 

[1] "charvec:"
[1] "2004-03-26 01:00:00" "2004-03-27 01:00:00" "2004-03-28 01:00:00"
[4] "2004-03-29 01:00:00" "2004-03-30 01:00:00" "2004-03-31 01:00:00"
[7] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
Called from: .formatFinCenterNum(unclass(ct), zone, type = "any2gmt")
Warning message:
In num[changed] <- num + dst.list$offSet[offSetIdx][changed] :
  number of items to replace is not a multiple of replacement length
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#329: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
Called from: .formatFinCenterNum(num, .Object@FinCenter, "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#329: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
> tmp
Called from: .formatFinCenterNum(as.numeric(getDataPart(x)), FinCenter, type = "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#329: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
London
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-26 02:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> tmp <- timeSequence(from = "2004-10-24 01:00:00", to = "2004-10-31 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
tmp <- timeSequence(from = "2004-10-24 01:00:00", to = "2004-10-31 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
[1] "charvec:"
[1] "2004-10-24 01:00:00"
[1] "ct:"
[1] "2004-10-24 01:00:00 GMT"
[1] ""
[1] "charvec:"
[1] "2004-10-31 01:00:00"
[1] "ct:"
[1] "2004-10-31 01:00:00 GMT"
[1] ""
[1] "res:"
[1] "2004-10-24 01:00:00 GMT" "2004-10-25 01:00:00 GMT"
[3] "2004-10-26 01:00:00 GMT" "2004-10-27 01:00:00 GMT"
[5] "2004-10-28 01:00:00 GMT" "2004-10-29 01:00:00 GMT"
[7] "2004-10-30 01:00:00 GMT" "2004-10-31 01:00:00 GMT"
[1] ""
class(res):  POSIXct POSIXt 
unclass(res):  1098579600 1098666000 1098752400 1098838800 1098925200 1099011600 1099098000 1099184400 

[1] "charvec:"
[1] "2004-10-24 01:00:00" "2004-10-25 01:00:00" "2004-10-26 01:00:00"
[4] "2004-10-27 01:00:00" "2004-10-28 01:00:00" "2004-10-29 01:00:00"
[7] "2004-10-30 01:00:00" "2004-10-31 01:00:00"
[1] "ct:"
[1] "2004-10-24 01:00:00 GMT" "2004-10-25 01:00:00 GMT"
[3] "2004-10-26 01:00:00 GMT" "2004-10-27 01:00:00 GMT"
[5] "2004-10-28 01:00:00 GMT" "2004-10-29 01:00:00 GMT"
[7] "2004-10-30 01:00:00 GMT" "2004-10-31 01:00:00 GMT"
[1] ""
Called from: .formatFinCenterNum(unclass(ct), zone, type = "any2gmt")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#329: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
Called from: .formatFinCenterNum(num, .Object@FinCenter, "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#329: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
> tmp
Called from: .formatFinCenterNum(as.numeric(getDataPart(x)), FinCenter, type = "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#329: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
London
[1] [2004-10-24 01:00:00] [2004-10-25 01:00:00] [2004-10-26 01:00:00]
[4] [2004-10-27 01:00:00] [2004-10-28 01:00:00] [2004-10-29 01:00:00]
[7] [2004-10-30 01:00:00] [2004-10-31 01:00:00]
> 
> tmp <- timeSequence(from = "2004-10-20 01:00:00", to = "2004-10-31 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
tmp <- timeSequence(from = "2004-10-20 01:00:00", to = "2004-10-31 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
[1] "charvec:"
[1] "2004-10-20 01:00:00"
[1] "ct:"
[1] "2004-10-20 01:00:00 GMT"
[1] ""
[1] "charvec:"
[1] "2004-10-31 01:00:00"
[1] "ct:"
[1] "2004-10-31 01:00:00 GMT"
[1] ""
[1] "res:"
 [1] "2004-10-20 01:00:00 GMT" "2004-10-21 01:00:00 GMT"
 [3] "2004-10-22 01:00:00 GMT" "2004-10-23 01:00:00 GMT"
 [5] "2004-10-24 01:00:00 GMT" "2004-10-25 01:00:00 GMT"
 [7] "2004-10-26 01:00:00 GMT" "2004-10-27 01:00:00 GMT"
 [9] "2004-10-28 01:00:00 GMT" "2004-10-29 01:00:00 GMT"
[11] "2004-10-30 01:00:00 GMT" "2004-10-31 01:00:00 GMT"
[1] ""
class(res):  POSIXct POSIXt 
unclass(res):  1098234000 1098320400 1098406800 1098493200 1098579600 1098666000 1098752400 1098838800 1098925200 1099011600 1099098000 1099184400 

[1] "charvec:"
 [1] "2004-10-20 01:00:00" "2004-10-21 01:00:00" "2004-10-22 01:00:00"
 [4] "2004-10-23 01:00:00" "2004-10-24 01:00:00" "2004-10-25 01:00:00"
 [7] "2004-10-26 01:00:00" "2004-10-27 01:00:00" "2004-10-28 01:00:00"
[10] "2004-10-29 01:00:00" "2004-10-30 01:00:00" "2004-10-31 01:00:00"
[1] "ct:"
 [1] "2004-10-20 01:00:00 GMT" "2004-10-21 01:00:00 GMT"
 [3] "2004-10-22 01:00:00 GMT" "2004-10-23 01:00:00 GMT"
 [5] "2004-10-24 01:00:00 GMT" "2004-10-25 01:00:00 GMT"
 [7] "2004-10-26 01:00:00 GMT" "2004-10-27 01:00:00 GMT"
 [9] "2004-10-28 01:00:00 GMT" "2004-10-29 01:00:00 GMT"
[11] "2004-10-30 01:00:00 GMT" "2004-10-31 01:00:00 GMT"
[1] ""
Called from: .formatFinCenterNum(unclass(ct), zone, type = "any2gmt")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#329: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> changed
 [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
Browse[2]> offSetIdx
 [1] 174 174 174 174 174 174 174 174 174 174 174 175
Browse[2]> dst.list$offSet[offSetIdx]
 [1] 3600 3600 3600 3600 3600 3600 3600 3600 3600 3600 3600    0
Browse[2]> 
Called from: .formatFinCenterNum(num, .Object@FinCenter, "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#329: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
> tmp
Called from: .formatFinCenterNum(as.numeric(getDataPart(x)), FinCenter, type = "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#329: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
London
 [1] [2004-10-20 01:00:00] [2004-10-21 01:00:00] [2004-10-22 01:00:00]
 [4] [2004-10-23 01:00:00] [2004-10-24 01:00:00] [2004-10-25 01:00:00]
 [7] [2004-10-26 01:00:00] [2004-10-27 01:00:00] [2004-10-28 01:00:00]
[10] [2004-10-29 01:00:00] [2004-10-30 01:00:00] [2004-10-31 01:00:00]
> tmp <- timeSequence(from = "2004-10-29 01:00:00", to = "2004-11-03 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
tmp <- timeSequence(from = "2004-10-29 01:00:00", to = "2004-11-03 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
[1] "charvec:"
[1] "2004-10-29 01:00:00"
[1] "ct:"
[1] "2004-10-29 01:00:00 GMT"
[1] ""
[1] "charvec:"
[1] "2004-11-03 01:00:00"
[1] "ct:"
[1] "2004-11-03 01:00:00 GMT"
[1] ""
[1] "res:"
[1] "2004-10-29 01:00:00 GMT" "2004-10-30 01:00:00 GMT"
[3] "2004-10-31 01:00:00 GMT" "2004-11-01 01:00:00 GMT"
[5] "2004-11-02 01:00:00 GMT" "2004-11-03 01:00:00 GMT"
[1] ""
class(res):  POSIXct POSIXt 
unclass(res):  1099011600 1099098000 1099184400 1099270800 1099357200 1099443600 

[1] "charvec:"
[1] "2004-10-29 01:00:00" "2004-10-30 01:00:00" "2004-10-31 01:00:00"
[4] "2004-11-01 01:00:00" "2004-11-02 01:00:00" "2004-11-03 01:00:00"
[1] "ct:"
[1] "2004-10-29 01:00:00 GMT" "2004-10-30 01:00:00 GMT"
[3] "2004-10-31 01:00:00 GMT" "2004-11-01 01:00:00 GMT"
[5] "2004-11-02 01:00:00 GMT" "2004-11-03 01:00:00 GMT"
[1] ""
Called from: .formatFinCenterNum(unclass(ct), zone, type = "any2gmt")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#329: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
Called from: .formatFinCenterNum(num, .Object@FinCenter, "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#329: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
> 
> tmp
Called from: .formatFinCenterNum(as.numeric(getDataPart(x)), FinCenter, type = "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#329: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
London
[1] [2004-10-29 01:00:00] [2004-10-30 01:00:00] [2004-10-31 01:00:00]
[4] [2004-11-01 01:00:00] [2004-11-02 01:00:00] [2004-11-03 01:00:00]
> 
> 
> 
> devtools::load_all()
> tmp <- timeSequence(from = "2004-10-29 01:00:00", to = "2004-11-03 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
tmp <- timeSequence(from = "2004-10-29 01:00:00", to = "2004-11-03 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
[1] "charvec:"
[1] "2004-10-29 01:00:00"
[1] "ct:"
[1] "2004-10-29 01:00:00 GMT"
[1] ""
[1] "charvec:"
[1] "2004-11-03 01:00:00"
[1] "ct:"
[1] "2004-11-03 01:00:00 GMT"
[1] ""
[1] "res:"
[1] "2004-10-29 01:00:00 GMT" "2004-10-30 01:00:00 GMT"
[3] "2004-10-31 01:00:00 GMT" "2004-11-01 01:00:00 GMT"
[5] "2004-11-02 01:00:00 GMT" "2004-11-03 01:00:00 GMT"
[1] ""
class(res):  POSIXct POSIXt 
unclass(res):  1099011600 1099098000 1099184400 1099270800 1099357200 1099443600 

[1] "charvec:"
[1] "2004-10-29 01:00:00" "2004-10-30 01:00:00" "2004-10-31 01:00:00"
[4] "2004-11-01 01:00:00" "2004-11-02 01:00:00" "2004-11-03 01:00:00"
[1] "ct:"
[1] "2004-10-29 01:00:00 GMT" "2004-10-30 01:00:00 GMT"
[3] "2004-10-31 01:00:00 GMT" "2004-11-01 01:00:00 GMT"
[5] "2004-11-02 01:00:00 GMT" "2004-11-03 01:00:00 GMT"
[1] ""
Called from: .formatFinCenterNum(unclass(ct), zone, type = "any2gmt")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#328: offSetIdx <- shifted_offset
Browse[2]> 
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#330: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
Called from: .formatFinCenterNum(num, .Object@FinCenter, "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#328: offSetIdx <- shifted_offset
Browse[2]> 
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#330: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
> tmp
Called from: .formatFinCenterNum(as.numeric(getDataPart(x)), FinCenter, type = "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#328: offSetIdx <- shifted_offset
Browse[2]> 
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#330: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
London
[1] [2004-10-29 01:00:00] [2004-10-30 01:00:00] [2004-10-31 01:00:00]
[4] [2004-11-01 01:00:00] [2004-11-02 01:00:00] [2004-11-03 01:00:00]
> tmp@Data
[1] "2004-10-29 00:00:00 GMT" "2004-10-30 00:00:00 GMT"
[3] "2004-10-31 01:00:00 GMT" "2004-11-01 01:00:00 GMT"
[5] "2004-11-02 01:00:00 GMT" "2004-11-03 01:00:00 GMT"
> dayOfWeek("2004-10-30")
Error in dayOfWeek("2004-10-30") : inherits(x, "timeDate") is not TRUE
> dayOfWeek(tmp)
Called from: .formatFinCenterNum(as.numeric(getDataPart(x)), FinCenter, type = "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#328: offSetIdx <- shifted_offset
Browse[2]> 
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#330: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
Called from: .formatFinCenterNum(as.numeric(getDataPart(x)), FinCenter, type = "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#328: offSetIdx <- shifted_offset
Browse[2]> 
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#330: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
2004-10-29 01:00:00 2004-10-30 01:00:00 2004-10-31 01:00:00 2004-11-01 01:00:00 
              "Fri"               "Sat"               "Sun"               "Mon" 
2004-11-02 01:00:00 2004-11-03 01:00:00 
              "Tue"               "Wed" 
> 
> 
> 
> 
> rulesFinCenter("London")
                 London offSet isdst TimeZone     numeric
1   1901-12-14 20:45:52      0     0      GMT -2147397248
2   1916-05-21 02:00:00   3600     1      BST -1691964000
3   1916-10-01 02:00:00      0     0      GMT -1680472800
4   1917-04-08 02:00:00   3600     1      BST -1664143200
5   1917-09-17 02:00:00      0     0      GMT -1650146400
6   1918-03-24 02:00:00   3600     1      BST -1633903200
7   1918-09-30 02:00:00      0     0      GMT -1617487200
8   1919-03-30 02:00:00   3600     1      BST -1601848800
9   1919-09-29 02:00:00      0     0      GMT -1586037600
10  1920-03-28 02:00:00   3600     1      BST -1570399200
11  1920-10-25 02:00:00      0     0      GMT -1552168800
12  1921-04-03 02:00:00   3600     1      BST -1538344800
13  1921-10-03 02:00:00      0     0      GMT -1522533600
14  1922-03-26 02:00:00   3600     1      BST -1507500000
15  1922-10-08 02:00:00      0     0      GMT -1490565600
16  1923-04-22 02:00:00   3600     1      BST -1473631200
17  1923-09-16 02:00:00      0     0      GMT -1460930400
18  1924-04-13 02:00:00   3600     1      BST -1442786400
19  1924-09-21 02:00:00      0     0      GMT -1428876000
20  1925-04-19 02:00:00   3600     1      BST -1410732000
21  1925-10-04 02:00:00      0     0      GMT -1396216800
22  1926-04-18 02:00:00   3600     1      BST -1379282400
23  1926-10-03 02:00:00      0     0      GMT -1364767200
24  1927-04-10 02:00:00   3600     1      BST -1348437600
25  1927-10-02 02:00:00      0     0      GMT -1333317600
26  1928-04-22 02:00:00   3600     1      BST -1315778400
27  1928-10-07 02:00:00      0     0      GMT -1301263200
28  1929-04-21 02:00:00   3600     1      BST -1284328800
29  1929-10-06 02:00:00      0     0      GMT -1269813600
30  1930-04-13 02:00:00   3600     1      BST -1253484000
31  1930-10-05 02:00:00      0     0      GMT -1238364000
32  1931-04-19 02:00:00   3600     1      BST -1221429600
33  1931-10-04 02:00:00      0     0      GMT -1206914400
34  1932-04-17 02:00:00   3600     1      BST -1189980000
35  1932-10-02 02:00:00      0     0      GMT -1175464800
36  1933-04-09 02:00:00   3600     1      BST -1159135200
37  1933-10-08 02:00:00      0     0      GMT -1143410400
38  1934-04-22 02:00:00   3600     1      BST -1126476000
39  1934-10-07 02:00:00      0     0      GMT -1111960800
40  1935-04-14 02:00:00   3600     1      BST -1095631200
41  1935-10-06 02:00:00      0     0      GMT -1080511200
42  1936-04-19 02:00:00   3600     1      BST -1063576800
43  1936-10-04 02:00:00      0     0      GMT -1049061600
44  1937-04-18 02:00:00   3600     1      BST -1032127200
45  1937-10-03 02:00:00      0     0      GMT -1017612000
46  1938-04-10 02:00:00   3600     1      BST -1001282400
47  1938-10-02 02:00:00      0     0      GMT  -986162400
48  1939-04-16 02:00:00   3600     1      BST  -969228000
49  1939-11-19 02:00:00      0     0      GMT  -950479200
50  1940-02-25 02:00:00   3600     1      BST  -942012000
51  1941-05-04 01:00:00   7200     1     BDST  -904518000
52  1941-08-10 01:00:00   3600     1      BST  -896050800
53  1942-04-05 01:00:00   7200     1     BDST  -875487600
54  1942-08-09 01:00:00   3600     1      BST  -864601200
55  1943-04-04 01:00:00   7200     1     BDST  -844038000
56  1943-08-15 01:00:00   3600     1      BST  -832546800
57  1944-04-02 01:00:00   7200     1     BDST  -812588400
58  1944-09-17 01:00:00   3600     1      BST  -798073200
59  1945-04-02 01:00:00   7200     1     BDST  -781052400
60  1945-07-15 01:00:00   3600     1      BST  -772066800
61  1945-10-07 02:00:00      0     0      GMT  -764805600
62  1946-04-14 02:00:00   3600     1      BST  -748476000
63  1946-10-06 02:00:00      0     0      GMT  -733356000
64  1947-03-16 02:00:00   3600     1      BST  -719445600
65  1947-04-13 01:00:00   7200     1     BDST  -717030000
66  1947-08-10 01:00:00   3600     1      BST  -706748400
67  1947-11-02 02:00:00      0     0      GMT  -699487200
68  1948-03-14 02:00:00   3600     1      BST  -687996000
69  1948-10-31 02:00:00      0     0      GMT  -668037600
70  1949-04-03 02:00:00   3600     1      BST  -654732000
71  1949-10-30 02:00:00      0     0      GMT  -636588000
72  1950-04-16 02:00:00   3600     1      BST  -622072800
73  1950-10-22 02:00:00      0     0      GMT  -605743200
74  1951-04-15 02:00:00   3600     1      BST  -590623200
75  1951-10-21 02:00:00      0     0      GMT  -574293600
76  1952-04-20 02:00:00   3600     1      BST  -558568800
77  1952-10-26 02:00:00      0     0      GMT  -542239200
78  1953-04-19 02:00:00   3600     1      BST  -527119200
79  1953-10-04 02:00:00      0     0      GMT  -512604000
80  1954-04-11 02:00:00   3600     1      BST  -496274400
81  1954-10-03 02:00:00      0     0      GMT  -481154400
82  1955-04-17 02:00:00   3600     1      BST  -464220000
83  1955-10-02 02:00:00      0     0      GMT  -449704800
84  1956-04-22 02:00:00   3600     1      BST  -432165600
85  1956-10-07 02:00:00      0     0      GMT  -417650400
86  1957-04-14 02:00:00   3600     1      BST  -401320800
87  1957-10-06 02:00:00      0     0      GMT  -386200800
88  1958-04-20 02:00:00   3600     1      BST  -369266400
89  1958-10-05 02:00:00      0     0      GMT  -354751200
90  1959-04-19 02:00:00   3600     1      BST  -337816800
91  1959-10-04 02:00:00      0     0      GMT  -323301600
92  1960-04-10 02:00:00   3600     1      BST  -306972000
93  1960-10-02 02:00:00      0     0      GMT  -291852000
94  1961-03-26 02:00:00   3600     1      BST  -276732000
95  1961-10-29 02:00:00      0     0      GMT  -257983200
96  1962-03-25 02:00:00   3600     1      BST  -245282400
97  1962-10-28 02:00:00      0     0      GMT  -226533600
98  1963-03-31 02:00:00   3600     1      BST  -213228000
99  1963-10-27 02:00:00      0     0      GMT  -195084000
100 1964-03-22 02:00:00   3600     1      BST  -182383200
101 1964-10-25 02:00:00      0     0      GMT  -163634400
102 1965-03-21 02:00:00   3600     1      BST  -150933600
103 1965-10-24 02:00:00      0     0      GMT  -132184800
104 1966-03-20 02:00:00   3600     1      BST  -119484000
105 1966-10-23 02:00:00      0     0      GMT  -100735200
106 1967-03-19 02:00:00   3600     1      BST   -88034400
107 1967-10-29 02:00:00      0     0      GMT   -68680800
108 1968-10-26 23:00:00   3600     0      BST   -37242000
109 1971-10-31 02:00:00      0     0      GMT    57722400
110 1972-03-19 02:00:00   3600     1      BST    69818400
111 1972-10-29 02:00:00      0     0      GMT    89172000
112 1973-03-18 02:00:00   3600     1      BST   101268000
113 1973-10-28 02:00:00      0     0      GMT   120621600
114 1974-03-17 02:00:00   3600     1      BST   132717600
115 1974-10-27 02:00:00      0     0      GMT   152071200
116 1975-03-16 02:00:00   3600     1      BST   164167200
117 1975-10-26 02:00:00      0     0      GMT   183520800
118 1976-03-21 02:00:00   3600     1      BST   196221600
119 1976-10-24 02:00:00      0     0      GMT   214970400
120 1977-03-20 02:00:00   3600     1      BST   227671200
121 1977-10-23 02:00:00      0     0      GMT   246420000
122 1978-03-19 02:00:00   3600     1      BST   259120800
123 1978-10-29 02:00:00      0     0      GMT   278474400
124 1979-03-18 02:00:00   3600     1      BST   290570400
125 1979-10-28 02:00:00      0     0      GMT   309924000
126 1980-03-16 02:00:00   3600     1      BST   322020000
127 1980-10-26 02:00:00      0     0      GMT   341373600
128 1981-03-29 01:00:00   3600     1      BST   354675600
129 1981-10-25 01:00:00      0     0      GMT   372819600
130 1982-03-28 01:00:00   3600     1      BST   386125200
131 1982-10-24 01:00:00      0     0      GMT   404269200
132 1983-03-27 01:00:00   3600     1      BST   417574800
133 1983-10-23 01:00:00      0     0      GMT   435718800
134 1984-03-25 01:00:00   3600     1      BST   449024400
135 1984-10-28 01:00:00      0     0      GMT   467773200
136 1985-03-31 01:00:00   3600     1      BST   481078800
137 1985-10-27 01:00:00      0     0      GMT   499222800
138 1986-03-30 01:00:00   3600     1      BST   512528400
139 1986-10-26 01:00:00      0     0      GMT   530672400
140 1987-03-29 01:00:00   3600     1      BST   543978000
141 1987-10-25 01:00:00      0     0      GMT   562122000
142 1988-03-27 01:00:00   3600     1      BST   575427600
143 1988-10-23 01:00:00      0     0      GMT   593571600
144 1989-03-26 01:00:00   3600     1      BST   606877200
145 1989-10-29 01:00:00      0     0      GMT   625626000
146 1990-03-25 01:00:00   3600     1      BST   638326800
147 1990-10-28 01:00:00      0     0      GMT   657075600
148 1991-03-31 01:00:00   3600     1      BST   670381200
149 1991-10-27 01:00:00      0     0      GMT   688525200
150 1992-03-29 01:00:00   3600     1      BST   701830800
151 1992-10-25 01:00:00      0     0      GMT   719974800
152 1993-03-28 01:00:00   3600     1      BST   733280400
153 1993-10-24 01:00:00      0     0      GMT   751424400
154 1994-03-27 01:00:00   3600     1      BST   764730000
155 1994-10-23 01:00:00      0     0      GMT   782874000
156 1995-03-26 01:00:00   3600     1      BST   796179600
157 1995-10-22 01:00:00      0     0      GMT   814323600
158 1996-03-31 01:00:00   3600     1      BST   828234000
159 1996-10-27 01:00:00      0     0      GMT   846378000
160 1997-03-30 01:00:00   3600     1      BST   859683600
161 1997-10-26 01:00:00      0     0      GMT   877827600
162 1998-03-29 01:00:00   3600     1      BST   891133200
163 1998-10-25 01:00:00      0     0      GMT   909277200
164 1999-03-28 01:00:00   3600     1      BST   922582800
165 1999-10-31 01:00:00      0     0      GMT   941331600
166 2000-03-26 01:00:00   3600     1      BST   954032400
167 2000-10-29 01:00:00      0     0      GMT   972781200
168 2001-03-25 01:00:00   3600     1      BST   985482000
169 2001-10-28 01:00:00      0     0      GMT  1004230800
170 2002-03-31 01:00:00   3600     1      BST  1017536400
171 2002-10-27 01:00:00      0     0      GMT  1035680400
172 2003-03-30 01:00:00   3600     1      BST  1048986000
173 2003-10-26 01:00:00      0     0      GMT  1067130000
174 2004-03-28 01:00:00   3600     1      BST  1080435600
175 2004-10-31 01:00:00      0     0      GMT  1099184400
176 2005-03-27 01:00:00   3600     1      BST  1111885200
177 2005-10-30 01:00:00      0     0      GMT  1130634000
178 2006-03-26 01:00:00   3600     1      BST  1143334800
179 2006-10-29 01:00:00      0     0      GMT  1162083600
180 2007-03-25 01:00:00   3600     1      BST  1174784400
181 2007-10-28 01:00:00      0     0      GMT  1193533200
182 2008-03-30 01:00:00   3600     1      BST  1206838800
183 2008-10-26 01:00:00      0     0      GMT  1224982800
184 2009-03-29 01:00:00   3600     1      BST  1238288400
185 2009-10-25 01:00:00      0     0      GMT  1256432400
186 2010-03-28 01:00:00   3600     1      BST  1269738000
187 2010-10-31 01:00:00      0     0      GMT  1288486800
188 2011-03-27 01:00:00   3600     1      BST  1301187600
189 2011-10-30 01:00:00      0     0      GMT  1319936400
190 2012-03-25 01:00:00   3600     1      BST  1332637200
191 2012-10-28 01:00:00      0     0      GMT  1351386000
192 2013-03-31 01:00:00   3600     1      BST  1364691600
193 2013-10-27 01:00:00      0     0      GMT  1382835600
194 2014-03-30 01:00:00   3600     1      BST  1396141200
195 2014-10-26 01:00:00      0     0      GMT  1414285200
196 2015-03-29 01:00:00   3600     1      BST  1427590800
197 2015-10-25 01:00:00      0     0      GMT  1445734800
198 2016-03-27 01:00:00   3600     1      BST  1459040400
199 2016-10-30 01:00:00      0     0      GMT  1477789200
200 2017-03-26 01:00:00   3600     1      BST  1490490000
201 2017-10-29 01:00:00      0     0      GMT  1509238800
202 2018-03-25 01:00:00   3600     1      BST  1521939600
203 2018-10-28 01:00:00      0     0      GMT  1540688400
204 2019-03-31 01:00:00   3600     1      BST  1553994000
205 2019-10-27 01:00:00      0     0      GMT  1572138000
206 2020-03-29 01:00:00   3600     1      BST  1585443600
207 2020-10-25 01:00:00      0     0      GMT  1603587600
208 2021-03-28 01:00:00   3600     1      BST  1616893200
209 2021-10-31 01:00:00      0     0      GMT  1635642000
210 2022-03-27 01:00:00   3600     1      BST  1648342800
211 2022-10-30 01:00:00      0     0      GMT  1667091600
212 2023-03-26 01:00:00   3600     1      BST  1679792400
213 2023-10-29 01:00:00      0     0      GMT  1698541200
214 2024-03-31 01:00:00   3600     1      BST  1711846800
215 2024-10-27 01:00:00      0     0      GMT  1729990800
216 2025-03-30 01:00:00   3600     1      BST  1743296400
217 2025-10-26 01:00:00      0     0      GMT  1761440400
218 2026-03-29 01:00:00   3600     1      BST  1774746000
219 2026-10-25 01:00:00      0     0      GMT  1792890000
220 2027-03-28 01:00:00   3600     1      BST  1806195600
221 2027-10-31 01:00:00      0     0      GMT  1824944400
222 2028-03-26 01:00:00   3600     1      BST  1837645200
223 2028-10-29 01:00:00      0     0      GMT  1856394000
224 2029-03-25 01:00:00   3600     1      BST  1869094800
225 2029-10-28 01:00:00      0     0      GMT  1887843600
226 2030-03-31 01:00:00   3600     1      BST  1901149200
227 2030-10-27 01:00:00      0     0      GMT  1919293200
228 2031-03-30 01:00:00   3600     1      BST  1932598800
229 2031-10-26 01:00:00      0     0      GMT  1950742800
230 2032-03-28 01:00:00   3600     1      BST  1964048400
231 2032-10-31 01:00:00      0     0      GMT  1982797200
232 2033-03-27 01:00:00   3600     1      BST  1995498000
233 2033-10-30 01:00:00      0     0      GMT  2014246800
234 2034-03-26 01:00:00   3600     1      BST  2026947600
235 2034-10-29 01:00:00      0     0      GMT  2045696400
236 2035-03-25 01:00:00   3600     1      BST  2058397200
237 2035-10-28 01:00:00      0     0      GMT  2077146000
238 2036-03-30 01:00:00   3600     1      BST  2090451600
239 2036-10-26 01:00:00      0     0      GMT  2108595600
240 2037-03-29 01:00:00   3600     1      BST  2121901200
241 2037-10-25 01:00:00      0     0      GMT  2140045200
> class(rulesFinCenter("London"))
[1] "data.frame"
> 
> 
> 
> 
> devtools::load_all()
*** output flushed ***
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
[1] "charvec:"
[1] "2004-03-26 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT"
[1] ""
[1] "charvec:"
[1] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-04-01 01:00:00 GMT"
[1] ""
[1] "res:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
class(res):  POSIXct POSIXt 
unclass(res):  1080262800 1080349200 1080435600 1080522000 1080608400 1080694800 1080781200 

[1] "charvec:"
[1] "2004-03-26 01:00:00" "2004-03-27 01:00:00" "2004-03-28 01:00:00"
[4] "2004-03-29 01:00:00" "2004-03-30 01:00:00" "2004-03-31 01:00:00"
[7] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
> tmp
London
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 03:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> tmp@Data
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 02:00:00 GMT" "2004-03-29 00:00:00 GMT"
[5] "2004-03-30 00:00:00 GMT" "2004-03-31 00:00:00 GMT"
[7] "2004-04-01 00:00:00 GMT"
> 
> 
> 
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
[1] "charvec:"
[1] "2004-03-26 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT"
[1] ""
[1] "charvec:"
[1] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-04-01 01:00:00 GMT"
[1] ""
[1] "res:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
class(res):  POSIXct POSIXt 
unclass(res):  1080262800 1080349200 1080435600 1080522000 1080608400 1080694800 1080781200 

[1] "charvec:"
[1] "2004-03-26 01:00:00" "2004-03-27 01:00:00" "2004-03-28 01:00:00"
[4] "2004-03-29 01:00:00" "2004-03-30 01:00:00" "2004-03-31 01:00:00"
[7] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
Called from: .formatFinCenterNum(unclass(ct), zone, type = "any2gmt")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#344: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> changed
[1] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE
Browse[2]> offSetIdx
[1] 173 173 173 174 174 174 174
Browse[2]> shifted_offset
[1] 173 173 173 174 174 174 174
Browse[2]> num
[1] 1080262800 1080349200 1080439200 1080522000 1080608400 1080694800 1080781200
attr(,"tzone")
[1] "GMT"
Browse[2]> findInterval(num, dst.list$numeric)
[1] 173 173 174 174 174 174 174
Browse[2]> shifted_offset[indx]
[1] 173 174 174 174 174
Browse[2]> > num[changed] + dst.list$offSet[offSetIdx][changed]
[1] 1080439200
Browse[2]> 
Called from: .formatFinCenterNum(num, .Object@FinCenter, "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#344: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
> tmp
Called from: .formatFinCenterNum(as.numeric(getDataPart(x)), FinCenter, type = "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#344: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
London
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 03:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> tmp@Data
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 02:00:00 GMT" "2004-03-29 00:00:00 GMT"
[5] "2004-03-30 00:00:00 GMT" "2004-03-31 00:00:00 GMT"
[7] "2004-04-01 00:00:00 GMT"
> 
> 
> devtools::load_all()
*** output flushed ***
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
[1] "charvec:"
[1] "2004-03-26 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT"
[1] ""
[1] "charvec:"
[1] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-04-01 01:00:00 GMT"
[1] ""
[1] "res:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
class(res):  POSIXct POSIXt 
unclass(res):  1080262800 1080349200 1080435600 1080522000 1080608400 1080694800 1080781200 

[1] "charvec:"
[1] "2004-03-26 01:00:00" "2004-03-27 01:00:00" "2004-03-28 01:00:00"
[4] "2004-03-29 01:00:00" "2004-03-30 01:00:00" "2004-03-31 01:00:00"
[7] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
Called from: .formatFinCenterNum(unclass(ct), zone, type = "any2gmt")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#344: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
Called from: .formatFinCenterNum(num, .Object@FinCenter, "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#344: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
> 
> tmp
Called from: .formatFinCenterNum(as.numeric(getDataPart(x)), FinCenter, type = "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#344: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
London
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 01:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> tmp@Data
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 00:00:00 GMT"
[5] "2004-03-30 00:00:00 GMT" "2004-03-31 00:00:00 GMT"
[7] "2004-04-01 00:00:00 GMT"
> 
> 
> 
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
[1] "charvec:"
[1] "2004-03-26 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT"
[1] ""
[1] "charvec:"
[1] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-04-01 01:00:00 GMT"
[1] ""
[1] "res:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
class(res):  POSIXct POSIXt 
unclass(res):  1080262800 1080349200 1080435600 1080522000 1080608400 1080694800 1080781200 

[1] "charvec:"
[1] "2004-03-26 01:00:00" "2004-03-27 01:00:00" "2004-03-28 01:00:00"
[4] "2004-03-29 01:00:00" "2004-03-30 01:00:00" "2004-03-31 01:00:00"
[7] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
Called from: .formatFinCenterNum(unclass(ct), zone, type = "any2gmt")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#344: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
Called from: .formatFinCenterNum(num, .Object@FinCenter, "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#344: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
> tmp
Called from: .formatFinCenterNum(as.numeric(getDataPart(x)), FinCenter, type = "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#344: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
London
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 00:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
[1] "charvec:"
[1] "2004-03-26 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT"
[1] ""
[1] "charvec:"
[1] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-04-01 01:00:00 GMT"
[1] ""
[1] "res:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
class(res):  POSIXct POSIXt 
unclass(res):  1080262800 1080349200 1080435600 1080522000 1080608400 1080694800 1080781200 

[1] "charvec:"
[1] "2004-03-26 01:00:00" "2004-03-27 01:00:00" "2004-03-28 01:00:00"
[4] "2004-03-29 01:00:00" "2004-03-30 01:00:00" "2004-03-31 01:00:00"
[7] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
Called from: .formatFinCenterNum(unclass(ct), zone, type = "any2gmt")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#344: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
Called from: .formatFinCenterNum(num, .Object@FinCenter, "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#344: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
> 
> tmp
Called from: .formatFinCenterNum(as.numeric(getDataPart(x)), FinCenter, type = "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#344: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
London
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 03:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> 
> 
> 
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
[1] "charvec:"
[1] "2004-03-26 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT"
[1] ""
[1] "charvec:"
[1] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-04-01 01:00:00 GMT"
[1] ""
[1] "res:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
class(res):  POSIXct POSIXt 
unclass(res):  1080262800 1080349200 1080435600 1080522000 1080608400 1080694800 1080781200 

[1] "charvec:"
[1] "2004-03-26 01:00:00" "2004-03-27 01:00:00" "2004-03-28 01:00:00"
[4] "2004-03-29 01:00:00" "2004-03-30 01:00:00" "2004-03-31 01:00:00"
[7] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
Called from: .formatFinCenterNum(unclass(ct), zone, type = "any2gmt")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#344: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
Called from: .formatFinCenterNum(num, .Object@FinCenter, "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#344: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
> 
> tmp
Called from: .formatFinCenterNum(as.numeric(getDataPart(x)), FinCenter, type = "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#344: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
London
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 03:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
[1] "charvec:"
[1] "2004-03-26 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT"
[1] ""
[1] "charvec:"
[1] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-04-01 01:00:00 GMT"
[1] ""
[1] "res:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
class(res):  POSIXct POSIXt 
unclass(res):  1080262800 1080349200 1080435600 1080522000 1080608400 1080694800 1080781200 

[1] "charvec:"
[1] "2004-03-26 01:00:00" "2004-03-27 01:00:00" "2004-03-28 01:00:00"
[4] "2004-03-29 01:00:00" "2004-03-30 01:00:00" "2004-03-31 01:00:00"
[7] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
Called from: .formatFinCenterNum(unclass(ct), zone, type = "any2gmt")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#344: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
Called from: .formatFinCenterNum(num, .Object@FinCenter, "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#344: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
> tmp
Called from: .formatFinCenterNum(as.numeric(getDataPart(x)), FinCenter, type = "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#344: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
London
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 01:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> 
> 
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
[1] "charvec:"
[1] "2004-03-26 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT"
[1] ""
[1] "charvec:"
[1] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-04-01 01:00:00 GMT"
[1] ""
[1] "res:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
class(res):  POSIXct POSIXt 
unclass(res):  1080262800 1080349200 1080435600 1080522000 1080608400 1080694800 1080781200 

[1] "charvec:"
[1] "2004-03-26 01:00:00" "2004-03-27 01:00:00" "2004-03-28 01:00:00"
[4] "2004-03-29 01:00:00" "2004-03-30 01:00:00" "2004-03-31 01:00:00"
[7] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
Called from: .formatFinCenterNum(unclass(ct), zone, type = "any2gmt")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#344: num + signum * dst.list$offSet[shifted_offset]
Browse[2]> 
Called from: .formatFinCenterNum(num, .Object@FinCenter, "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#344: num + signum * dst.list$offSet[shifted_offset]
Browse[2]> 
> tmp
Called from: .formatFinCenterNum(as.numeric(getDataPart(x)), FinCenter, type = "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#344: num + signum * dst.list$offSet[shifted_offset]
Browse[2]> 
London
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 01:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
[1] "charvec:"
[1] "2004-03-26 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT"
[1] ""
[1] "charvec:"
[1] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-04-01 01:00:00 GMT"
[1] ""
[1] "res:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
class(res):  POSIXct POSIXt 
unclass(res):  1080262800 1080349200 1080435600 1080522000 1080608400 1080694800 1080781200 

[1] "charvec:"
[1] "2004-03-26 01:00:00" "2004-03-27 01:00:00" "2004-03-28 01:00:00"
[4] "2004-03-29 01:00:00" "2004-03-30 01:00:00" "2004-03-31 01:00:00"
[7] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
Called from: .formatFinCenterNum(unclass(ct), zone, type = "any2gmt")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#344: num + signum * dst.list$offSet[shifted_offset]
Browse[2]> changed
[1] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE
Browse[2]> shifted_offset
[1] 173 173 173 174 174 174 174
Browse[2]> offSetIdx
[1] 173 173 174 174 174 174 174
Browse[2]> 
Called from: .formatFinCenterNum(num, .Object@FinCenter, "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#344: num + signum * dst.list$offSet[shifted_offset]
Browse[2]> 
> 
> tmp
Called from: .formatFinCenterNum(as.numeric(getDataPart(x)), FinCenter, type = "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#344: num + signum * dst.list$offSet[shifted_offset]
Browse[2]> 
London
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 01:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> tmp@Data
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 00:00:00 GMT"
[5] "2004-03-30 00:00:00 GMT" "2004-03-31 00:00:00 GMT"
[7] "2004-04-01 00:00:00 GMT"
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
[1] "charvec:"
[1] "2004-03-26 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT"
[1] ""
[1] "charvec:"
[1] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-04-01 01:00:00 GMT"
[1] ""
[1] "res:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
class(res):  POSIXct POSIXt 
unclass(res):  1080262800 1080349200 1080435600 1080522000 1080608400 1080694800 1080781200 

[1] "charvec:"
[1] "2004-03-26 01:00:00" "2004-03-27 01:00:00" "2004-03-28 01:00:00"
[4] "2004-03-29 01:00:00" "2004-03-30 01:00:00" "2004-03-31 01:00:00"
[7] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
Called from: .formatFinCenterNum(unclass(ct), zone, type = "any2gmt")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#344: num + signum * dst.list$offSet[shifted_offset]
Browse[2]> 
Called from: .formatFinCenterNum(num, .Object@FinCenter, "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#344: num + signum * dst.list$offSet[shifted_offset]
Browse[2]> 
> 
> tmp
Called from: .formatFinCenterNum(as.numeric(getDataPart(x)), FinCenter, type = "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#344: num + signum * dst.list$offSet[shifted_offset]
Browse[2]> 
London
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 03:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> tmp@Data
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 02:00:00 GMT" "2004-03-29 00:00:00 GMT"
[5] "2004-03-30 00:00:00 GMT" "2004-03-31 00:00:00 GMT"
[7] "2004-04-01 00:00:00 GMT"
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
[1] "charvec:"
[1] "2004-03-26 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT"
[1] ""
Error in .formatFinCenterNum(num, .Object@FinCenter, "gmt2any") (from timeDate.R#351) : 
  object 'shifted_offset' not found
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
[1] "charvec:"
[1] "2004-03-26 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT"
[1] ""
[1] "charvec:"
[1] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-04-01 01:00:00 GMT"
[1] ""
[1] "res:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
class(res):  POSIXct POSIXt 
unclass(res):  1080262800 1080349200 1080435600 1080522000 1080608400 1080694800 1080781200 

[1] "charvec:"
[1] "2004-03-26 01:00:00" "2004-03-27 01:00:00" "2004-03-28 01:00:00"
[4] "2004-03-29 01:00:00" "2004-03-30 01:00:00" "2004-03-31 01:00:00"
[7] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
Called from: .formatFinCenterNum(unclass(ct), zone, type = "any2gmt")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#343: num + signum * dst.list$offSet[shifted_offset]
Browse[2]> 
> tmp
London
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 03:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> tmp@Data
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 02:00:00 GMT" "2004-03-29 00:00:00 GMT"
[5] "2004-03-30 00:00:00 GMT" "2004-03-31 00:00:00 GMT"
[7] "2004-04-01 00:00:00 GMT"
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
[1] "charvec:"
[1] "2004-03-26 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT"
[1] ""
[1] "charvec:"
[1] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-04-01 01:00:00 GMT"
[1] ""
[1] "res:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
class(res):  POSIXct POSIXt 
unclass(res):  1080262800 1080349200 1080435600 1080522000 1080608400 1080694800 1080781200 

[1] "charvec:"
[1] "2004-03-26 01:00:00" "2004-03-27 01:00:00" "2004-03-28 01:00:00"
[4] "2004-03-29 01:00:00" "2004-03-30 01:00:00" "2004-03-31 01:00:00"
[7] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
Called from: .formatFinCenterNum(unclass(ct), zone, type = "any2gmt")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#343: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
> 
> tmp
London
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 02:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> tmp@Data
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 00:00:00 GMT"
[5] "2004-03-30 00:00:00 GMT" "2004-03-31 00:00:00 GMT"
[7] "2004-04-01 00:00:00 GMT"
> ?strptime
> strptime
*** output flushed ***
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
[1] "charvec:"
[1] "2004-03-26 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT"
[1] ""
[1] "charvec:"
[1] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-04-01 01:00:00 GMT"
[1] ""
Called from: seq.timeDate(from = from, to = to, by = by)
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate-Sequence.R#234: print("res:")
Browse[2]> r1
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT" "2004-04-02 01:00:00 GMT"
Browse[2]> unclass(r1)
$sec
[1] 0

$min
[1] 0

$hour
[1] 1

$mday
[1] 26 27 28 29 30 31 32 33

$mon
[1] 2

$year
[1] 104

$wday
[1] 5

$yday
[1] 85

$isdst
[1] -1

attr(,"tzone")
[1] "GMT"
Browse[2]> 
[1] "res:"
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate-Sequence.R#235: print(res)
Browse[2]> 
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate-Sequence.R#236: print("")
Browse[2]> 
[1] ""
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate-Sequence.R#237: cat("class(res): ", class(res), "\n")
Browse[2]> 
class(res):  POSIXct POSIXt 
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate-Sequence.R#238: cat("unclass(res): ", unclass(res), "\n\n")
Browse[2]> 
unclass(res):  1080262800 1080349200 1080435600 1080522000 1080608400 1080694800 1080781200 

debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate-Sequence.R#240: timeDate(res, zone = zone, FinCenter = FinCenter)
Browse[2]> 
[1] "charvec:"
[1] "2004-03-26 01:00:00" "2004-03-27 01:00:00" "2004-03-28 01:00:00"
[4] "2004-03-29 01:00:00" "2004-03-30 01:00:00" "2004-03-31 01:00:00"
[7] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
> 
> 
> 
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
[1] "charvec:"
[1] "2004-03-26 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT"
[1] ""
[1] "charvec:"
[1] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-04-01 01:00:00 GMT"
[1] ""
$sec
[1] 0

$min
[1] 0

$hour
[1] 1

$mday
[1] 26 27 28 29 30 31 32 33

$mon
[1] 2

$year
[1] 104

$wday
[1] 5

$yday
[1] 85

$isdst
[1] 0

attr(,"tzone")
[1] "GMT"
[1] "res:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
class(res):  POSIXct POSIXt 
unclass(res):  1080262800 1080349200 1080435600 1080522000 1080608400 1080694800 1080781200 

Called from: seq.timeDate(from = from, to = to, by = by)
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate-Sequence.R#241: timeDate(res, zone = zone, FinCenter = FinCenter)
Browse[2]> 
[1] "charvec:"
[1] "2004-03-26 01:00:00" "2004-03-27 01:00:00" "2004-03-28 01:00:00"
[4] "2004-03-29 01:00:00" "2004-03-30 01:00:00" "2004-03-31 01:00:00"
[7] "2004-04-01 01:00:00"
[1] "ct:"
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
[1] ""
> showMethods(timeDate)
Function: timeDate (package timeDate)
charvec="ANY"
charvec="character"
charvec="Date"
charvec="missing"
charvec="numeric"
charvec="POSIXct"
    (inherited from: charvec="POSIXt")
charvec="POSIXt"
charvec="timeDate"

> timeDate
nonstandardGenericFunction for "timeDate" defined from package "timeDate"

function (charvec, format = NULL, zone = "", FinCenter = "") 
{
    standardGeneric("timeDate")
}
<environment: 0x56395ae9b330>
Methods may be defined for arguments: charvec, format, zone, FinCenter
Use  showMethods(timeDate)  for currently available ones.
> as.POSIXlt.numeric
function (x, tz = "", origin, ...) 
{
    if (missing(origin)) {
        if (!length(x)) 
            return(as.POSIXlt.character(character(), tz))
        if (!any(is.finite(x))) 
            return(as.POSIXlt.character(rep_len(NA_character_, 
                length(x)), tz))
        stop("'origin' must be supplied")
    }
    as.POSIXlt(as.POSIXct(origin, tz = "UTC", ...) + x, tz = tz)
}
<bytecode: 0x563905e09a10>
<environment: namespace:base>
> as.POSIXlt.POSIXct
function (x, tz = "", ...) 
{
    if ((missing(tz) || is.null(tz)) && !is.null(tzone <- attr(x, 
        "tzone"))) 
        tz <- tzone[1L]
    .Internal(as.POSIXlt(x, tz))
}
<bytecode: 0x5638e00cf270>
<environment: namespace:base>
> ?.Internal
> as.POSIXct("2004-03-28 01:00:00")
[1] "2004-03-28 GMT"
> as.POSIXct("2004-03-28 01:00:00", tz = "BST")
[1] "2004-03-28 01:00:00 BST"
> strptime("2004-03-28 01:00:00", tz = "BST")
Error in strptime("2004-03-28 01:00:00", tz = "BST") : 
  argument "format" is missing, with no default
> t1 <- as.POSIXlt("2004-03-28 01:00:00")
> t1
[1] "2004-03-28 01:00:00 BST"
> str(t1)
 POSIXlt[1:1], format: "2004-03-28 01:00:00"
> unclass(t1)
$sec
[1] 0

$min
[1] 0

$hour
[1] 1

$mday
[1] 28

$mon
[1] 2

$year
[1] 104

$wday
[1] 0

$yday
[1] 87

$isdst
[1] 1

$zone
[1] "BST"

$gmtoff
[1] NA

> as.POSIXct(t1)
[1] "2004-03-28 GMT"
> t1 <- as.POSIXlt("2004-03-28 01:00:00", tz = "BST")
> t1
[1] "2004-03-28 01:00:00 BST"
> as.POSIXct(t1)
[1] "2004-03-28 01:00:00 BST"
> as.POSIXlt(as.POSIXct(t1))
[1] "2004-03-28 01:00:00 BST"
> unclass(as.POSIXlt(as.POSIXct(t1)))
$sec
[1] 0

$min
[1] 0

$hour
[1] 1

$mday
[1] 28

$mon
[1] 2

$year
[1] 104

$wday
[1] 0

$yday
[1] 87

$isdst
[1] 0

$zone
[1] "BST"

$gmtoff
[1] 0

attr(,"tzone")
[1] "BST" "BST" ""   
> as.POSIXlt(as.POSIXct(t1))
[1] "2004-03-28 01:00:00 BST"
> class(t1)
[1] "POSIXlt" "POSIXt" 
> unclass(t1)
$sec
[1] 0

$min
[1] 0

$hour
[1] 1

$mday
[1] 28

$mon
[1] 2

$year
[1] 104

$wday
[1] 0

$yday
[1] 87

$isdst
[1] 0

$zone
[1] "BST"

$gmtoff
[1] NA

attr(,"tzone")
[1] "BST"
> t1a <- t1
> t1a$isdst
[1] 0
> t1a$isdst <- 1
> t1a
[1] "2004-03-28 01:00:00 BST"
> as.POSIXct(t1a)
[1] NA
> .POSIXct
function (xx, tz = NULL, cl = c("POSIXct", "POSIXt")) 
{
    class(xx) <- cl
    attr(xx, "tzone") <- tz
    xx
}
<bytecode: 0x5638da6a4270>
<environment: namespace:base>
> tmp
London
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 02:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> format(tmp)
[1] "2004-03-26 01:00:00" "2004-03-27 01:00:00" "2004-03-28 02:00:00"
[4] "2004-03-29 01:00:00" "2004-03-30 01:00:00" "2004-03-31 01:00:00"
[7] "2004-04-01 01:00:00"
> class(tmp)
[1] "timeDate"
attr(,"package")
[1] "timeDate"
> format.POSIXct
function (x, format = "", tz = "", usetz = FALSE, ...) 
{
    if (!inherits(x, "POSIXct")) 
        stop("wrong class")
    if (missing(tz) && !is.null(tzone <- attr(x, "tzone"))) 
        tz <- tzone
    structure(format.POSIXlt(as.POSIXlt(x, tz), format, usetz, 
        ...), names = names(x))
}
<bytecode: 0x5638e23cb8b0>
<environment: namespace:base>
> ?format.POSIXct
> tmp
London
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 02:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> unclass(tmp)
<S4 Type Object>
attr(,"Data")
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 00:00:00 GMT"
[5] "2004-03-30 00:00:00 GMT" "2004-03-31 00:00:00 GMT"
[7] "2004-04-01 00:00:00 GMT"
attr(,"format")
[1] "%Y-%m-%d %H:%M:%S"
attr(,"FinCenter")
[1] "London"
> timeDate("2004-03-28 00:00:00", zone = "GMT", FinCenter = "BST")
[1] "charvec:"
[1] "2004-03-28 00:00:00"
[1] "ct:"
[1] "2004-03-28 GMT"
[1] ""
Error in .formatFinCenterNum(num, .Object@FinCenter, "gmt2any") : 
  'BST' is not a valid FinCenter.
> timeDate("2004-03-28 00:00:00", zone = "GMT", FinCenter = "London")
[1] "charvec:"
[1] "2004-03-28 00:00:00"
[1] "ct:"
[1] "2004-03-28 GMT"
[1] ""
London
[1] [2004-03-28]
> unclass(timeDate("2004-03-28 00:00:00", zone = "GMT", FinCenter = "London"))
[1] "charvec:"
[1] "2004-03-28 00:00:00"
[1] "ct:"
[1] "2004-03-28 GMT"
[1] ""
<S4 Type Object>
attr(,"Data")
[1] "2004-03-28 GMT"
attr(,"format")
[1] "%Y-%m-%d"
attr(,"FinCenter")
[1] "London"
> args("timeDate")
function (charvec, format = NULL, zone = "", FinCenter = "") 
NULL
> timeDate("2004-03-28 01:00:00", zone = "GMT", FinCenter = "London")
[1] "charvec:"
[1] "2004-03-28 01:00:00"
[1] "ct:"
[1] "2004-03-28 01:00:00 GMT"
[1] ""
London
[1] [2004-03-28 02:00:00]
> timeDate("2004-03-28 01:30:00", zone = "GMT", FinCenter = "London")
[1] "charvec:"
[1] "2004-03-28 01:30:00"
[1] "ct:"
[1] "2004-03-28 01:30:00 GMT"
[1] ""
London
[1] [2004-03-28 02:30:00]
> timeDate("2004-03-28 01:00:00", zone = "London", FinCenter = "London")
[1] "charvec:"
[1] "2004-03-28 01:00:00"
[1] "ct:"
[1] "2004-03-28 01:00:00 GMT"
[1] ""
London
[1] [2004-03-28 02:00:00]
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> timeDate("2004-03-28 01:00:00", zone = "London", FinCenter = "London")
[1] "charvec:"
[1] "2004-03-28 01:00:00"
[1] "ct:"
[1] "2004-03-28 01:00:00 GMT"
[1] ""
London
[1] [2004-03-28 02:00:00]
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> timeDate("2004-03-28 01:00:00", zone = "London", FinCenter = "London")
London
[1] [2004-03-28 02:00:00]
> timeDate("2004-03-28 01:00:00", zone = "GMT", FinCenter = "London")
London
[1] [2004-03-28 02:00:00]
> timeDate("2004-03-28 00:59:59", zone = "GMT", FinCenter = "London")
London
[1] [2004-03-28 00:59:59]
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
> tmp
London
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 02:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> tmp@Data
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 00:00:00 GMT"
[5] "2004-03-30 00:00:00 GMT" "2004-03-31 00:00:00 GMT"
[7] "2004-04-01 00:00:00 GMT"
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "Zurich")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "Zurich")
> tmp
Zurich
[1] [2004-03-26 02:00:00] [2004-03-27 02:00:00] [2004-03-28 04:00:00]
[4] [2004-03-29 02:00:00] [2004-03-30 02:00:00] [2004-03-31 02:00:00]
[7] [2004-04-01 02:00:00]
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
> tmp
Zurich
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 03:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> tmp@Data
[1] "2004-03-26 00:00:00 GMT" "2004-03-27 00:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-28 23:00:00 GMT"
[5] "2004-03-29 23:00:00 GMT" "2004-03-30 23:00:00 GMT"
[7] "2004-03-31 23:00:00 GMT"
> print(tmp@Data, tz = "Zurich")
[1] "2004-03-26 00:00:00 Zurich" "2004-03-27 00:00:00 Zurich"
[3] "2004-03-28 01:00:00 Zurich" "2004-03-28 23:00:00 Zurich"
[5] "2004-03-29 23:00:00 Zurich" "2004-03-30 23:00:00 Zurich"
[7] "2004-03-31 23:00:00 Zurich"
> unclass(tmp@Data)
[1] 1080259200 1080345600 1080435600 1080514800 1080601200 1080687600 1080774000
attr(,"tzone")
[1] "GMT"
> rulesFinCenter("Zurich")
                 Zurich offSet isdst TimeZone     numeric
1   1901-12-14 20:45:52   3600     0      CET -2147397248
2   1941-05-05 00:00:00   7200     1     CEST  -904435200
3   1941-10-06 00:00:00   3600     0      CET  -891129600
4   1942-05-04 00:00:00   7200     1     CEST  -872985600
5   1942-10-05 00:00:00   3600     0      CET  -859680000
6   1981-03-29 01:00:00   7200     1     CEST   354675600
7   1981-09-27 01:00:00   3600     0      CET   370400400
8   1982-03-28 01:00:00   7200     1     CEST   386125200
9   1982-09-26 01:00:00   3600     0      CET   401850000
10  1983-03-27 01:00:00   7200     1     CEST   417574800
11  1983-09-25 01:00:00   3600     0      CET   433299600
12  1984-03-25 01:00:00   7200     1     CEST   449024400
13  1984-09-30 01:00:00   3600     0      CET   465354000
14  1985-03-31 01:00:00   7200     1     CEST   481078800
15  1985-09-29 01:00:00   3600     0      CET   496803600
16  1986-03-30 01:00:00   7200     1     CEST   512528400
17  1986-09-28 01:00:00   3600     0      CET   528253200
18  1987-03-29 01:00:00   7200     1     CEST   543978000
19  1987-09-27 01:00:00   3600     0      CET   559702800
20  1988-03-27 01:00:00   7200     1     CEST   575427600
21  1988-09-25 01:00:00   3600     0      CET   591152400
22  1989-03-26 01:00:00   7200     1     CEST   606877200
23  1989-09-24 01:00:00   3600     0      CET   622602000
24  1990-03-25 01:00:00   7200     1     CEST   638326800
25  1990-09-30 01:00:00   3600     0      CET   654656400
26  1991-03-31 01:00:00   7200     1     CEST   670381200
27  1991-09-29 01:00:00   3600     0      CET   686106000
28  1992-03-29 01:00:00   7200     1     CEST   701830800
29  1992-09-27 01:00:00   3600     0      CET   717555600
30  1993-03-28 01:00:00   7200     1     CEST   733280400
31  1993-09-26 01:00:00   3600     0      CET   749005200
32  1994-03-27 01:00:00   7200     1     CEST   764730000
33  1994-09-25 01:00:00   3600     0      CET   780454800
34  1995-03-26 01:00:00   7200     1     CEST   796179600
35  1995-09-24 01:00:00   3600     0      CET   811904400
36  1996-03-31 01:00:00   7200     1     CEST   828234000
37  1996-10-27 01:00:00   3600     0      CET   846378000
38  1997-03-30 01:00:00   7200     1     CEST   859683600
39  1997-10-26 01:00:00   3600     0      CET   877827600
40  1998-03-29 01:00:00   7200     1     CEST   891133200
41  1998-10-25 01:00:00   3600     0      CET   909277200
42  1999-03-28 01:00:00   7200     1     CEST   922582800
43  1999-10-31 01:00:00   3600     0      CET   941331600
44  2000-03-26 01:00:00   7200     1     CEST   954032400
45  2000-10-29 01:00:00   3600     0      CET   972781200
46  2001-03-25 01:00:00   7200     1     CEST   985482000
47  2001-10-28 01:00:00   3600     0      CET  1004230800
48  2002-03-31 01:00:00   7200     1     CEST  1017536400
49  2002-10-27 01:00:00   3600     0      CET  1035680400
50  2003-03-30 01:00:00   7200     1     CEST  1048986000
51  2003-10-26 01:00:00   3600     0      CET  1067130000
52  2004-03-28 01:00:00   7200     1     CEST  1080435600
53  2004-10-31 01:00:00   3600     0      CET  1099184400
54  2005-03-27 01:00:00   7200     1     CEST  1111885200
55  2005-10-30 01:00:00   3600     0      CET  1130634000
56  2006-03-26 01:00:00   7200     1     CEST  1143334800
57  2006-10-29 01:00:00   3600     0      CET  1162083600
58  2007-03-25 01:00:00   7200     1     CEST  1174784400
59  2007-10-28 01:00:00   3600     0      CET  1193533200
60  2008-03-30 01:00:00   7200     1     CEST  1206838800
61  2008-10-26 01:00:00   3600     0      CET  1224982800
62  2009-03-29 01:00:00   7200     1     CEST  1238288400
63  2009-10-25 01:00:00   3600     0      CET  1256432400
64  2010-03-28 01:00:00   7200     1     CEST  1269738000
65  2010-10-31 01:00:00   3600     0      CET  1288486800
66  2011-03-27 01:00:00   7200     1     CEST  1301187600
67  2011-10-30 01:00:00   3600     0      CET  1319936400
68  2012-03-25 01:00:00   7200     1     CEST  1332637200
69  2012-10-28 01:00:00   3600     0      CET  1351386000
70  2013-03-31 01:00:00   7200     1     CEST  1364691600
71  2013-10-27 01:00:00   3600     0      CET  1382835600
72  2014-03-30 01:00:00   7200     1     CEST  1396141200
73  2014-10-26 01:00:00   3600     0      CET  1414285200
74  2015-03-29 01:00:00   7200     1     CEST  1427590800
75  2015-10-25 01:00:00   3600     0      CET  1445734800
76  2016-03-27 01:00:00   7200     1     CEST  1459040400
77  2016-10-30 01:00:00   3600     0      CET  1477789200
78  2017-03-26 01:00:00   7200     1     CEST  1490490000
79  2017-10-29 01:00:00   3600     0      CET  1509238800
80  2018-03-25 01:00:00   7200     1     CEST  1521939600
81  2018-10-28 01:00:00   3600     0      CET  1540688400
82  2019-03-31 01:00:00   7200     1     CEST  1553994000
83  2019-10-27 01:00:00   3600     0      CET  1572138000
84  2020-03-29 01:00:00   7200     1     CEST  1585443600
85  2020-10-25 01:00:00   3600     0      CET  1603587600
86  2021-03-28 01:00:00   7200     1     CEST  1616893200
87  2021-10-31 01:00:00   3600     0      CET  1635642000
88  2022-03-27 01:00:00   7200     1     CEST  1648342800
89  2022-10-30 01:00:00   3600     0      CET  1667091600
90  2023-03-26 01:00:00   7200     1     CEST  1679792400
91  2023-10-29 01:00:00   3600     0      CET  1698541200
92  2024-03-31 01:00:00   7200     1     CEST  1711846800
93  2024-10-27 01:00:00   3600     0      CET  1729990800
94  2025-03-30 01:00:00   7200     1     CEST  1743296400
95  2025-10-26 01:00:00   3600     0      CET  1761440400
96  2026-03-29 01:00:00   7200     1     CEST  1774746000
97  2026-10-25 01:00:00   3600     0      CET  1792890000
98  2027-03-28 01:00:00   7200     1     CEST  1806195600
99  2027-10-31 01:00:00   3600     0      CET  1824944400
100 2028-03-26 01:00:00   7200     1     CEST  1837645200
101 2028-10-29 01:00:00   3600     0      CET  1856394000
102 2029-03-25 01:00:00   7200     1     CEST  1869094800
103 2029-10-28 01:00:00   3600     0      CET  1887843600
104 2030-03-31 01:00:00   7200     1     CEST  1901149200
105 2030-10-27 01:00:00   3600     0      CET  1919293200
106 2031-03-30 01:00:00   7200     1     CEST  1932598800
107 2031-10-26 01:00:00   3600     0      CET  1950742800
108 2032-03-28 01:00:00   7200     1     CEST  1964048400
109 2032-10-31 01:00:00   3600     0      CET  1982797200
110 2033-03-27 01:00:00   7200     1     CEST  1995498000
111 2033-10-30 01:00:00   3600     0      CET  2014246800
112 2034-03-26 01:00:00   7200     1     CEST  2026947600
113 2034-10-29 01:00:00   3600     0      CET  2045696400
114 2035-03-25 01:00:00   7200     1     CEST  2058397200
115 2035-10-28 01:00:00   3600     0      CET  2077146000
116 2036-03-30 01:00:00   7200     1     CEST  2090451600
117 2036-10-26 01:00:00   3600     0      CET  2108595600
118 2037-03-29 01:00:00   7200     1     CEST  2121901200
119 2037-10-25 01:00:00   3600     0      CET  2140045200
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
> tmp
Zurich
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 03:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> unclass(tmp@Data)
[1] 1080259200 1080345600 1080435600 1080514800 1080601200 1080687600 1080774000
attr(,"tzone")
[1] "GMT"
> 
> 
> 
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
> tmp
Zurich
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 03:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> tmp@Data
[1] "2004-03-26 00:00:00 GMT" "2004-03-27 00:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-28 23:00:00 GMT"
[5] "2004-03-29 23:00:00 GMT" "2004-03-30 23:00:00 GMT"
[7] "2004-03-31 23:00:00 GMT"
> 
> 
> 
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
Called from: .formatFinCenterNum(unclass(ct), zone, type = "any2gmt")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#340: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> num
[1] 1080262800 1080349200 1080442800 1080522000 1080608400 1080694800 1080781200
attr(,"tzone")
[1] "GMT"
Browse[2]> changed
[1] 3
Browse[2]> offSetIdx
[1] 51 51 52 52 52 52 52
Browse[2]> shifted_offset
[1] 51 51 51 52 52 52 52
Browse[2]> changed
[1] 3
Browse[2]> dst.list$offSet[offSetIdx][changed]
[1] 7200
Browse[2]> dst.list$offSet[offSetIdx][changed - 1]
[1] 3600
Browse[2]> dst.list$offSet[offSetIdx]
[1] 3600 3600 7200 7200 7200 7200 7200
Browse[2]> 
> 
> 
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
Error in shifted_offset[indx] <- findInterval(wrk, dst.list$numeric) (from timeDate.R#328) : 
  replacement has length zero
> options(error=recover)
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
Error in shifted_offset[indx] <- findInterval(wrk, dst.list$numeric) (from timeDate.R#328) : 
  replacement has length zero

Enter a frame number, or 0 to exit   

1: timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00", by =
2: timeDate-Sequence.R#89: timeDate(to, format = format.to, zone = zone, FinCe
3: timeDate.R#78: timeDate(to, format = format.to, zone = zone, FinCenter = Fi
4: timeDate.R#112: .formatFinCenterNum(unclass(ct), zone, type = "any2gmt")

Selection: 4
Called from: .formatFinCenterNum(unclass(ct), zone, type = "any2gmt")
Browse[1]> indx
[1] TRUE
Browse[1]> num
[1] 1080781200
attr(,"tzone")
[1] "GMT"
Browse[1]> 

Enter a frame number, or 0 to exit   

1: timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00", by =
2: timeDate-Sequence.R#89: timeDate(to, format = format.to, zone = zone, FinCe
3: timeDate.R#78: timeDate(to, format = format.to, zone = zone, FinCenter = Fi
4: timeDate.R#112: .formatFinCenterNum(unclass(ct), zone, type = "any2gmt")

Selection: 0
> 
> 
> 
> options(error=recover)
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
Error in `load_all()`:
! Failed to load ]8;;file:///home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.RR/timeDate.R]8;;
Caused by error in `parse()`:
! /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R:460:0: unexpected end of input
458: ################################################################################
459: 
    ^
Run `]8;;rstudio:run:rlang::last_error()rlang::last_error()]8;;` to see where the error occurred.

Enter a frame number, or 0 to exit   

 1: devtools::load_all()
 2: pkgload::load_all(path = path, reset = reset, recompile = recompile, export
 3: load_code(path, quiet = quiet)
 4: withr_with_dir(path, source_many(paths, encoding, env))
 5: force(code)
 6: source_many(paths, encoding, env)
 7: try_fetch(source_one(file, encoding, envir = envir), error = function(cnd) 
 8: tryCatch(withCallingHandlers(expr, error = function(cnd) {
    {
        .__h
 9: tryCatchList(expr, classes, parentenv, handlers)
10: tryCatchOne(expr, names, parentenv, handlers[[1]])
11: doTryCatch(return(expr), name, parentenv, handler)
12: withCallingHandlers(expr, error = function(cnd) {
    {
        .__handler_fr
13: source_one(file, encoding, envir = envir)
14: parse(text = lines, n = -1, srcfile = srcfile)
15: .handleSimpleError(function (cnd) 
{
    {
        .__handler_frame__. <- TRUE

16: h(simpleError(msg, call))
17: handlers[[1]](cnd)
18: cli::cli_abort(msg, parent = cnd, call = quote(load_all()))
19: rlang::abort(message, ..., call = call, use_cli_format = TRUE, .frame = .fr
20: signal_abort(cnd, .file)

Selection: 9
Called from: top level 
Browse[1]> 

Enter a frame number, or 0 to exit   

 1: devtools::load_all()
 2: pkgload::load_all(path = path, reset = reset, recompile = recompile, export
 3: load_code(path, quiet = quiet)
 4: withr_with_dir(path, source_many(paths, encoding, env))
 5: force(code)
 6: source_many(paths, encoding, env)
 7: try_fetch(source_one(file, encoding, envir = envir), error = function(cnd) 
 8: tryCatch(withCallingHandlers(expr, error = function(cnd) {
    {
        .__h
 9: tryCatchList(expr, classes, parentenv, handlers)
10: tryCatchOne(expr, names, parentenv, handlers[[1]])
11: doTryCatch(return(expr), name, parentenv, handler)
12: withCallingHandlers(expr, error = function(cnd) {
    {
        .__handler_fr
13: source_one(file, encoding, envir = envir)
14: parse(text = lines, n = -1, srcfile = srcfile)
15: .handleSimpleError(function (cnd) 
{
    {
        .__handler_frame__. <- TRUE

16: h(simpleError(msg, call))
17: handlers[[1]](cnd)
18: cli::cli_abort(msg, parent = cnd, call = quote(load_all()))
19: rlang::abort(message, ..., call = call, use_cli_format = TRUE, .frame = .fr
20: signal_abort(cnd, .file)

Selection: 0




> > > > > 
> 
> 
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
Error in shifted_offset[indx] <- findInterval(wrk, dst.list$numeric) (from timeDate.R#329) : 
  replacement has length zero

Enter a frame number, or 0 to exit   

1: timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00", by =
2: timeDate-Sequence.R#89: timeDate(to, format = format.to, zone = zone, FinCe
3: timeDate.R#78: timeDate(to, format = format.to, zone = zone, FinCenter = Fi
4: timeDate.R#112: .formatFinCenterNum(unclass(ct), zone, type = "any2gmt")

Selection: 4
Called from: .formatFinCenterNum(unclass(ct), zone, type = "any2gmt")
Browse[1]> indx
[1] 1
Browse[1]> num
[1] 1080781200
attr(,"tzone")
[1] "GMT"
Browse[1]> 

Enter a frame number, or 0 to exit   

1: timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00", by =
2: timeDate-Sequence.R#89: timeDate(to, format = format.to, zone = zone, FinCe
3: timeDate.R#78: timeDate(to, format = format.to, zone = zone, FinCenter = Fi
4: timeDate.R#112: .formatFinCenterNum(unclass(ct), zone, type = "any2gmt")

Selection: 0
> 
> 
> 
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
Called from: .formatFinCenterNum(unclass(ct), zone, type = "any2gmt")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#342: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
> tmp
Zurich
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 03:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> 
> 
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
Called from: .formatFinCenterNum(unclass(ct), zone, type = "any2gmt")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#342: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> chnaged
Error: object 'chnaged' not found

Enter a frame number, or 0 to exit   

 1: timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00", by =
 2: timeDate-Sequence.R#91: seq(from = from, to = to, by = by)
 3: seq.timeDate(from = from, to = to, by = by)
 4: timeDate-Sequence.R#234: timeDate(res, zone = zone, FinCenter = FinCenter)
 5: timeDate.R#78: timeDate(res, zone = zone, FinCenter = FinCenter)
 6: timeDate.R#164: callGeneric(format(charvec), zone = zone, FinCenter = FinCe
 7: eval(call, parent.frame())
 8: eval(call, parent.frame())
 9: timeDate(format(charvec), zone = zone, FinCenter = FinCenter)
10: timeDate.R#78: timeDate(format(charvec), zone = zone, FinCenter = FinCenter
11: timeDate.R#112: .formatFinCenterNum(unclass(ct), zone, type = "any2gmt")

Selection: 0
Browse[2]> changed
[1] 3
Browse[2]> dst.list$offSet[offSetIdx][indx]
[1] 7200 7200 7200 7200 7200
Browse[2]> indx
[1] 3 4 5 6 7
Browse[2]> dst.list$offSet[offSetIdx][indx- 1]
[1] 3600 7200 7200 7200 7200
Browse[2]> num[indx]
[1] 1080442800 1080522000 1080608400 1080694800 1080781200
Browse[2]> (dst.list$offSet[offSetIdx][indx] - dst.list$offSet[offSetIdx][indx- 1])
[1] 3600    0    0    0    0
Browse[2]> > shifted_offset[indx]
[1] 51 52 52 52 52
Browse[2]> > changed
[1] 3
Browse[2]> signum
[1] -1
Browse[2]> dst.list$offSet[offSetIdx]
[1] 3600 3600 7200 7200 7200 7200 7200
Browse[2]> 
> 
> 
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
Called from: .formatFinCenterNum(unclass(ct), zone, type = "any2gmt")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#342: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> num
[1] 1080262800 1080349200 1080439200 1080522000 1080608400 1080694800 1080781200
attr(,"tzone")
[1] "GMT"
Browse[2]> 
> tmp
Zurich
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 01:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> tmp@Data
[1] "2004-03-26 00:00:00 GMT" "2004-03-27 00:00:00 GMT"
[3] "2004-03-28 00:00:00 GMT" "2004-03-28 23:00:00 GMT"
[5] "2004-03-29 23:00:00 GMT" "2004-03-30 23:00:00 GMT"
[7] "2004-03-31 23:00:00 GMT"
> format(tmp, tz = "Zurich")
[1] "2004-03-26 01:00:00" "2004-03-27 01:00:00" "2004-03-28 01:00:00"
[4] "2004-03-29 01:00:00" "2004-03-30 01:00:00" "2004-03-31 01:00:00"
[7] "2004-04-01 01:00:00"
> format(tmp, tz = "CET")
[1] "2004-03-26 01:00:00" "2004-03-27 01:00:00" "2004-03-28 01:00:00"
[4] "2004-03-29 00:00:00" "2004-03-30 00:00:00" "2004-03-31 00:00:00"
[7] "2004-04-01 00:00:00"
> format(tmp@Data, tz = "CET")
[1] "2004-03-26 01:00:00" "2004-03-27 01:00:00" "2004-03-28 01:00:00"
[4] "2004-03-29 01:00:00" "2004-03-30 01:00:00" "2004-03-31 01:00:00"
[7] "2004-04-01 01:00:00"
> format(tmp@Data, FinCenter = "Zurich"))
Error: unexpected ')' in "format(tmp@Data, FinCenter = "Zurich"))"
No suitable frames for recover()
> format(tmp@Data, FinCenter = "Zurich")
[1] "2004-03-26 00:00:00" "2004-03-27 00:00:00" "2004-03-28 00:00:00"
[4] "2004-03-28 23:00:00" "2004-03-29 23:00:00" "2004-03-30 23:00:00"
[7] "2004-03-31 23:00:00"
> format(tmp, FinCenter = "Zurich")
[1] "2004-03-26 01:00:00" "2004-03-27 01:00:00" "2004-03-28 01:00:00"
[4] "2004-03-29 01:00:00" "2004-03-30 01:00:00" "2004-03-31 01:00:00"
[7] "2004-04-01 01:00:00"
> 
> 
> 
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
Called from: .formatFinCenterNum(unclass(ct), zone, type = "any2gmt")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#342: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
> tmp
Zurich
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 03:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> unclass(tmp)
<S4 Type Object>
attr(,"Data")
[1] "2004-03-26 00:00:00 GMT" "2004-03-27 00:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-28 23:00:00 GMT"
[5] "2004-03-29 23:00:00 GMT" "2004-03-30 23:00:00 GMT"
[7] "2004-03-31 23:00:00 GMT"
attr(,"format")
[1] "%Y-%m-%d %H:%M:%S"
attr(,"FinCenter")
[1] "Zurich"
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
Called from: .formatFinCenterNum(unclass(ct), zone, type = "any2gmt")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#342: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> dst.list$offSet[offSetIdx][changed] - dst.list$offSet[offSetIdx][changed - 1]
[1] 3600
Browse[2]> > dst.list$offSet[offSetIdx]
[1] 3600 3600 7200 7200 7200 7200 7200
Browse[2]> offSetIdx
[1] 51 51 52 52 52 52 52
Browse[2]> offSetIdx - 1
[1] 50 50 51 51 51 51 51
Browse[2]> > dst.list$offSet[offSetIdx][changed] - dst.list$offSet[offSetIdx - 1][changed]
[1] 3600
Browse[2]> 
> tmp
Zurich
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 03:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
Called from: .formatFinCenterNum(unclass(ct), zone, type = "any2gmt")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#342: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
> tmp
London
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 02:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
Called from: .formatFinCenterNum(unclass(ct), zone, type = "any2gmt")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#341: num
Browse[2]> 
> 
> tmp
London
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 03:00:00]
[4] [2004-03-29 02:00:00] [2004-03-30 02:00:00] [2004-03-31 02:00:00]
[7] [2004-04-01 02:00:00]
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
Called from: .formatFinCenterNum(unclass(ct), zone, type = "any2gmt")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#341: num
Browse[2]> 
> tmp
Zurich
[1] [2004-03-26 03:00:00] [2004-03-27 03:00:00] [2004-03-28 04:00:00]
[4] [2004-03-29 04:00:00] [2004-03-30 04:00:00] [2004-03-31 04:00:00]
[7] [2004-04-01 04:00:00]
> unclass(tmp)
<S4 Type Object>
attr(,"Data")
[1] "2004-03-26 02:00:00 GMT" "2004-03-27 02:00:00 GMT"
[3] "2004-03-28 02:00:00 GMT" "2004-03-29 02:00:00 GMT"
[5] "2004-03-30 02:00:00 GMT" "2004-03-31 02:00:00 GMT"
[7] "2004-04-01 02:00:00 GMT"
attr(,"format")
[1] "%Y-%m-%d %H:%M:%S"
attr(,"FinCenter")
[1] "Zurich"
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
> tmp
London
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 03:00:00]
[4] [2004-03-29 02:00:00] [2004-03-30 02:00:00] [2004-03-31 02:00:00]
[7] [2004-04-01 02:00:00]
> unclass(tmp)
<S4 Type Object>
attr(,"Data")
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 02:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
attr(,"format")
[1] "%Y-%m-%d %H:%M:%S"
attr(,"FinCenter")
[1] "London"
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
> unclass(tmp)
<S4 Type Object>
attr(,"Data")
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 02:00:00 GMT" "2004-03-29 01:00:00 GMT"
[5] "2004-03-30 01:00:00 GMT" "2004-03-31 01:00:00 GMT"
[7] "2004-04-01 01:00:00 GMT"
attr(,"format")
[1] "%Y-%m-%d %H:%M:%S"
attr(,"FinCenter")
[1] "Zurich"
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
> tmp
London
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 02:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> unclass(tmp)
<S4 Type Object>
attr(,"Data")
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 00:00:00 GMT"
[5] "2004-03-30 00:00:00 GMT" "2004-03-31 00:00:00 GMT"
[7] "2004-04-01 00:00:00 GMT"
attr(,"format")
[1] "%Y-%m-%d %H:%M:%S"
attr(,"FinCenter")
[1] "London"
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
> tmp
Zurich
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 01:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> unclass(tmp)
<S4 Type Object>
attr(,"Data")
[1] "2004-03-26 00:00:00 GMT" "2004-03-27 00:00:00 GMT"
[3] "2004-03-28 00:00:00 GMT" "2004-03-28 23:00:00 GMT"
[5] "2004-03-29 23:00:00 GMT" "2004-03-30 23:00:00 GMT"
[7] "2004-03-31 23:00:00 GMT"
attr(,"format")
[1] "%Y-%m-%d %H:%M:%S"
attr(,"FinCenter")
[1] "Zurich"
> 
> 
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
> unclass(tmp)
<S4 Type Object>
attr(,"Data")
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 00:00:00 GMT"
[5] "2004-03-30 00:00:00 GMT" "2004-03-31 00:00:00 GMT"
[7] "2004-04-01 00:00:00 GMT"
attr(,"format")
[1] "%Y-%m-%d %H:%M:%S"
attr(,"FinCenter")
[1] "London"
> tmp
London
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 02:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
> unclass(tmp)
<S4 Type Object>
attr(,"Data")
[1] "2004-03-26 00:00:00 GMT" "2004-03-27 00:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-28 23:00:00 GMT"
[5] "2004-03-29 23:00:00 GMT" "2004-03-30 23:00:00 GMT"
[7] "2004-03-31 23:00:00 GMT"
attr(,"format")
[1] "%Y-%m-%d %H:%M:%S"
attr(,"FinCenter")
[1] "Zurich"
> tmp
Zurich
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 03:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> 
> 
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
> tmp
London
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 03:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
> tmp
London
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 03:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> unclass(tmp)
<S4 Type Object>
attr(,"Data")
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 02:00:00 GMT" "2004-03-29 00:00:00 GMT"
[5] "2004-03-30 00:00:00 GMT" "2004-03-31 00:00:00 GMT"
[7] "2004-04-01 00:00:00 GMT"
attr(,"format")
[1] "%Y-%m-%d %H:%M:%S"
attr(,"FinCenter")
[1] "London"
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
> unclass(tmp)
<S4 Type Object>
attr(,"Data")
[1] "2004-03-26 00:00:00 GMT" "2004-03-27 00:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-28 23:00:00 GMT"
[5] "2004-03-29 23:00:00 GMT" "2004-03-30 23:00:00 GMT"
[7] "2004-03-31 23:00:00 GMT"
attr(,"format")
[1] "%Y-%m-%d %H:%M:%S"
attr(,"FinCenter")
[1] "Zurich"
> 
> 
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
Called from: .formatFinCenterNum(unclass(ct), zone, type = "any2gmt")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#341: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> offSetIdx
[1] 173 173 173 174 174 174 174
Browse[2]> 
> 
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
Called from: .formatFinCenterNum(unclass(ct), zone, type = "any2gmt")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#338: offSetIdx <- shifted_offset
Browse[2]> offSetIdx
[1] 173 173 174 174 174 174 174
Browse[2]> shifted_offset
[1] 173 173 173 174 174 174 174
Browse[2]> dst.list$offSet[offSetIdx]
[1]    0    0 3600 3600 3600 3600 3600
Browse[2]> 
debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#341: num + signum * dst.list$offSet[offSetIdx]
Browse[2]> 
> 
> 
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
> unclass(tmp)
<S4 Type Object>
attr(,"Data")
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 02:00:00 GMT" "2004-03-29 00:00:00 GMT"
[5] "2004-03-30 00:00:00 GMT" "2004-03-31 00:00:00 GMT"
[7] "2004-04-01 00:00:00 GMT"
attr(,"format")
[1] "%Y-%m-%d %H:%M:%S"
attr(,"FinCenter")
[1] "London"
> tmp
London
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 03:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
> unclass(tmp)
<S4 Type Object>
attr(,"Data")
[1] "2004-03-26 00:00:00 GMT" "2004-03-27 00:00:00 GMT"
[3] "2004-03-28 02:00:00 GMT" "2004-03-28 23:00:00 GMT"
[5] "2004-03-29 23:00:00 GMT" "2004-03-30 23:00:00 GMT"
[7] "2004-03-31 23:00:00 GMT"
attr(,"format")
[1] "%Y-%m-%d %H:%M:%S"
attr(,"FinCenter")
[1] "Zurich"
> tmp
Zurich
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 04:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
> tmp
London
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 02:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> unclass(tmp)
<S4 Type Object>
attr(,"Data")
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 00:00:00 GMT"
[5] "2004-03-30 00:00:00 GMT" "2004-03-31 00:00:00 GMT"
[7] "2004-04-01 00:00:00 GMT"
attr(,"format")
[1] "%Y-%m-%d %H:%M:%S"
attr(,"FinCenter")
[1] "London"
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
> tmp
Zurich
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 01:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> unclass(tmp)
<S4 Type Object>
attr(,"Data")
[1] "2004-03-26 00:00:00 GMT" "2004-03-27 00:00:00 GMT"
[3] "2004-03-28 00:00:00 GMT" "2004-03-28 23:00:00 GMT"
[5] "2004-03-29 23:00:00 GMT" "2004-03-30 23:00:00 GMT"
[7] "2004-03-31 23:00:00 GMT"
attr(,"format")
[1] "%Y-%m-%d %H:%M:%S"
attr(,"FinCenter")
[1] "Zurich"
> format(tmp, "Zurich")
*** output flushed ***
> format(tmp, FinCenter = "Zurich")
[1] "2004-03-26 01:00:00" "2004-03-27 01:00:00" "2004-03-28 01:00:00"
[4] "2004-03-29 01:00:00" "2004-03-30 01:00:00" "2004-03-31 01:00:00"
[7] "2004-04-01 01:00:00"
> devtools::load_all()
*** output flushed ***
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> format(tmp, FinCenter = "Zurich")
[1] "kiki!"
[1] "2004-03-26 01:00:00" "2004-03-27 01:00:00" "2004-03-28 01:00:00"
[4] "2004-03-29 01:00:00" "2004-03-30 01:00:00" "2004-03-31 01:00:00"
[7] "2004-04-01 01:00:00"
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> format(tmp, FinCenter = "Zurich")
[1] "kiki!"
Called from: .formatFinCenterNum(as.numeric(getDataPart(x)), FinCenter, type = "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#346: num <- num + dst.list$offSet[offSetIdx]
Browse[2]> dst.list$offSet[offSetIdx]
[1] 3600 3600 3600 7200 7200 7200 7200
Browse[2]> signum
[1] 1
Browse[2]> 
[1] "2004-03-26 01:00:00" "2004-03-27 01:00:00" "2004-03-28 01:00:00"
[4] "2004-03-29 01:00:00" "2004-03-30 01:00:00" "2004-03-31 01:00:00"
[7] "2004-04-01 01:00:00"
> 
> 
> 
> 
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
[1] "kiki!"
Called from: .formatFinCenterNum(num, .Object@FinCenter, "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#346: num <- num + dst.list$offSet[offSetIdx]
Browse[2]> 
[1] "kiki!"
Called from: .formatFinCenterNum(num, .Object@FinCenter, "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#346: num <- num + dst.list$offSet[offSetIdx]
Browse[2]> 
[1] "kiki!"
Called from: .formatFinCenterNum(as.numeric(getDataPart(x)), FinCenter, type = "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#346: num <- num + dst.list$offSet[offSetIdx]
Browse[2]> 
[1] "kiki!"
Called from: .formatFinCenterNum(as.numeric(getDataPart(x)), FinCenter, type = "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#346: num <- num + dst.list$offSet[offSetIdx]
Browse[2]> 
[1] "kiki!"
Called from: .formatFinCenterNum(num, .Object@FinCenter, "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#346: num <- num + dst.list$offSet[offSetIdx]
Browse[2]> 
> tmp
[1] "kiki!"
Called from: .formatFinCenterNum(as.numeric(getDataPart(x)), FinCenter, type = "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#346: num <- num + dst.list$offSet[offSetIdx]
Browse[2]> 
Zurich
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 03:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> unclass(tmp)
<S4 Type Object>
attr(,"Data")
[1] "2004-03-26 00:00:00 GMT" "2004-03-27 00:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-28 23:00:00 GMT"
[5] "2004-03-29 23:00:00 GMT" "2004-03-30 23:00:00 GMT"
[7] "2004-03-31 23:00:00 GMT"
attr(,"format")
[1] "%Y-%m-%d %H:%M:%S"
attr(,"FinCenter")
[1] "Zurich"
> tmp
[1] "kiki!"
Called from: .formatFinCenterNum(as.numeric(getDataPart(x)), FinCenter, type = "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#346: num <- num + dst.list$offSet[offSetIdx]
Browse[2]> 
Zurich
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 03:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> unclass(tmp)
<S4 Type Object>
attr(,"Data")
[1] "2004-03-26 00:00:00 GMT" "2004-03-27 00:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-28 23:00:00 GMT"
[5] "2004-03-29 23:00:00 GMT" "2004-03-30 23:00:00 GMT"
[7] "2004-03-31 23:00:00 GMT"
attr(,"format")
[1] "%Y-%m-%d %H:%M:%S"
attr(,"FinCenter")
[1] "Zurich"
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
[1] "kiki!"
Called from: .formatFinCenterNum(num, .Object@FinCenter, "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#346: num <- num + dst.list$offSet[offSetIdx]
Browse[2]> 
[1] "kiki!"
Called from: .formatFinCenterNum(num, .Object@FinCenter, "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#346: num <- num + dst.list$offSet[offSetIdx]
Browse[2]> 
[1] "kiki!"
Called from: .formatFinCenterNum(as.numeric(getDataPart(x)), FinCenter, type = "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#346: num <- num + dst.list$offSet[offSetIdx]
Browse[2]> 
[1] "kiki!"
Called from: .formatFinCenterNum(as.numeric(getDataPart(x)), FinCenter, type = "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#346: num <- num + dst.list$offSet[offSetIdx]
Browse[2]> 
[1] "kiki!"
Called from: .formatFinCenterNum(num, .Object@FinCenter, "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#346: num <- num + dst.list$offSet[offSetIdx]
Browse[2]> 
> unclass(tmp)
<S4 Type Object>
attr(,"Data")
[1] "2004-03-26 00:00:00 GMT" "2004-03-27 00:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-28 23:00:00 GMT"
[5] "2004-03-29 23:00:00 GMT" "2004-03-30 23:00:00 GMT"
[7] "2004-03-31 23:00:00 GMT"
attr(,"format")
[1] "%Y-%m-%d %H:%M:%S"
attr(,"FinCenter")
[1] "Zurich"
> tmp
[1] "kiki!"
Called from: .formatFinCenterNum(as.numeric(getDataPart(x)), FinCenter, type = "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#346: num <- num + dst.list$offSet[offSetIdx]
Browse[2]> 
Zurich
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 03:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> 
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
[1] "kiki!"
Called from: .formatFinCenterNum(num, .Object@FinCenter, "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#346: num <- num + dst.list$offSet[offSetIdx]
Browse[2]> offSetIdx
[1] 51
Browse[2]> 
[1] "kiki!"
Called from: .formatFinCenterNum(num, .Object@FinCenter, "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#346: num <- num + dst.list$offSet[offSetIdx]
Browse[2]> 
[1] "kiki!"
Called from: .formatFinCenterNum(as.numeric(getDataPart(x)), FinCenter, type = "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#346: num <- num + dst.list$offSet[offSetIdx]
Browse[2]> num
[1] 1080259200
Browse[2]> 
[1] "kiki!"
Called from: .formatFinCenterNum(as.numeric(getDataPart(x)), FinCenter, type = "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#346: num <- num + dst.list$offSet[offSetIdx]
Browse[2]> num
[1] 1080774000
Browse[2]> 
[1] "kiki!"
Called from: .formatFinCenterNum(num, .Object@FinCenter, "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#346: num <- num + dst.list$offSet[offSetIdx]
Browse[2]> num
[1] 1080259200 1080345600 1080435600 1080514800 1080601200 1080687600 1080774000
Browse[2]> offSetIdx
[1] 51 51 52 52 52 52 52
Browse[2]> dst.list$offSet[offSetIdx]
[1] 3600 3600 7200 7200 7200 7200 7200
Browse[2]> 
> unclass(tmp)
<S4 Type Object>
attr(,"Data")
[1] "2004-03-26 00:00:00 GMT" "2004-03-27 00:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-28 23:00:00 GMT"
[5] "2004-03-29 23:00:00 GMT" "2004-03-30 23:00:00 GMT"
[7] "2004-03-31 23:00:00 GMT"
attr(,"format")
[1] "%Y-%m-%d %H:%M:%S"
attr(,"FinCenter")
[1] "Zurich"
> tmp
[1] "kiki!"
Called from: .formatFinCenterNum(as.numeric(getDataPart(x)), FinCenter, type = "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#346: num <- num + dst.list$offSet[offSetIdx]
Browse[2]> offSetIdx
[1] 51 51 52 52 52 52 52
Browse[2]> signum
[1] 1
Browse[2]> dst.list$offSet[offSetIdx]
[1] 3600 3600 7200 7200 7200 7200 7200
Browse[2]> 
Zurich
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 03:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> 
> 
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
[1] "kiki!"
[1] "kiki!"
[1] "kiki!"
[1] "kiki!"
[1] "kiki!"
> tmp
[1] "kiki!"
Zurich
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 01:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> 
> 
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
[1] "kiki!"
[1] "kiki!"
[1] "kiki!"
[1] "kiki!"
[1] "kiki!"
> tmp
[1] "kiki!"
London
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 02:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> tmp
[1] "kiki!"
London
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 02:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> unclass(tmp)
<S4 Type Object>
attr(,"Data")
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 00:00:00 GMT"
[5] "2004-03-30 00:00:00 GMT" "2004-03-31 00:00:00 GMT"
[7] "2004-04-01 00:00:00 GMT"
attr(,"format")
[1] "%Y-%m-%d %H:%M:%S"
attr(,"FinCenter")
[1] "London"
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
[1] "kiki!"
[1] "kiki!"
[1] "kiki!"
[1] "kiki!"
[1] "kiki!"
> tmp
[1] "kiki!"
Zurich
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 01:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> unclass(tmp)
<S4 Type Object>
attr(,"Data")
[1] "2004-03-26 00:00:00 GMT" "2004-03-27 00:00:00 GMT"
[3] "2004-03-28 00:00:00 GMT" "2004-03-28 23:00:00 GMT"
[5] "2004-03-29 23:00:00 GMT" "2004-03-30 23:00:00 GMT"
[7] "2004-03-31 23:00:00 GMT"
attr(,"format")
[1] "%Y-%m-%d %H:%M:%S"
attr(,"FinCenter")
[1] "Zurich"
> 
> 
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
[1] "kiki!"
[1] "kiki!"
[1] "kiki!"
[1] "kiki!"
[1] "kiki!"
Called from: .formatFinCenterNum(num, .Object@FinCenter, "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#347: num <- num + dst.list$offSet[offSetIdx]
Browse[2]> num
[1] 1080259200 1080345600 1080432000 1080514800 1080601200 1080687600 1080774000
Browse[2]> offSetIdx
[1] 51 51 51 52 52 52 52
Browse[2]> findInterval(num, dst.list$numeric)
[1] 51 51 51 52 52 52 52
Browse[2]> dst.list
                 Zurich offSet isdst TimeZone     numeric
1   1901-12-14 20:45:52   3600     0      CET -2147397248
2   1941-05-05 00:00:00   7200     1     CEST  -904435200
3   1941-10-06 00:00:00   3600     0      CET  -891129600
4   1942-05-04 00:00:00   7200     1     CEST  -872985600
5   1942-10-05 00:00:00   3600     0      CET  -859680000
6   1981-03-29 01:00:00   7200     1     CEST   354675600
7   1981-09-27 01:00:00   3600     0      CET   370400400
8   1982-03-28 01:00:00   7200     1     CEST   386125200
9   1982-09-26 01:00:00   3600     0      CET   401850000
10  1983-03-27 01:00:00   7200     1     CEST   417574800
11  1983-09-25 01:00:00   3600     0      CET   433299600
12  1984-03-25 01:00:00   7200     1     CEST   449024400
13  1984-09-30 01:00:00   3600     0      CET   465354000
14  1985-03-31 01:00:00   7200     1     CEST   481078800
15  1985-09-29 01:00:00   3600     0      CET   496803600
16  1986-03-30 01:00:00   7200     1     CEST   512528400
17  1986-09-28 01:00:00   3600     0      CET   528253200
18  1987-03-29 01:00:00   7200     1     CEST   543978000
19  1987-09-27 01:00:00   3600     0      CET   559702800
20  1988-03-27 01:00:00   7200     1     CEST   575427600
21  1988-09-25 01:00:00   3600     0      CET   591152400
22  1989-03-26 01:00:00   7200     1     CEST   606877200
23  1989-09-24 01:00:00   3600     0      CET   622602000
24  1990-03-25 01:00:00   7200     1     CEST   638326800
25  1990-09-30 01:00:00   3600     0      CET   654656400
26  1991-03-31 01:00:00   7200     1     CEST   670381200
27  1991-09-29 01:00:00   3600     0      CET   686106000
28  1992-03-29 01:00:00   7200     1     CEST   701830800
29  1992-09-27 01:00:00   3600     0      CET   717555600
30  1993-03-28 01:00:00   7200     1     CEST   733280400
31  1993-09-26 01:00:00   3600     0      CET   749005200
32  1994-03-27 01:00:00   7200     1     CEST   764730000
33  1994-09-25 01:00:00   3600     0      CET   780454800
34  1995-03-26 01:00:00   7200     1     CEST   796179600
35  1995-09-24 01:00:00   3600     0      CET   811904400
36  1996-03-31 01:00:00   7200     1     CEST   828234000
37  1996-10-27 01:00:00   3600     0      CET   846378000
38  1997-03-30 01:00:00   7200     1     CEST   859683600
39  1997-10-26 01:00:00   3600     0      CET   877827600
40  1998-03-29 01:00:00   7200     1     CEST   891133200
41  1998-10-25 01:00:00   3600     0      CET   909277200
42  1999-03-28 01:00:00   7200     1     CEST   922582800
43  1999-10-31 01:00:00   3600     0      CET   941331600
44  2000-03-26 01:00:00   7200     1     CEST   954032400
45  2000-10-29 01:00:00   3600     0      CET   972781200
46  2001-03-25 01:00:00   7200     1     CEST   985482000
47  2001-10-28 01:00:00   3600     0      CET  1004230800
48  2002-03-31 01:00:00   7200     1     CEST  1017536400
49  2002-10-27 01:00:00   3600     0      CET  1035680400
50  2003-03-30 01:00:00   7200     1     CEST  1048986000
51  2003-10-26 01:00:00   3600     0      CET  1067130000
52  2004-03-28 01:00:00   7200     1     CEST  1080435600
53  2004-10-31 01:00:00   3600     0      CET  1099184400
54  2005-03-27 01:00:00   7200     1     CEST  1111885200
55  2005-10-30 01:00:00   3600     0      CET  1130634000
56  2006-03-26 01:00:00   7200     1     CEST  1143334800
57  2006-10-29 01:00:00   3600     0      CET  1162083600
58  2007-03-25 01:00:00   7200     1     CEST  1174784400
59  2007-10-28 01:00:00   3600     0      CET  1193533200
60  2008-03-30 01:00:00   7200     1     CEST  1206838800
61  2008-10-26 01:00:00   3600     0      CET  1224982800
62  2009-03-29 01:00:00   7200     1     CEST  1238288400
63  2009-10-25 01:00:00   3600     0      CET  1256432400
64  2010-03-28 01:00:00   7200     1     CEST  1269738000
65  2010-10-31 01:00:00   3600     0      CET  1288486800
66  2011-03-27 01:00:00   7200     1     CEST  1301187600
67  2011-10-30 01:00:00   3600     0      CET  1319936400
68  2012-03-25 01:00:00   7200     1     CEST  1332637200
69  2012-10-28 01:00:00   3600     0      CET  1351386000
70  2013-03-31 01:00:00   7200     1     CEST  1364691600
71  2013-10-27 01:00:00   3600     0      CET  1382835600
72  2014-03-30 01:00:00   7200     1     CEST  1396141200
73  2014-10-26 01:00:00   3600     0      CET  1414285200
74  2015-03-29 01:00:00   7200     1     CEST  1427590800
75  2015-10-25 01:00:00   3600     0      CET  1445734800
76  2016-03-27 01:00:00   7200     1     CEST  1459040400
77  2016-10-30 01:00:00   3600     0      CET  1477789200
78  2017-03-26 01:00:00   7200     1     CEST  1490490000
79  2017-10-29 01:00:00   3600     0      CET  1509238800
80  2018-03-25 01:00:00   7200     1     CEST  1521939600
81  2018-10-28 01:00:00   3600     0      CET  1540688400
82  2019-03-31 01:00:00   7200     1     CEST  1553994000
83  2019-10-27 01:00:00   3600     0      CET  1572138000
84  2020-03-29 01:00:00   7200     1     CEST  1585443600
85  2020-10-25 01:00:00   3600     0      CET  1603587600
86  2021-03-28 01:00:00   7200     1     CEST  1616893200
87  2021-10-31 01:00:00   3600     0      CET  1635642000
88  2022-03-27 01:00:00   7200     1     CEST  1648342800
89  2022-10-30 01:00:00   3600     0      CET  1667091600
90  2023-03-26 01:00:00   7200     1     CEST  1679792400
91  2023-10-29 01:00:00   3600     0      CET  1698541200
92  2024-03-31 01:00:00   7200     1     CEST  1711846800
93  2024-10-27 01:00:00   3600     0      CET  1729990800
94  2025-03-30 01:00:00   7200     1     CEST  1743296400
95  2025-10-26 01:00:00   3600     0      CET  1761440400
96  2026-03-29 01:00:00   7200     1     CEST  1774746000
97  2026-10-25 01:00:00   3600     0      CET  1792890000
98  2027-03-28 01:00:00   7200     1     CEST  1806195600
99  2027-10-31 01:00:00   3600     0      CET  1824944400
100 2028-03-26 01:00:00   7200     1     CEST  1837645200
101 2028-10-29 01:00:00   3600     0      CET  1856394000
102 2029-03-25 01:00:00   7200     1     CEST  1869094800
103 2029-10-28 01:00:00   3600     0      CET  1887843600
104 2030-03-31 01:00:00   7200     1     CEST  1901149200
105 2030-10-27 01:00:00   3600     0      CET  1919293200
106 2031-03-30 01:00:00   7200     1     CEST  1932598800
107 2031-10-26 01:00:00   3600     0      CET  1950742800
108 2032-03-28 01:00:00   7200     1     CEST  1964048400
109 2032-10-31 01:00:00   3600     0      CET  1982797200
110 2033-03-27 01:00:00   7200     1     CEST  1995498000
111 2033-10-30 01:00:00   3600     0      CET  2014246800
112 2034-03-26 01:00:00   7200     1     CEST  2026947600
113 2034-10-29 01:00:00   3600     0      CET  2045696400
114 2035-03-25 01:00:00   7200     1     CEST  2058397200
115 2035-10-28 01:00:00   3600     0      CET  2077146000
116 2036-03-30 01:00:00   7200     1     CEST  2090451600
117 2036-10-26 01:00:00   3600     0      CET  2108595600
118 2037-03-29 01:00:00   7200     1     CEST  2121901200
119 2037-10-25 01:00:00   3600     0      CET  2140045200
Browse[2]> 1080435600 + 3600
[1] 1080439200
Browse[2]> 1080432000 + 3600
[1] 1080435600
Browse[2]> 
> 
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
[1] "kiki!"
[1] "kiki!"
[1] "kiki!"
[1] "kiki!"
[1] "kiki!"
Called from: .formatFinCenterNum(num, .Object@FinCenter, "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#347: num <- num + dst.list$offSet[offSetIdx]
Browse[2]> 
> 
> tmp
[1] "kiki!"
Called from: .formatFinCenterNum(as.numeric(getDataPart(x)), FinCenter, type = "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#347: num <- num + dst.list$offSet[offSetIdx]
Browse[2]> 
London
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 02:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> unclass(tmp)
<S4 Type Object>
attr(,"Data")
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 00:00:00 GMT"
[5] "2004-03-30 00:00:00 GMT" "2004-03-31 00:00:00 GMT"
[7] "2004-04-01 00:00:00 GMT"
attr(,"format")
[1] "%Y-%m-%d %H:%M:%S"
attr(,"FinCenter")
[1] "London"
> 
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
[1] "kiki!"
[1] "kiki!"
[1] "kiki!"
[1] "kiki!"
[1] "kiki!"
Called from: .formatFinCenterNum(num, .Object@FinCenter, "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#347: num <- num + dst.list$offSet[offSetIdx]
Browse[2]> 
> tmp
[1] "kiki!"
Called from: .formatFinCenterNum(as.numeric(getDataPart(x)), FinCenter, type = "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#347: num <- num + dst.list$offSet[offSetIdx]
Browse[2]> 
Zurich
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 01:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> unclass(tmp)
<S4 Type Object>
attr(,"Data")
[1] "2004-03-26 00:00:00 GMT" "2004-03-27 00:00:00 GMT"
[3] "2004-03-28 00:00:00 GMT" "2004-03-28 23:00:00 GMT"
[5] "2004-03-29 23:00:00 GMT" "2004-03-30 23:00:00 GMT"
[7] "2004-03-31 23:00:00 GMT"
attr(,"format")
[1] "%Y-%m-%d %H:%M:%S"
attr(,"FinCenter")
[1] "Zurich"
> as.ct(tmp)
Error in as.ct(tmp) : could not find function "as.ct"
No suitable frames for recover()
> as.POSIXct(tmp)
[1] "2004-03-26 00:00:00 GMT" "2004-03-27 00:00:00 GMT"
[3] "2004-03-28 00:00:00 GMT" "2004-03-28 23:00:00 GMT"
[5] "2004-03-29 23:00:00 GMT" "2004-03-30 23:00:00 GMT"
[7] "2004-03-31 23:00:00 GMT"
> as.POSIXct(tmp, tz = "BST")
[1] "kiki!"
Called from: .formatFinCenterNum(as.numeric(getDataPart(x)), FinCenter, type = "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#347: num <- num + dst.list$offSet[offSetIdx]
Browse[2]> 
[1] "2004-03-26 01:00:00 BST" "2004-03-27 01:00:00 BST"
[3] "2004-03-28 01:00:00 BST" "2004-03-29 01:00:00 BST"
[5] "2004-03-30 01:00:00 BST" "2004-03-31 01:00:00 BST"
[7] "2004-04-01 01:00:00 BST"
> as.POSIXct(tmp, tz = "EST")
[1] "kiki!"
Called from: .formatFinCenterNum(as.numeric(getDataPart(x)), FinCenter, type = "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#347: num <- num + dst.list$offSet[offSetIdx]
Browse[2]> 
[1] "2004-03-25 20:00:00 EST" "2004-03-26 20:00:00 EST"
[3] "2004-03-27 20:00:00 EST" "2004-03-28 20:00:00 EST"
[5] "2004-03-29 20:00:00 EST" "2004-03-30 20:00:00 EST"
[7] "2004-03-31 20:00:00 EST"
> as.POSIXct(tmp@Data, tz = "EST")
[1] "2004-03-26 00:00:00 GMT" "2004-03-27 00:00:00 GMT"
[3] "2004-03-28 00:00:00 GMT" "2004-03-28 23:00:00 GMT"
[5] "2004-03-29 23:00:00 GMT" "2004-03-30 23:00:00 GMT"
[7] "2004-03-31 23:00:00 GMT"
> as.POSIXct(tmp@Data, tz = "CEST")
[1] "2004-03-26 00:00:00 GMT" "2004-03-27 00:00:00 GMT"
[3] "2004-03-28 00:00:00 GMT" "2004-03-28 23:00:00 GMT"
[5] "2004-03-29 23:00:00 GMT" "2004-03-30 23:00:00 GMT"
[7] "2004-03-31 23:00:00 GMT"
> as.POSIXct(tmp@Data)
[1] "2004-03-26 00:00:00 GMT" "2004-03-27 00:00:00 GMT"
[3] "2004-03-28 00:00:00 GMT" "2004-03-28 23:00:00 GMT"
[5] "2004-03-29 23:00:00 GMT" "2004-03-30 23:00:00 GMT"
[7] "2004-03-31 23:00:00 GMT"
> tmp
[1] "kiki!"
Called from: .formatFinCenterNum(as.numeric(getDataPart(x)), FinCenter, type = "gmt2any")
Browse[1]> debug at /home/georgi/repos/rmetrics/pkg/timeDate/R/timeDate.R#347: num <- num + dst.list$offSet[offSetIdx]
Browse[2]> 
Zurich
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 01:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> 
> 
> 
> devtools::load_all()
ℹ Loading timeDate
Creating a generic function for ‘sample’ from package ‘base’ in package ‘timeDate’
Creating a generic function for ‘getDataPart’ from package ‘methods’ in package ‘timeDate’
Creating a generic function for ‘abline’ from package ‘graphics’ in package ‘timeDate’
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "Zurich", FinCenter = "Zurich")
> tmp
Zurich
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 02:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
by = "DSTday", zone = "London", FinCenter = "London")
tmp <- timeSequence(from = "2004-03-26 01:00:00", to = "2004-04-01 01:00:00",
+ by = "DSTday", zone = "London", FinCenter = "London")
> tmp
London
[1] [2004-03-26 01:00:00] [2004-03-27 01:00:00] [2004-03-28 02:00:00]
[4] [2004-03-29 01:00:00] [2004-03-30 01:00:00] [2004-03-31 01:00:00]
[7] [2004-04-01 01:00:00]
> unclass(tmp)
<S4 Type Object>
attr(,"Data")
[1] "2004-03-26 01:00:00 GMT" "2004-03-27 01:00:00 GMT"
[3] "2004-03-28 01:00:00 GMT" "2004-03-29 00:00:00 GMT"
[5] "2004-03-30 00:00:00 GMT" "2004-03-31 00:00:00 GMT"
[7] "2004-04-01 00:00:00 GMT"
attr(,"format")
[1] "%Y-%m-%d %H:%M:%S"
attr(,"FinCenter")
[1] "London"
> devtools::check()
══ Building ═══════════════════════════════════════════════════════════════════════════════════
Setting env vars:
• CFLAGS    : -Wall -pedantic -fdiagnostics-color=always
• CXXFLAGS  : -Wall -pedantic -fdiagnostics-color=always
• CXX11FLAGS: -Wall -pedantic -fdiagnostics-color=always
• CXX14FLAGS: -Wall -pedantic -fdiagnostics-color=always
• CXX17FLAGS: -Wall -pedantic -fdiagnostics-color=always
• CXX20FLAGS: -Wall -pedantic -fdiagnostics-color=always
✔  checking for file ‘/home/georgi/repos/rmetrics/pkg/timeDate/DESCRIPTION’
─  preparing ‘timeDate’:
✔  checking DESCRIPTION meta-information
─  checking for LF line-endings in source and make files and shell scripts
─  checking for empty or unneeded directories
   Removed empty directory ‘timeDate/docs’
   Removed empty directory ‘timeDate/revdep’
   Removed empty directory ‘timeDate/work’
─  looking to see if a ‘data/datalist’ file should be added
─  building ‘timeDate_4021.107.tar.gz’
   
══ Checking ═══════════════════════════════════════════════════════════════════════════════════
Setting env vars:
• _R_CHECK_CRAN_INCOMING_USE_ASPELL_           : TRUE
• _R_CHECK_CRAN_INCOMING_REMOTE_               : FALSE
• _R_CHECK_CRAN_INCOMING_                      : FALSE
• _R_CHECK_FORCE_SUGGESTS_                     : FALSE
• _R_CHECK_PACKAGES_USED_IGNORE_UNUSED_IMPORTS_: FALSE
• NOT_CRAN                                     : true
── R CMD check ────────────────────────────────────────────────────────────────────────────────
─  using log directory ‘/tmp/RtmpLyvWJc/filee9b5758485b9/timeDate.Rcheck’
─  using R version 4.2.2 Patched (2022-11-10 r83330)
─  using platform: x86_64-pc-linux-gnu (64-bit)
─  using session charset: UTF-8
─  using options ‘--no-manual --as-cran’
✔  checking for file ‘timeDate/DESCRIPTION’
─  this is package ‘timeDate’ version ‘4021.107’
✔  checking package namespace information
N  checking package dependencies (2.3s)
   Packages suggested but not available for checking: 'date', 'RUnit'
✔  checking if this is a source package
✔  checking if there is a namespace
✔  checking for executable files (432ms)
✔  checking for hidden files and directories
✔  checking for portable file names
✔  checking for sufficient/correct file permissions
✔  checking whether package ‘timeDate’ can be installed (9.1s)
✔  checking installed package size
✔  checking package directory
✔  checking for future file timestamps (435ms)
✔  checking DESCRIPTION meta-information
✔  checking top-level files
✔  checking for left-over files
✔  checking index information
✔  checking package subdirectories
✔  checking R files for non-ASCII characters
✔  checking R files for syntax errors
✔  checking whether the package can be loaded
✔  checking whether the package can be loaded with stated dependencies
✔  checking whether the package can be unloaded cleanly
✔  checking whether the namespace can be loaded with stated dependencies
✔  checking whether the namespace can be unloaded cleanly
✔  checking loading without being on the library search path
✔  checking dependencies in R code (1s)
✔  checking S3 generic/method consistency (704ms)
✔  checking replacement functions
✔  checking foreign function calls (1.1s)
─  checking R code for possible problems ... [15s/15s] OK (14.7s)
✔  checking Rd files (417ms)
✔  checking Rd metadata
✔  checking Rd line widths
✔  checking Rd cross-references
✔  checking for missing documentation entries
✔  checking for code/documentation mismatches (898ms)
✔  checking Rd \usage sections (1s)
✔  checking Rd contents
✔  checking for unstated dependencies in examples
✔  checking R/sysdata.rda
✔  checking line endings in Makefiles
✔  checking for GNU extensions in Makefiles
✔  checking include directives in Makefiles
✔  checking examples (2.1s)
✔  checking for unstated dependencies in ‘tests’
─  checking tests
✔  Running ‘doRUnit.R’
✔  checking for non-standard things in the check directory
✔  checking for detritus in the temp directory
   
   See
     ‘/tmp/RtmpLyvWJc/filee9b5758485b9/timeDate.Rcheck/00check.log’
   for details.
   
   
── R CMD check results ───────────────────────────────────────────────── timeDate 4021.107 ────
Duration: 38s

❯ checking package dependencies ... NOTE
  Packages suggested but not available for checking: 'date', 'RUnit'

0 errors ✔ | 0 warnings ✔ | 1 note ✖
> packageDescription("RUnit")
[1] NA
Warning message:
In packageDescription("RUnit") : no package 'RUnit' was found
> packageDescription("date")
[1] NA
Warning message:
In packageDescription("date") : no package 'date' was found
> install.packages(c('date', 'RUnit'))
*** output flushed ***
> devtools::check()
══ Building ═══════════════════════════════════════════════════════════════════════════════════
Setting env vars:
• CFLAGS    : -Wall -pedantic -fdiagnostics-color=always
• CXXFLAGS  : -Wall -pedantic -fdiagnostics-color=always
• CXX11FLAGS: -Wall -pedantic -fdiagnostics-color=always
• CXX14FLAGS: -Wall -pedantic -fdiagnostics-color=always
• CXX17FLAGS: -Wall -pedantic -fdiagnostics-color=always
• CXX20FLAGS: -Wall -pedantic -fdiagnostics-color=always
✔  checking for file ‘/home/georgi/repos/rmetrics/pkg/timeDate/DESCRIPTION’
─  preparing ‘timeDate’:
✔  checking DESCRIPTION meta-information
─  checking for LF line-endings in source and make files and shell scripts
─  checking for empty or unneeded directories
   Removed empty directory ‘timeDate/docs’
   Removed empty directory ‘timeDate/revdep’
   Removed empty directory ‘timeDate/work’
─  looking to see if a ‘data/datalist’ file should be added
─  building ‘timeDate_4021.107.tar.gz’
   
══ Checking ═══════════════════════════════════════════════════════════════════════════════════
Setting env vars:
• _R_CHECK_CRAN_INCOMING_USE_ASPELL_           : TRUE
• _R_CHECK_CRAN_INCOMING_REMOTE_               : FALSE
• _R_CHECK_CRAN_INCOMING_                      : FALSE
• _R_CHECK_FORCE_SUGGESTS_                     : FALSE
• _R_CHECK_PACKAGES_USED_IGNORE_UNUSED_IMPORTS_: FALSE
• NOT_CRAN                                     : true
── R CMD check ────────────────────────────────────────────────────────────────────────────────
─  using log directory ‘/tmp/RtmpLyvWJc/filee9b55441cb29/timeDate.Rcheck’
─  using R version 4.2.2 Patched (2022-11-10 r83330)
─  using platform: x86_64-pc-linux-gnu (64-bit)
─  using session charset: UTF-8
─  using options ‘--no-manual --as-cran’
✔  checking for file ‘timeDate/DESCRIPTION’
─  this is package ‘timeDate’ version ‘4021.107’
✔  checking package namespace information
✔  checking package dependencies (709ms)
✔  checking if this is a source package
✔  checking if there is a namespace
✔  checking for executable files (430ms)
✔  checking for hidden files and directories
✔  checking for portable file names
✔  checking for sufficient/correct file permissions
✔  checking whether package ‘timeDate’ can be installed (9.2s)
✔  checking installed package size
✔  checking package directory
✔  checking for future file timestamps
✔  checking DESCRIPTION meta-information
✔  checking top-level files
✔  checking for left-over files
✔  checking index information
✔  checking package subdirectories
✔  checking R files for non-ASCII characters
✔  checking R files for syntax errors
✔  checking whether the package can be loaded
✔  checking whether the package can be loaded with stated dependencies
✔  checking whether the package can be unloaded cleanly
✔  checking whether the namespace can be loaded with stated dependencies
✔  checking whether the namespace can be unloaded cleanly
✔  checking loading without being on the library search path
✔  checking dependencies in R code (1s)
✔  checking S3 generic/method consistency (697ms)
✔  checking replacement functions
✔  checking foreign function calls (1.2s)
─  checking R code for possible problems ... [15s/15s] OK (14.6s)
✔  checking Rd files (396ms)
✔  checking Rd metadata
✔  checking Rd line widths
✔  checking Rd cross-references
✔  checking for missing documentation entries
✔  checking for code/documentation mismatches (866ms)
✔  checking Rd \usage sections (994ms)
✔  checking Rd contents
✔  checking for unstated dependencies in examples
✔  checking R/sysdata.rda
✔  checking line endings in Makefiles
✔  checking for GNU extensions in Makefiles
✔  checking include directives in Makefiles
✔  checking examples (2.1s)
✔  checking for unstated dependencies in ‘tests’
─  checking tests
─  Running ‘doRUnit.R’ (1.2s)
E  Some test files failed
   Running the tests in ‘tests/doRUnit.R’ failed.
   Last 13 lines of output:
     
      
     1 Test Suite : 
     timeDate unit testing - 57 test functions, 0 errors, 2 failures
     FAILURE in test.dst1.print: Error in checkIdentical(tseq2Test, format(tseq2)) : FALSE 
      
     FAILURE in test.seq.Zurich: Error in checkIdentical(format(seq(iso1, by = "min", length.out = 24 *  : 
       FALSE 
      
     Error in eval(ei, envir) : 
     
     unit testing failed (#test failures: 2, R errors: 0)
     
     Calls: source -> withVisible -> eval -> eval
     Execution halted
✔  checking for non-standard things in the check directory
✔  checking for detritus in the temp directory
   
   See
     ‘/tmp/RtmpLyvWJc/filee9b55441cb29/timeDate.Rcheck/00check.log’
   for details.
   
   
── R CMD check results ───────────────────────────────────────────────── timeDate 4021.107 ────
Duration: 36.7s

❯ checking tests ...
  See below...

── Test failures ───────────────────────────────────────────────────────────────── doRUnit ────

> #### doRUnit.R --- Run RUnit tests
> ####------------------------------------------------------------------------
> 
> ### Origianlly follows Gregor Gojanc's example in CRAN package  'gdata'
> ### and the corresponding section in the R Wiki:
> ###  http://wiki.r-project.org/rwiki/doku.php?id=developers:runit
> 
> ### MM: Vastly changed:  This should also be "runnable" for *installed*
> ##              package which has no ./tests/
> ## ----> put the bulk of the code e.g. in  ../inst/unitTests/runTests.R :
> 
> if(require("RUnit", quietly = TRUE)) {
+ 
+   ## --- Setup ---
+ 
+   wd <- getwd()
+   pkg <- sub("\\.Rcheck$", '', basename(dirname(wd)))
+ 
+   library(package=pkg, character.only=TRUE)
+ 
+   path <- system.file("unitTests", package = pkg)
+ 
+   stopifnot(file.exists(path), file.info(path.expand(path))$isdir)
+ 
+   source(file.path(path, "runTests.R"), echo = TRUE)
+ }

> pkg <- "timeDate"

> if (require("RUnit", quietly = TRUE)) {
+     library(package = pkg, character.only = TRUE)
+     if (!(exists("path") && file.exists(path))) 
+     .... [TRUNCATED] 


Executing test function test.POSIX  ...  [1] "2006-01-01 GMT" "2006-02-01 GMT" "2006-03-01 GMT" "2006-04-01 GMT"
 [5] "2006-05-01 GMT" "2006-06-01 GMT" "2006-07-01 GMT" "2006-08-01 GMT"
 [9] "2006-09-01 GMT" "2006-10-01 GMT" "2006-11-01 GMT" "2006-12-01 GMT"
[1] "POSIXct" "POSIXt" 
GMT
 [1] [2006-01-01] [2006-02-01] [2006-03-01] [2006-04-01] [2006-05-01]
 [6] [2006-06-01] [2006-07-01] [2006-08-01] [2006-09-01] [2006-10-01]
[11] [2006-11-01] [2006-12-01]
 [1] "2006-01-01" "2006-02-01" "2006-03-01" "2006-04-01" "2006-05-01"
 [6] "2006-06-01" "2006-07-01" "2006-08-01" "2006-09-01" "2006-10-01"
[11] "2006-11-01" "2006-12-01"
GMT
 [1] [2006-01-01] [2006-02-01] [2006-03-01] [2006-04-01] [2006-05-01]
 [6] [2006-06-01] [2006-07-01] [2006-08-01] [2006-09-01] [2006-10-01]
[11] [2006-11-01] [2006-12-01]
 [1] "2006-01-01" "2006-02-01" "2006-03-01" "2006-04-01" "2006-05-01"
 [6] "2006-06-01" "2006-07-01" "2006-08-01" "2006-09-01" "2006-10-01"
[11] "2006-11-01" "2006-12-01"
NewYork
 [1] [2006-01-01] [2006-02-01] [2006-03-01] [2006-04-01] [2006-05-01]
 [6] [2006-06-01] [2006-07-01] [2006-08-01] [2006-09-01] [2006-10-01]
[11] [2006-11-01] [2006-12-01]
 [1] "2006-01-01" "2006-02-01" "2006-03-01" "2006-04-01" "2006-05-01"
 [6] "2006-06-01" "2006-07-01" "2006-08-01" "2006-09-01" "2006-10-01"
[11] "2006-11-01" "2006-12-01"
NewYork
 [1] [2005-12-31 19:00:00] [2006-01-31 19:00:00] [2006-02-28 19:00:00]
 [4] [2006-03-31 19:00:00] [2006-04-30 20:00:00] [2006-05-31 20:00:00]
 [7] [2006-06-30 20:00:00] [2006-07-31 20:00:00] [2006-08-31 20:00:00]
[10] [2006-09-30 20:00:00] [2006-10-31 19:00:00] [2006-11-30 19:00:00]
 [1] "2005-12-31 19:00:00" "2006-01-31 19:00:00" "2006-02-28 19:00:00"
 [4] "2006-03-31 19:00:00" "2006-04-30 20:00:00" "2006-05-31 20:00:00"
 [7] "2006-06-30 20:00:00" "2006-07-31 20:00:00" "2006-08-31 20:00:00"
[10] "2006-09-30 20:00:00" "2006-10-31 19:00:00" "2006-11-30 19:00:00"
 done successfully.



Executing test function test.asDate  ... GMT
[1] [2006-06-01] [2006-12-01]
[1] "2006-06-01" "2006-12-01"
NewYork
[1] [2006-06-01] [2006-12-01]
[1] "2006-06-01" "2006-12-01"
 done successfully.



Executing test function test.asTimeDate  ... GMT
[1] [2006-06-01 10:00:00] [2006-12-01 10:00:00]
[1] "2006-06-01 10:00:00" "2006-12-01 10:00:00"
NewYork
[1] [2006-06-01 10:00:00] [2006-12-01 10:00:00]
[1] "2006-06-01 10:00:00" "2006-12-01 10:00:00"
NewYork
[1] [2006-06-01 06:00:00] [2006-12-01 05:00:00]
[1] "2006-06-01 06:00:00" "2006-12-01 05:00:00"
 done successfully.



Executing test function test.displayMethods  ... myFinCenter 
  "NewYork" 
NewYork
 [1] [2022-01-01] [2022-02-01] [2022-03-01] [2022-04-01] [2022-05-01]
 [6] [2022-06-01] [2022-07-01] [2022-08-01] [2022-09-01] [2022-10-01]
[11] [2022-11-01] [2022-12-01]
Object:        DT
Start Record:  2006-01-01
End Record:    2006-12-01
Observations:  12
Format:        %Y-%m-%d
FinCenter:     NewYork
[1] "2006-07-01"
 done successfully.



Executing test function test.midnightStandard  ... [1] "2001-01-01 00:00:00" "2007-01-31 00:00:00"
[1] "2001-01-01 16:00:00"
[1] "2001-02-01 00:00:00" "2001-01-31 23:10:20"
[1] "2001-02-01 00:00:00 GMT" "2001-01-31 23:10:20 GMT"
[1] "2010-01-01 GMT" "2010-10-10 GMT"
[1] "2001-02-01 00:00:00" "2001-01-31 23:10:00" "2006-01-01 00:00:00"
[1] "2001-01-31 00:00:00"
 done successfully.



Executing test function test.sysTimeDate  ... Zurich
[1] [2022-11-24 22:50:25]
GMT
[1] [2022-11-24 21:50:25]
NewYork
[1] [2022-11-24 16:50:25]
[1] "timeDate"
attr(,"package")
[1] "timeDate"
[1] "Date"
 done successfully.



Executing test function test.timeCalendar  ...  done successfully.



Executing test function test.timeDate  ... myFinCenter 
      "GMT" 
[1] "2006-01-10" "2006-01-20" "2006-01-30"
GMT
[1] [2006-01-10] [2006-01-20] [2006-01-30]
GMT
[1] [2006-01-10 10:00:00] [2006-01-20 10:00:00] [2006-01-30 10:00:00]
[1] "2006-01-10 10:00" "2006-01-20 10:00" "2006-01-30 10:00"
GMT
[1] [2006-01-10 10:00:00] [2006-01-20 10:00:00] [2006-01-30 10:00:00]
GMT
[1] [2001-01-01]
GMT
[1] [2001-01-01]
GMT
[1] [2001-01-01]
GMT
[1] [2001-01-01 16:00:00]
GMT
[1] [2001-01-01 16:00:00]
GMT
[1] [2001-01-01]
GMT
[1] [2001-01-01]
GMT
[1] [2001-01-01]
GMT
[1] [2001-01-01 16:00:00]
GMT
[1] [2001-01-01 16:00:00]
GMT
[1] [2001-01-01 00:00:00] [2001-01-01 16:00:00]
GMT
[1] [2001-01-01 00:00:00] [2001-01-01 16:00:00]
Zurich
[1] [2001-01-01 01:00:00]
Zurich
[1] [2001-01-01 01:00:00]
Zurich
[1] [2001-01-01 01:00:00]
Zurich
[1] [2001-01-01 17:00:00]
Zurich
[1] [2001-01-01 17:00:00]
Zurich
[1] [2001-01-01 01:00:00] [2001-01-01 17:00:00]
Zurich
[1] [2001-01-01 01:00:00] [2001-01-01 17:00:00]
GMT
[1] [2006-03-01] [2006-06-01] [2006-09-01] [2006-12-01]
GMT
[1] [2006-12-15]
 done successfully.



Executing test function test.timeSequence  ...  done successfully.



Executing test function test.whichFormat  ... [1] "%Y%m%d"
[1] "%Y%m%d%H%M"
[1] "%Y%m%d%H%M%S"
[1] "%Y%m%d%H%M"
[1] "%Y%m%d%H%M%S"
[1] "%Y-%m-%d"
[1] "%Y-%m-%d %H:%M"
[1] "%Y-%m-%d %H:%M:%S"
[1] "%Y-%m-%d %H:%M"
[1] "%Y-%m-%d %H:%M:%S"
[1] "%m/%d/%Y"
[1] "%d-%b-%Y"
 done successfully.



Executing test function test.as  ...  done successfully.



Executing test function test.asTimeDate  ...  done successfully.



Executing test function test.atoms  ...  done successfully.



Executing test function test.julian  ...  done successfully.



Executing test function test.months  ...  done successfully.



Executing test function test.dst1.print  ... Timing stopped at: 0.005 0 0.005
Error in checkIdentical(tseq2Test, format(tseq2)) : FALSE 
 
In addition: Warning messages:
1: In RNGkind(kind = testSuite$rngKind, normal.kind = testSuite$rngNormalKind) :
  RNGkind: Marsaglia-Multicarry has poor statistical properties
2: In RNGkind(kind = testSuite$rngKind, normal.kind = testSuite$rngNormalKind) :
  RNGkind: severe deviations from normality for Kinderman-Ramage + Marsaglia-Multicarry
3: In RNGkind(kind = testSuite$rngKind, normal.kind = testSuite$rngNormalKind) :
  RNGkind: Marsaglia-Multicarry has poor statistical properties
4: In RNGkind(kind = testSuite$rngKind, normal.kind = testSuite$rngNormalKind) :
  RNGkind: severe deviations from normality for Kinderman-Ramage + Marsaglia-Multicarry
5: In RNGkind(kind = testSuite$rngKind, normal.kind = testSuite$rngNormalKind) :
  RNGkind: Marsaglia-Multicarry has poor statistical properties
6: In RNGkind(kind = testSuite$rngKind, normal.kind = testSuite$rngNormalKind) :
  RNGkind: severe deviations from normality for Kinderman-Ramage + Marsaglia-Multicarry
7: In RNGkind(kind = testSuite$rngKind, normal.kind = testSuite$rngNormalKind) :
  RNGkind: Marsaglia-Multicarry has poor statistical properties
8: In RNGkind(kind = testSuite$rngKind, normal.kind = testSuite$rngNormalKind) :
  RNGkind: severe deviations from normality for Kinderman-Ramage + Marsaglia-Multicarry
 done successfully.



Executing test function test.dst2.print  ...  done successfully.



Executing test function test.zurich  ...  done successfully.



Executing test function test.listFinCenter  ...  done successfully.



Executing test function test.myFinCenter  ...  done successfully.



Executing test function test.rulesFinCenter  ...  done successfully.



Executing test function test.holiday  ...  done successfully.



Executing test function test.holidayLONDON  ... Europe/London
 [1] [2022-01-03] [2022-04-15] [2022-04-18] [2022-05-02] [2022-06-02]
 [6] [2022-06-03] [2022-08-29] [2022-09-19] [2022-12-26] [2022-12-27]
 done successfully.



Executing test function test.holidayNERC  ... Eastern
[1] [2022-01-01] [2022-05-30] [2022-07-04] [2022-09-05] [2022-11-24]
[6] [2022-12-26]
Eastern
[1] [2022-01-01] [2022-05-30] [2022-07-04] [2022-09-05] [2022-11-24]
[6] [2022-12-26]
 done successfully.



Executing test function test.holidayNYSE  ... NewYork
[1] [2022-01-17] [2022-02-21] [2022-04-15] [2022-05-30] [2022-06-20]
[6] [2022-07-04] [2022-09-05] [2022-11-24] [2022-12-26]
NewYork
[1] [2022-01-17] [2022-02-21] [2022-04-15] [2022-05-30] [2022-06-20]
[6] [2022-07-04] [2022-09-05] [2022-11-24] [2022-12-26]
 done successfully.



Executing test function test.holidayZURICH  ...  done successfully.



Executing test function test.easter  ...  done successfully.



Executing test function test.holiday  ... 2022-11-27 Advent1st 
2022-12-04 Advent2nd 
2022-12-11 Advent3rd 
2022-12-18 Advent4th 
2022-11-01 AllSaints 
2022-11-02 AllSouls 
2022-03-25 Annunciation 
2022-05-26 Ascension 
2022-03-02 AshWednesday 
2022-08-15 AssumptionOfMary 
2022-09-08 BirthOfVirginMary 
2022-12-26 BoxingDay 
2022-07-01 CACanadaDay 
2022-08-01 CACivicProvincialHoliday 
2022-09-05 CALabourDay 
2022-10-10 CAThanksgivingDay 
2022-05-23 CAVictoriaDay 
2022-05-26 CHAscension 
2022-01-02 CHBerchtoldsDay 
2022-08-01 CHConfederationDay 
2022-09-12 CHKnabenschiessen 
2022-04-18 CHSechselaeuten 
2022-11-11 CaRemembranceDay 
2022-09-14 CelebrationOfHolyCross 
2022-11-20 ChristTheKing 
2022-12-25 ChristmasDay 
2022-12-24 ChristmasEve 
2022-06-16 CorpusChristi 
2022-05-26 DEAscension 
2022-12-24 DEChristmasEve 
2022-06-16 DECorpusChristi 
2022-10-03 DEGermanUnity 
2022-12-31 DENewYearsEve 
2022-04-17 Easter 
2022-04-18 EasterMonday 
2022-04-17 EasterSunday 
2022-01-06 Epiphany 
2022-11-01 FRAllSaints 
2022-11-11 FRArmisticeDay 
2022-05-26 FRAscension 
2022-08-15 FRAssumptionVirginMary 
2022-07-14 FRBastilleDay 
2022-05-08 FRFetDeLaVictoire1945 
2022-05-02 GBEarlyMayBankHoliday 
1999-12-31 GBMilleniumDay 
2022-06-02 GBSpringBankHoliday 
2022-08-29 GBSummerBankHoliday 
2022-04-15 GoodFriday 
2022-11-01 ITAllSaints 
2022-08-15 ITAssumptionOfVirginMary 
2022-01-06 ITEpiphany 
2022-12-08 ITImmaculateConception 
2022-04-25 ITLiberationDay 
2022-12-07 ITStAmrose 
2022-09-24 JPAutumnalEquinox 
2022-12-31 JPBankHolidayDec31 
2022-01-02 JPBankHolidayJan2 
2022-01-03 JPBankHolidayJan3 
2022-11-03 JPBunkaNoHi 
2022-05-05 JPChildrensDay 
2022-01-15 JPComingOfAgeDay 
2022-05-03 JPConstitutionDay 
2022-11-23 JPEmperorsBirthday 
2022-01-01 JPGantan 
2022-04-29 JPGreeneryDay 
2022-10-10 JPHealthandSportsDay 
2022-09-15 JPKeirouNOhi 
2022-02-11 JPKenkokuKinenNoHi 
2022-05-03 JPKenpouKinenBi 
2022-11-23 JPKinrouKanshaNoHi 
2022-05-05 JPKodomoNoHi 
2022-05-04 JPKokuminNoKyujitu 
2022-07-20 JPMarineDay 
2022-04-29 JPMidoriNoHi 
2022-02-11 JPNatFoundationDay 
2022-05-04 JPNationHoliday 
2022-11-03 JPNationalCultureDay 
2022-01-01 JPNewYearsDay 
2022-09-15 JPRespectForTheAgedDay 
2022-01-15 JPSeijinNoHi 
2022-09-24 JPShuubunNoHi 
2022-10-10 JPTaiikuNoHi 
2022-11-23 JPTennouTanjyouBi 
2022-11-23 JPThanksgivingDay 
2022-07-20 JPUmiNoHi 
2022-05-01 LaborDay 
2022-09-29 MassOfArchangels 
2022-01-01 NewYearsDay 
2022-04-10 PalmSunday 
2022-06-05 Pentecost 
2022-06-06 PentecostMonday 
2022-02-02 PresentationOfLord 
2022-02-27 Quinquagesima 
2022-05-22 RogationSunday 
2022-02-13 Septuagesima 
2022-01-01 SolemnityOfMary 
2022-08-06 TransfigurationOfLord 
2022-06-12 TrinitySunday 
2022-03-07 USCPulaskisBirthday 
2022-12-25 USChristmasDay 
2022-10-10 USColumbusDay 
2022-05-30 USDecorationMemorialDay 
2022-11-08 USElectionDay 
2022-04-15 USGoodFriday 
2022-01-20 USInaugurationDay 
2022-07-04 USIndependenceDay 
2022-06-19 USJuneteenthNationalIndependenceDay 
2022-09-05 USLaborDay 
2022-02-12 USLincolnsBirthday 
2022-01-17 USMLKingsBirthday 
2022-05-30 USMemorialDay 
2022-01-01 USNewYearsDay 
2022-02-21 USPresidentsDay 
2022-11-24 USThanksgivingDay 
2022-11-11 USVeteransDay 
2022-02-22 USWashingtonsBirthday 
 done successfully.



Executing test function test.listHolidays  ...  done successfully.



Executing test function test.timeDateMathOps  ...  done successfully.



Executing test function test.timeDateOrdering  ... Formal class 'timeDate' [package "timeDate"] with 3 slots
  ..@ Data     : POSIXct[1:12], format: "2007-01-01 15:00:00" "2007-02-01 15:00:00" ...
  ..@ format   : chr "%Y-%m-%d %H:%M:%S"
  ..@ FinCenter: chr "NewYork"
Formal class 'timeDate' [package "timeDate"] with 3 slots
  ..@ Data     : POSIXct[1:12], format: "2007-01-01 15:00:00" "2007-02-01 15:00:00" ...
  ..@ format   : chr "%Y-%m-%d %H:%M:%S"
  ..@ FinCenter: chr "Zurich"
GMT
 [1] [2022-02-01] [2022-03-01] [2022-07-01] [2022-09-01] [2022-01-01]
 [6] [2022-05-01] [2022-10-01] [2022-11-01] [2022-12-01] [2022-06-01]
[11] [2022-04-01] [2022-08-01]
GMT
[1] [2022-11-24] [2022-11-23] [2022-11-22] [2022-11-21] [2022-11-20]
[6] [2022-11-19]
 done successfully.



Executing test function test.timeFirstDayInMonth  ...  done successfully.



Executing test function test.timeFirstDayInQuarter  ...  done successfully.



Executing test function test.timeLastDayInMonth  ...  done successfully.



Executing test function test.timeLastDayInQuarter  ...  done successfully.



Executing test function test.timeLastNdayInMonth  ...  done successfully.



Executing test function test.timeNdayOnOrAfter  ...  done successfully.



Executing test function test.timeNdayOnOrBefore  ...  done successfully.



Executing test function test.timeNthNdayInMonth  ...  done successfully.



Executing test function test.Easter  ... Zurich
[1] [2006-04-09] [2006-04-10] [2006-04-11] [2006-04-12] [2006-04-13]
[6] [2006-04-14] [2006-04-15] [2006-04-16]
Zurich
[1] [2006-04-09] [2006-04-10] [2006-04-11] [2006-04-12] [2006-04-13]
[6] [2006-04-14] [2006-04-15] [2006-04-16]
 done successfully.



Executing test function test.blockStart  ...  done successfully.



Executing test function test.cut  ... GMT
[1] [2006-04-14]
GMT
[1] [2006-04-17]
GMT
[1] [2006-04-14] [2006-04-15] [2006-04-16]
GMT
[1] [2006-04-14] [2006-04-15] [2006-04-16]
 done successfully.



Executing test function test.dayOfWeek  ...  done successfully.



Executing test function test.holidayNYSE  ...  done successfully.



Executing test function test.isBizday  ...  done successfully.



Executing test function test.isHoliday  ...  done successfully.



Executing test function test.isWeekday  ...  done successfully.



Executing test function test.isWeekend  ...  done successfully.



Executing test function test.start  ... GMT
[1] [2022-01-01]
GMT
[1] [2022-12-01]
 done successfully.



Executing test function test.subset  ...  done successfully.



Executing test function test.AAA  ... [1] "Pacific/Auckland"
 done successfully.



Executing test function test.dayOfWeek  ...  done successfully.



Executing test function test.dayOfYear  ...  done successfully.



Executing test function test.isWeekday  ...  done successfully.



Executing test function test.isWeekend  ...  done successfully.



Executing test function test.seq.GMT  ...  done successfully.



Executing test function test.seq.Zurich  ... Timing stopped at: 0.006 0 0.006
Error in checkIdentical(format(seq(iso1, by = "min", length.out = 24 *  : 
  FALSE 
 
In addition: There were 24 warnings (use warnings() to see them)
 done successfully.

RUNIT TEST PROTOCOL -- Fri Nov 25 10:50:26 2022 
*********************************************** 
Number of test functions: 57 
Number of errors: 0 
Number of failures: 2 

 
1 Test Suite : 
timeDate unit testing - 57 test functions, 0 errors, 2 failures
FAILURE in test.dst1.print: Error in checkIdentical(tseq2Test, format(tseq2)) : FALSE 
 
FAILURE in test.seq.Zurich: Error in checkIdentical(format(seq(iso1, by = "min", length.out = 24 *  : 
  FALSE 
 
Error in eval(ei, envir) : 

unit testing failed (#test failures: 2, R errors: 0)

Calls: source -> withVisible -> eval -> eval
Execution halted

1 error ✖ | 0 warnings ✔ | 0 notes ✔
> tseq2 <- timeSequence( from = from, to = to,
+                           by = "hour", zone = "GMT", FinCenter = "Zurich")
Error in whichFormat(as.character(from)) (from timeDate-whichFormat.R#35) : object 'from' not found

Enter a frame number, or 0 to exit   

1: timeSequence(from = from, to = to, by = "hour", zone = "GMT", FinCenter = "
2: timeDate-Sequence.R#83: whichFormat(as.character(from))

Selection: 0
> 
> 
> from <- '2008-03-30'
> to <- '2008-03-31'
> tseq1 <- timeSequence( from = from, to = to,
+                           by = "hour", zone = "GMT", FinCenter = "GMT")
>     tseq1
GMT
 [1] [2008-03-30 00:00:00] [2008-03-30 01:00:00] [2008-03-30 02:00:00]
 [4] [2008-03-30 03:00:00] [2008-03-30 04:00:00] [2008-03-30 05:00:00]
 [7] [2008-03-30 06:00:00] [2008-03-30 07:00:00] [2008-03-30 08:00:00]
[10] [2008-03-30 09:00:00] [2008-03-30 10:00:00] [2008-03-30 11:00:00]
[13] [2008-03-30 12:00:00] [2008-03-30 13:00:00] [2008-03-30 14:00:00]
[16] [2008-03-30 15:00:00] [2008-03-30 16:00:00] [2008-03-30 17:00:00]
[19] [2008-03-30 18:00:00] [2008-03-30 19:00:00] [2008-03-30 20:00:00]
[22] [2008-03-30 21:00:00] [2008-03-30 22:00:00] [2008-03-30 23:00:00]
[25] [2008-03-31 00:00:00]
> tseq1Test <- c(
+                    "2008-03-30 00:00:00", "2008-03-30 01:00:00",
+                    "2008-03-30 02:00:00", "2008-03-30 03:00:00",
+                    "2008-03-30 04:00:00", "2008-03-30 05:00:00",
+                    "2008-03-30 06:00:00", "2008-03-30 07:00:00",
+                    "2008-03-30 08:00:00", "2008-03-30 09:00:00",
+                    "2008-03-30 10:00:00", "2008-03-30 11:00:00",
+                    "2008-03-30 12:00:00", "2008-03-30 13:00:00",
+                    "2008-03-30 14:00:00", "2008-03-30 15:00:00",
+                    "2008-03-30 16:00:00", "2008-03-30 17:00:00",
+                    "2008-03-30 18:00:00", "2008-03-30 19:00:00",
+                    "2008-03-30 20:00:00", "2008-03-30 21:00:00",
+                    "2008-03-30 22:00:00", "2008-03-30 23:00:00",
+                    "2008-03-31 00:00:00")
> checkIdentical(tseq1Test, format(tseq1))
Error in checkIdentical(tseq1Test, format(tseq1)) : 
  could not find function "checkIdentical"
No suitable frames for recover()
> all.equal(tseq1Test, format(tseq1))
[1] TRUE
> identical(tseq1Test, format(tseq1))
[1] TRUE
> tseq1Test <- c(
+                    "2008-03-30 00:00:00", "2008-03-30 01:00:00",
+                    "2008-03-30 02:00:00", "2008-03-30 03:00:00",
+                    "2008-03-30 04:00:00", "2008-03-30 05:00:00",
+                    "2008-03-30 06:00:00", "2008-03-30 07:00:00",
+                    "2008-03-30 08:00:00", "2008-03-30 09:00:00",
+                    "2008-03-30 10:00:00", "2008-03-30 11:00:00",
+                    "2008-03-30 12:00:00", "2008-03-30 13:00:00",
+                    "2008-03-30 14:00:00", "2008-03-30 15:00:00",
+                    "2008-03-30 16:00:00", "2008-03-30 17:00:00",
+                    "2008-03-30 18:00:00", "2008-03-30 19:00:00",
+                    "2008-03-30 20:00:00", "2008-03-30 21:00:00",
+                    "2008-03-30 22:00:00", "2008-03-30 23:00:00",
+                    "2008-03-31 00:00:00")
> 
>     checkIdentical(tseq1Test, format(tseq1))
Error in checkIdentical(tseq1Test, format(tseq1)) : 
  could not find function "checkIdentical"
No suitable frames for recover()
> library("RUnit")
> checkIdentical(tseq1Test, format(tseq1))
[1] TRUE
> checkIdentical(tseq1Test, format(tseq1@Data))
[1] TRUE
> tseq2 <- timeSequence( from = from, to = to,
+                           by = "hour", zone = "GMT", FinCenter = "Zurich")
> tseq2
Zurich
 [1] [2008-03-30 02:00:00] [2008-03-30 03:00:00] [2008-03-30 04:00:00]
 [4] [2008-03-30 05:00:00] [2008-03-30 06:00:00] [2008-03-30 07:00:00]
 [7] [2008-03-30 08:00:00] [2008-03-30 09:00:00] [2008-03-30 10:00:00]
[10] [2008-03-30 11:00:00] [2008-03-30 12:00:00] [2008-03-30 13:00:00]
[13] [2008-03-30 14:00:00] [2008-03-30 15:00:00] [2008-03-30 16:00:00]
[16] [2008-03-30 17:00:00] [2008-03-30 18:00:00] [2008-03-30 19:00:00]
[19] [2008-03-30 20:00:00] [2008-03-30 21:00:00] [2008-03-30 22:00:00]
[22] [2008-03-30 23:00:00] [2008-03-31 00:00:00] [2008-03-31 01:00:00]
[25] [2008-03-31 02:00:00]
> checkIdentical(tseq1Test, format(tseq2@Data))
[1] TRUE
> tseq2Test <- c(
+                    "2008-03-30 01:00:00", "2008-03-30 03:00:00",
+                    "2008-03-30 04:00:00", "2008-03-30 05:00:00",
+                    "2008-03-30 06:00:00", "2008-03-30 07:00:00",
+                    "2008-03-30 08:00:00", "2008-03-30 09:00:00",
+                    "2008-03-30 10:00:00", "2008-03-30 11:00:00",
+                    "2008-03-30 12:00:00", "2008-03-30 13:00:00",
+                    "2008-03-30 14:00:00", "2008-03-30 15:00:00",
+                    "2008-03-30 16:00:00", "2008-03-30 17:00:00",
+                    "2008-03-30 18:00:00", "2008-03-30 19:00:00",
+                    "2008-03-30 20:00:00", "2008-03-30 21:00:00",
+                    "2008-03-30 22:00:00", "2008-03-30 23:00:00",
+                    "2008-03-31 00:00:00", "2008-03-31 01:00:00",
+                    "2008-03-31 02:00:00")
> 
>     checkIdentical(tseq2Test, format(tseq2))
Error in checkIdentical(tseq2Test, format(tseq2)) : FALSE 
 

Enter a frame number, or 0 to exit   

1: checkIdentical(tseq2Test, format(tseq2))

Selection: 0
> all.equal(tseq2Test, format(tseq2))
[1] "1 string mismatch"
> tseq2Test == format(tseq2)
 [1] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[13]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[25]  TRUE
> tseq2Test[1] == format(tseq2)[1]
[1] FALSE
> tseq2Test[1]
[1] "2008-03-30 01:00:00"
> tseq2Test[1] == format(tseq2)[1]
[1] FALSE
> format(tseq2)[1]
[1] "2008-03-30 02:00:00"
> tseq2
Zurich
 [1] [2008-03-30 02:00:00] [2008-03-30 03:00:00] [2008-03-30 04:00:00]
 [4] [2008-03-30 05:00:00] [2008-03-30 06:00:00] [2008-03-30 07:00:00]
 [7] [2008-03-30 08:00:00] [2008-03-30 09:00:00] [2008-03-30 10:00:00]
[10] [2008-03-30 11:00:00] [2008-03-30 12:00:00] [2008-03-30 13:00:00]
[13] [2008-03-30 14:00:00] [2008-03-30 15:00:00] [2008-03-30 16:00:00]
[16] [2008-03-30 17:00:00] [2008-03-30 18:00:00] [2008-03-30 19:00:00]
[19] [2008-03-30 20:00:00] [2008-03-30 21:00:00] [2008-03-30 22:00:00]
[22] [2008-03-30 23:00:00] [2008-03-31 00:00:00] [2008-03-31 01:00:00]
[25] [2008-03-31 02:00:00]
> devtools::check()
══ Building ═══════════════════════════════════════════════════════════════════════════════════
Setting env vars:
• CFLAGS    : -Wall -pedantic -fdiagnostics-color=always
• CXXFLAGS  : -Wall -pedantic -fdiagnostics-color=always
• CXX11FLAGS: -Wall -pedantic -fdiagnostics-color=always
• CXX14FLAGS: -Wall -pedantic -fdiagnostics-color=always
• CXX17FLAGS: -Wall -pedantic -fdiagnostics-color=always
• CXX20FLAGS: -Wall -pedantic -fdiagnostics-color=always
✔  checking for file ‘/home/georgi/repos/rmetrics/pkg/timeDate/DESCRIPTION’
─  preparing ‘timeDate’:
✔  checking DESCRIPTION meta-information
─  checking for LF line-endings in source and make files and shell scripts
─  checking for empty or unneeded directories
   Removed empty directory ‘timeDate/docs’
   Removed empty directory ‘timeDate/revdep’
   Removed empty directory ‘timeDate/work’
─  looking to see if a ‘data/datalist’ file should be added
─  building ‘timeDate_4021.107.tar.gz’
   
══ Checking ═══════════════════════════════════════════════════════════════════════════════════
Setting env vars:
• _R_CHECK_CRAN_INCOMING_USE_ASPELL_           : TRUE
• _R_CHECK_CRAN_INCOMING_REMOTE_               : FALSE
• _R_CHECK_CRAN_INCOMING_                      : FALSE
• _R_CHECK_FORCE_SUGGESTS_                     : FALSE
• _R_CHECK_PACKAGES_USED_IGNORE_UNUSED_IMPORTS_: FALSE
• NOT_CRAN                                     : true
── R CMD check ────────────────────────────────────────────────────────────────────────────────
─  using log directory ‘/tmp/RtmpLyvWJc/filee9b5253e4e33/timeDate.Rcheck’
─  using R version 4.2.2 Patched (2022-11-10 r83330)
─  using platform: x86_64-pc-linux-gnu (64-bit)
─  using session charset: UTF-8
─  using options ‘--no-manual --as-cran’
✔  checking for file ‘timeDate/DESCRIPTION’
─  this is package ‘timeDate’ version ‘4021.107’
✔  checking package namespace information
✔  checking package dependencies (821ms)
✔  checking if this is a source package
✔  checking if there is a namespace
✔  checking for executable files (438ms)
✔  checking for hidden files and directories
✔  checking for portable file names
✔  checking for sufficient/correct file permissions
✔  checking whether package ‘timeDate’ can be installed (9.8s)
✔  checking installed package size
✔  checking package directory
✔  checking for future file timestamps
✔  checking DESCRIPTION meta-information
✔  checking top-level files
✔  checking for left-over files
✔  checking index information
✔  checking package subdirectories
✔  checking R files for non-ASCII characters
✔  checking R files for syntax errors
✔  checking whether the package can be loaded
✔  checking whether the package can be loaded with stated dependencies
✔  checking whether the package can be unloaded cleanly
✔  checking whether the namespace can be loaded with stated dependencies
✔  checking whether the namespace can be unloaded cleanly
✔  checking loading without being on the library search path
✔  checking dependencies in R code (1s)
✔  checking S3 generic/method consistency (707ms)
✔  checking replacement functions
✔  checking foreign function calls (1.1s)
─  checking R code for possible problems ... [15s/15s] OK (14.8s)
✔  checking Rd files (408ms)
✔  checking Rd metadata
✔  checking Rd line widths
✔  checking Rd cross-references
✔  checking for missing documentation entries
✔  checking for code/documentation mismatches (886ms)
✔  checking Rd \usage sections (1s)
✔  checking Rd contents
✔  checking for unstated dependencies in examples
✔  checking R/sysdata.rda
✔  checking line endings in Makefiles
✔  checking for GNU extensions in Makefiles
✔  checking include directives in Makefiles
✔  checking examples (2s)
✔  checking for unstated dependencies in ‘tests’
─  checking tests
─  Running ‘doRUnit.R’ (1.2s)
E  Some test files failed
   Running the tests in ‘tests/doRUnit.R’ failed.
   Last 13 lines of output:
     
      
     1 Test Suite : 
     timeDate unit testing - 57 test functions, 0 errors, 2 failures
     FAILURE in test.dst1.print: Error in checkIdentical(tseq3Test, format(tseq3)) : FALSE 
      
     FAILURE in test.seq.Zurich: Error in checkIdentical(format(seq(iso1, by = "min", length.out = 24 *  : 
       FALSE 
      
     Error in eval(ei, envir) : 
     
     unit testing failed (#test failures: 2, R errors: 0)
     
     Calls: source -> withVisible -> eval -> eval
     Execution halted
✔  checking for non-standard things in the check directory
✔  checking for detritus in the temp directory
   
   See
     ‘/tmp/RtmpLyvWJc/filee9b5253e4e33/timeDate.Rcheck/00check.log’
   for details.
   
   
── R CMD check results ───────────────────────────────────────────────── timeDate 4021.107 ────
Duration: 37.9s

❯ checking tests ...
  See below...

── Test failures ───────────────────────────────────────────────────────────────── doRUnit ────

> #### doRUnit.R --- Run RUnit tests
> ####------------------------------------------------------------------------
> 
> ### Origianlly follows Gregor Gojanc's example in CRAN package  'gdata'
> ### and the corresponding section in the R Wiki:
> ###  http://wiki.r-project.org/rwiki/doku.php?id=developers:runit
> 
> ### MM: Vastly changed:  This should also be "runnable" for *installed*
> ##              package which has no ./tests/
> ## ----> put the bulk of the code e.g. in  ../inst/unitTests/runTests.R :
> 
> if(require("RUnit", quietly = TRUE)) {
+ 
+   ## --- Setup ---
+ 
+   wd <- getwd()
+   pkg <- sub("\\.Rcheck$", '', basename(dirname(wd)))
+ 
+   library(package=pkg, character.only=TRUE)
+ 
+   path <- system.file("unitTests", package = pkg)
+ 
+   stopifnot(file.exists(path), file.info(path.expand(path))$isdir)
+ 
+   source(file.path(path, "runTests.R"), echo = TRUE)
+ }

> pkg <- "timeDate"

> if (require("RUnit", quietly = TRUE)) {
+     library(package = pkg, character.only = TRUE)
+     if (!(exists("path") && file.exists(path))) 
+     .... [TRUNCATED] 


Executing test function test.POSIX  ...  [1] "2006-01-01 GMT" "2006-02-01 GMT" "2006-03-01 GMT" "2006-04-01 GMT"
 [5] "2006-05-01 GMT" "2006-06-01 GMT" "2006-07-01 GMT" "2006-08-01 GMT"
 [9] "2006-09-01 GMT" "2006-10-01 GMT" "2006-11-01 GMT" "2006-12-01 GMT"
[1] "POSIXct" "POSIXt" 
GMT
 [1] [2006-01-01] [2006-02-01] [2006-03-01] [2006-04-01] [2006-05-01]
 [6] [2006-06-01] [2006-07-01] [2006-08-01] [2006-09-01] [2006-10-01]
[11] [2006-11-01] [2006-12-01]
 [1] "2006-01-01" "2006-02-01" "2006-03-01" "2006-04-01" "2006-05-01"
 [6] "2006-06-01" "2006-07-01" "2006-08-01" "2006-09-01" "2006-10-01"
[11] "2006-11-01" "2006-12-01"
GMT
 [1] [2006-01-01] [2006-02-01] [2006-03-01] [2006-04-01] [2006-05-01]
 [6] [2006-06-01] [2006-07-01] [2006-08-01] [2006-09-01] [2006-10-01]
[11] [2006-11-01] [2006-12-01]
 [1] "2006-01-01" "2006-02-01" "2006-03-01" "2006-04-01" "2006-05-01"
 [6] "2006-06-01" "2006-07-01" "2006-08-01" "2006-09-01" "2006-10-01"
[11] "2006-11-01" "2006-12-01"
NewYork
 [1] [2006-01-01] [2006-02-01] [2006-03-01] [2006-04-01] [2006-05-01]
 [6] [2006-06-01] [2006-07-01] [2006-08-01] [2006-09-01] [2006-10-01]
[11] [2006-11-01] [2006-12-01]
 [1] "2006-01-01" "2006-02-01" "2006-03-01" "2006-04-01" "2006-05-01"
 [6] "2006-06-01" "2006-07-01" "2006-08-01" "2006-09-01" "2006-10-01"
[11] "2006-11-01" "2006-12-01"
NewYork
 [1] [2005-12-31 19:00:00] [2006-01-31 19:00:00] [2006-02-28 19:00:00]
 [4] [2006-03-31 19:00:00] [2006-04-30 20:00:00] [2006-05-31 20:00:00]
 [7] [2006-06-30 20:00:00] [2006-07-31 20:00:00] [2006-08-31 20:00:00]
[10] [2006-09-30 20:00:00] [2006-10-31 19:00:00] [2006-11-30 19:00:00]
 [1] "2005-12-31 19:00:00" "2006-01-31 19:00:00" "2006-02-28 19:00:00"
 [4] "2006-03-31 19:00:00" "2006-04-30 20:00:00" "2006-05-31 20:00:00"
 [7] "2006-06-30 20:00:00" "2006-07-31 20:00:00" "2006-08-31 20:00:00"
[10] "2006-09-30 20:00:00" "2006-10-31 19:00:00" "2006-11-30 19:00:00"
 done successfully.



Executing test function test.asDate  ... GMT
[1] [2006-06-01] [2006-12-01]
[1] "2006-06-01" "2006-12-01"
NewYork
[1] [2006-06-01] [2006-12-01]
[1] "2006-06-01" "2006-12-01"
 done successfully.



Executing test function test.asTimeDate  ... GMT
[1] [2006-06-01 10:00:00] [2006-12-01 10:00:00]
[1] "2006-06-01 10:00:00" "2006-12-01 10:00:00"
NewYork
[1] [2006-06-01 10:00:00] [2006-12-01 10:00:00]
[1] "2006-06-01 10:00:00" "2006-12-01 10:00:00"
NewYork
[1] [2006-06-01 06:00:00] [2006-12-01 05:00:00]
[1] "2006-06-01 06:00:00" "2006-12-01 05:00:00"
 done successfully.



Executing test function test.displayMethods  ... myFinCenter 
  "NewYork" 
NewYork
 [1] [2022-01-01] [2022-02-01] [2022-03-01] [2022-04-01] [2022-05-01]
 [6] [2022-06-01] [2022-07-01] [2022-08-01] [2022-09-01] [2022-10-01]
[11] [2022-11-01] [2022-12-01]
Object:        DT
Start Record:  2006-01-01
End Record:    2006-12-01
Observations:  12
Format:        %Y-%m-%d
FinCenter:     NewYork
[1] "2006-07-01"
 done successfully.



Executing test function test.midnightStandard  ... [1] "2001-01-01 00:00:00" "2007-01-31 00:00:00"
[1] "2001-01-01 16:00:00"
[1] "2001-02-01 00:00:00" "2001-01-31 23:10:20"
[1] "2001-02-01 00:00:00 GMT" "2001-01-31 23:10:20 GMT"
[1] "2010-01-01 GMT" "2010-10-10 GMT"
[1] "2001-02-01 00:00:00" "2001-01-31 23:10:00" "2006-01-01 00:00:00"
[1] "2001-01-31 00:00:00"
 done successfully.



Executing test function test.sysTimeDate  ... Zurich
[1] [2022-11-24 23:06:25]
GMT
[1] [2022-11-24 22:06:25]
NewYork
[1] [2022-11-24 17:06:25]
[1] "timeDate"
attr(,"package")
[1] "timeDate"
[1] "Date"
 done successfully.



Executing test function test.timeCalendar  ...  done successfully.



Executing test function test.timeDate  ... myFinCenter 
      "GMT" 
[1] "2006-01-10" "2006-01-20" "2006-01-30"
GMT
[1] [2006-01-10] [2006-01-20] [2006-01-30]
GMT
[1] [2006-01-10 10:00:00] [2006-01-20 10:00:00] [2006-01-30 10:00:00]
[1] "2006-01-10 10:00" "2006-01-20 10:00" "2006-01-30 10:00"
GMT
[1] [2006-01-10 10:00:00] [2006-01-20 10:00:00] [2006-01-30 10:00:00]
GMT
[1] [2001-01-01]
GMT
[1] [2001-01-01]
GMT
[1] [2001-01-01]
GMT
[1] [2001-01-01 16:00:00]
GMT
[1] [2001-01-01 16:00:00]
GMT
[1] [2001-01-01]
GMT
[1] [2001-01-01]
GMT
[1] [2001-01-01]
GMT
[1] [2001-01-01 16:00:00]
GMT
[1] [2001-01-01 16:00:00]
GMT
[1] [2001-01-01 00:00:00] [2001-01-01 16:00:00]
GMT
[1] [2001-01-01 00:00:00] [2001-01-01 16:00:00]
Zurich
[1] [2001-01-01 01:00:00]
Zurich
[1] [2001-01-01 01:00:00]
Zurich
[1] [2001-01-01 01:00:00]
Zurich
[1] [2001-01-01 17:00:00]
Zurich
[1] [2001-01-01 17:00:00]
Zurich
[1] [2001-01-01 01:00:00] [2001-01-01 17:00:00]
Zurich
[1] [2001-01-01 01:00:00] [2001-01-01 17:00:00]
GMT
[1] [2006-03-01] [2006-06-01] [2006-09-01] [2006-12-01]
GMT
[1] [2006-12-15]
 done successfully.



Executing test function test.timeSequence  ...  done successfully.



Executing test function test.whichFormat  ... [1] "%Y%m%d"
[1] "%Y%m%d%H%M"
[1] "%Y%m%d%H%M%S"
[1] "%Y%m%d%H%M"
[1] "%Y%m%d%H%M%S"
[1] "%Y-%m-%d"
[1] "%Y-%m-%d %H:%M"
[1] "%Y-%m-%d %H:%M:%S"
[1] "%Y-%m-%d %H:%M"
[1] "%Y-%m-%d %H:%M:%S"
[1] "%m/%d/%Y"
[1] "%d-%b-%Y"
 done successfully.



Executing test function test.as  ...  done successfully.



Executing test function test.asTimeDate  ...  done successfully.



Executing test function test.atoms  ...  done successfully.



Executing test function test.julian  ...  done successfully.



Executing test function test.months  ...  done successfully.



Executing test function test.dst1.print  ... Timing stopped at: 0.009 0 0.009
Error in checkIdentical(tseq3Test, format(tseq3)) : FALSE 
 
In addition: Warning messages:
1: In RNGkind(kind = testSuite$rngKind, normal.kind = testSuite$rngNormalKind) :
  RNGkind: Marsaglia-Multicarry has poor statistical properties
2: In RNGkind(kind = testSuite$rngKind, normal.kind = testSuite$rngNormalKind) :
  RNGkind: severe deviations from normality for Kinderman-Ramage + Marsaglia-Multicarry
3: In RNGkind(kind = testSuite$rngKind, normal.kind = testSuite$rngNormalKind) :
  RNGkind: Marsaglia-Multicarry has poor statistical properties
4: In RNGkind(kind = testSuite$rngKind, normal.kind = testSuite$rngNormalKind) :
  RNGkind: severe deviations from normality for Kinderman-Ramage + Marsaglia-Multicarry
5: In RNGkind(kind = testSuite$rngKind, normal.kind = testSuite$rngNormalKind) :
  RNGkind: Marsaglia-Multicarry has poor statistical properties
6: In RNGkind(kind = testSuite$rngKind, normal.kind = testSuite$rngNormalKind) :
  RNGkind: severe deviations from normality for Kinderman-Ramage + Marsaglia-Multicarry
7: In RNGkind(kind = testSuite$rngKind, normal.kind = testSuite$rngNormalKind) :
  RNGkind: Marsaglia-Multicarry has poor statistical properties
8: In RNGkind(kind = testSuite$rngKind, normal.kind = testSuite$rngNormalKind) :
  RNGkind: severe deviations from normality for Kinderman-Ramage + Marsaglia-Multicarry
 done successfully.



Executing test function test.dst2.print  ...  done successfully.



Executing test function test.zurich  ...  done successfully.



Executing test function test.listFinCenter  ...  done successfully.



Executing test function test.myFinCenter  ...  done successfully.



Executing test function test.rulesFinCenter  ...  done successfully.



Executing test function test.holiday  ...  done successfully.



Executing test function test.holidayLONDON  ... Europe/London
 [1] [2022-01-03] [2022-04-15] [2022-04-18] [2022-05-02] [2022-06-02]
 [6] [2022-06-03] [2022-08-29] [2022-09-19] [2022-12-26] [2022-12-27]
 done successfully.



Executing test function test.holidayNERC  ... Eastern
[1] [2022-01-01] [2022-05-30] [2022-07-04] [2022-09-05] [2022-11-24]
[6] [2022-12-26]
Eastern
[1] [2022-01-01] [2022-05-30] [2022-07-04] [2022-09-05] [2022-11-24]
[6] [2022-12-26]
 done successfully.



Executing test function test.holidayNYSE  ... NewYork
[1] [2022-01-17] [2022-02-21] [2022-04-15] [2022-05-30] [2022-06-20]
[6] [2022-07-04] [2022-09-05] [2022-11-24] [2022-12-26]
NewYork
[1] [2022-01-17] [2022-02-21] [2022-04-15] [2022-05-30] [2022-06-20]
[6] [2022-07-04] [2022-09-05] [2022-11-24] [2022-12-26]
 done successfully.



Executing test function test.holidayZURICH  ...  done successfully.



Executing test function test.easter  ...  done successfully.



Executing test function test.holiday  ... 2022-11-27 Advent1st 
2022-12-04 Advent2nd 
2022-12-11 Advent3rd 
2022-12-18 Advent4th 
2022-11-01 AllSaints 
2022-11-02 AllSouls 
2022-03-25 Annunciation 
2022-05-26 Ascension 
2022-03-02 AshWednesday 
2022-08-15 AssumptionOfMary 
2022-09-08 BirthOfVirginMary 
2022-12-26 BoxingDay 
2022-07-01 CACanadaDay 
2022-08-01 CACivicProvincialHoliday 
2022-09-05 CALabourDay 
2022-10-10 CAThanksgivingDay 
2022-05-23 CAVictoriaDay 
2022-05-26 CHAscension 
2022-01-02 CHBerchtoldsDay 
2022-08-01 CHConfederationDay 
2022-09-12 CHKnabenschiessen 
2022-04-18 CHSechselaeuten 
2022-11-11 CaRemembranceDay 
2022-09-14 CelebrationOfHolyCross 
2022-11-20 ChristTheKing 
2022-12-25 ChristmasDay 
2022-12-24 ChristmasEve 
2022-06-16 CorpusChristi 
2022-05-26 DEAscension 
2022-12-24 DEChristmasEve 
2022-06-16 DECorpusChristi 
2022-10-03 DEGermanUnity 
2022-12-31 DENewYearsEve 
2022-04-17 Easter 
2022-04-18 EasterMonday 
2022-04-17 EasterSunday 
2022-01-06 Epiphany 
2022-11-01 FRAllSaints 
2022-11-11 FRArmisticeDay 
2022-05-26 FRAscension 
2022-08-15 FRAssumptionVirginMary 
2022-07-14 FRBastilleDay 
2022-05-08 FRFetDeLaVictoire1945 
2022-05-02 GBEarlyMayBankHoliday 
1999-12-31 GBMilleniumDay 
2022-06-02 GBSpringBankHoliday 
2022-08-29 GBSummerBankHoliday 
2022-04-15 GoodFriday 
2022-11-01 ITAllSaints 
2022-08-15 ITAssumptionOfVirginMary 
2022-01-06 ITEpiphany 
2022-12-08 ITImmaculateConception 
2022-04-25 ITLiberationDay 
2022-12-07 ITStAmrose 
2022-09-24 JPAutumnalEquinox 
2022-12-31 JPBankHolidayDec31 
2022-01-02 JPBankHolidayJan2 
2022-01-03 JPBankHolidayJan3 
2022-11-03 JPBunkaNoHi 
2022-05-05 JPChildrensDay 
2022-01-15 JPComingOfAgeDay 
2022-05-03 JPConstitutionDay 
2022-11-23 JPEmperorsBirthday 
2022-01-01 JPGantan 
2022-04-29 JPGreeneryDay 
2022-10-10 JPHealthandSportsDay 
2022-09-15 JPKeirouNOhi 
2022-02-11 JPKenkokuKinenNoHi 
2022-05-03 JPKenpouKinenBi 
2022-11-23 JPKinrouKanshaNoHi 
2022-05-05 JPKodomoNoHi 
2022-05-04 JPKokuminNoKyujitu 
2022-07-20 JPMarineDay 
2022-04-29 JPMidoriNoHi 
2022-02-11 JPNatFoundationDay 
2022-05-04 JPNationHoliday 
2022-11-03 JPNationalCultureDay 
2022-01-01 JPNewYearsDay 
2022-09-15 JPRespectForTheAgedDay 
2022-01-15 JPSeijinNoHi 
2022-09-24 JPShuubunNoHi 
2022-10-10 JPTaiikuNoHi 
2022-11-23 JPTennouTanjyouBi 
2022-11-23 JPThanksgivingDay 
2022-07-20 JPUmiNoHi 
2022-05-01 LaborDay 
2022-09-29 MassOfArchangels 
2022-01-01 NewYearsDay 
2022-04-10 PalmSunday 
2022-06-05 Pentecost 
2022-06-06 PentecostMonday 
2022-02-02 PresentationOfLord 
2022-02-27 Quinquagesima 
2022-05-22 RogationSunday 
2022-02-13 Septuagesima 
2022-01-01 SolemnityOfMary 
2022-08-06 TransfigurationOfLord 
2022-06-12 TrinitySunday 
2022-03-07 USCPulaskisBirthday 
2022-12-25 USChristmasDay 
2022-10-10 USColumbusDay 
2022-05-30 USDecorationMemorialDay 
2022-11-08 USElectionDay 
2022-04-15 USGoodFriday 
2022-01-20 USInaugurationDay 
2022-07-04 USIndependenceDay 
2022-06-19 USJuneteenthNationalIndependenceDay 
2022-09-05 USLaborDay 
2022-02-12 USLincolnsBirthday 
2022-01-17 USMLKingsBirthday 
2022-05-30 USMemorialDay 
2022-01-01 USNewYearsDay 
2022-02-21 USPresidentsDay 
2022-11-24 USThanksgivingDay 
2022-11-11 USVeteransDay 
2022-02-22 USWashingtonsBirthday 
 done successfully.



Executing test function test.listHolidays  ...  done successfully.



Executing test function test.timeDateMathOps  ...  done successfully.



Executing test function test.timeDateOrdering  ... Formal class 'timeDate' [package "timeDate"] with 3 slots
  ..@ Data     : POSIXct[1:12], format: "2007-01-01 15:00:00" "2007-02-01 15:00:00" ...
  ..@ format   : chr "%Y-%m-%d %H:%M:%S"
  ..@ FinCenter: chr "NewYork"
Formal class 'timeDate' [package "timeDate"] with 3 slots
  ..@ Data     : POSIXct[1:12], format: "2007-01-01 15:00:00" "2007-02-01 15:00:00" ...
  ..@ format   : chr "%Y-%m-%d %H:%M:%S"
  ..@ FinCenter: chr "Zurich"
GMT
 [1] [2022-02-01] [2022-03-01] [2022-07-01] [2022-09-01] [2022-01-01]
 [6] [2022-05-01] [2022-10-01] [2022-11-01] [2022-12-01] [2022-06-01]
[11] [2022-04-01] [2022-08-01]
GMT
[1] [2022-11-24] [2022-11-23] [2022-11-22] [2022-11-21] [2022-11-20]
[6] [2022-11-19]
 done successfully.



Executing test function test.timeFirstDayInMonth  ...  done successfully.



Executing test function test.timeFirstDayInQuarter  ...  done successfully.



Executing test function test.timeLastDayInMonth  ...  done successfully.



Executing test function test.timeLastDayInQuarter  ...  done successfully.



Executing test function test.timeLastNdayInMonth  ...  done successfully.



Executing test function test.timeNdayOnOrAfter  ...  done successfully.



Executing test function test.timeNdayOnOrBefore  ...  done successfully.



Executing test function test.timeNthNdayInMonth  ...  done successfully.



Executing test function test.Easter  ... Zurich
[1] [2006-04-09] [2006-04-10] [2006-04-11] [2006-04-12] [2006-04-13]
[6] [2006-04-14] [2006-04-15] [2006-04-16]
Zurich
[1] [2006-04-09] [2006-04-10] [2006-04-11] [2006-04-12] [2006-04-13]
[6] [2006-04-14] [2006-04-15] [2006-04-16]
 done successfully.



Executing test function test.blockStart  ...  done successfully.



Executing test function test.cut  ... GMT
[1] [2006-04-14]
GMT
[1] [2006-04-17]
GMT
[1] [2006-04-14] [2006-04-15] [2006-04-16]
GMT
[1] [2006-04-14] [2006-04-15] [2006-04-16]
 done successfully.



Executing test function test.dayOfWeek  ...  done successfully.



Executing test function test.holidayNYSE  ...  done successfully.



Executing test function test.isBizday  ...  done successfully.



Executing test function test.isHoliday  ...  done successfully.



Executing test function test.isWeekday  ...  done successfully.



Executing test function test.isWeekend  ...  done successfully.



Executing test function test.start  ... GMT
[1] [2022-01-01]
GMT
[1] [2022-12-01]
 done successfully.



Executing test function test.subset  ...  done successfully.



Executing test function test.AAA  ... [1] "Pacific/Auckland"
 done successfully.



Executing test function test.dayOfWeek  ...  done successfully.



Executing test function test.dayOfYear  ...  done successfully.



Executing test function test.isWeekday  ...  done successfully.



Executing test function test.isWeekend  ...  done successfully.



Executing test function test.seq.GMT  ...  done successfully.



Executing test function test.seq.Zurich  ... Timing stopped at: 0.002 0.004 0.006
Error in checkIdentical(format(seq(iso1, by = "min", length.out = 24 *  : 
  FALSE 
 
In addition: There were 24 warnings (use warnings() to see them)
 done successfully.

RUNIT TEST PROTOCOL -- Fri Nov 25 11:06:26 2022 
*********************************************** 
Number of test functions: 57 
Number of errors: 0 
Number of failures: 2 

 
1 Test Suite : 
timeDate unit testing - 57 test functions, 0 errors, 2 failures
FAILURE in test.dst1.print: Error in checkIdentical(tseq3Test, format(tseq3)) : FALSE 
 
FAILURE in test.seq.Zurich: Error in checkIdentical(format(seq(iso1, by = "min", length.out = 24 *  : 
  FALSE 
 
Error in eval(ei, envir) : 

unit testing failed (#test failures: 2, R errors: 0)

Calls: source -> withVisible -> eval -> eval
Execution halted

1 error ✖ | 0 warnings ✔ | 0 notes ✔
> tseq2Test <- c(
+         ## GNB: there is no "2008-03-30 01:00:00" in FinCenter "Zurich".
+         ##      was: "2008-03-30 01:00:00", "2008-03-30 03:00:00",
+                    "2008-03-30 02:00:00", "2008-03-30 03:00:00",
+                    "2008-03-30 04:00:00", "2008-03-30 05:00:00",
+                    "2008-03-30 06:00:00", "2008-03-30 07:00:00",
+                    "2008-03-30 08:00:00", "2008-03-30 09:00:00",
+                    "2008-03-30 10:00:00", "2008-03-30 11:00:00",
+                    "2008-03-30 12:00:00", "2008-03-30 13:00:00",
+                    "2008-03-30 14:00:00", "2008-03-30 15:00:00",
+                    "2008-03-30 16:00:00", "2008-03-30 17:00:00",
+                    "2008-03-30 18:00:00", "2008-03-30 19:00:00",
+                    "2008-03-30 20:00:00", "2008-03-30 21:00:00",
+                    "2008-03-30 22:00:00", "2008-03-30 23:00:00",
+                    "2008-03-31 00:00:00", "2008-03-31 01:00:00",
+                    "2008-03-31 02:00:00")
> 
>     checkIdentical(tseq2Test, format(tseq2))
[1] TRUE
> checkIdentical(tseq1@Data, tseq2@Data)
[1] TRUE
> 
> 
>     
> tseq3Test <- c(
+                    "2008-03-30 00:00:00", "2008-03-30 01:00:00",
+                    "2008-03-30 03:00:00", "2008-03-30 04:00:00",
+                    "2008-03-30 05:00:00", "2008-03-30 06:00:00",
+                    "2008-03-30 07:00:00", "2008-03-30 08:00:00",
+                    "2008-03-30 09:00:00", "2008-03-30 10:00:00",
+                    "2008-03-30 11:00:00", "2008-03-30 12:00:00",
+                    "2008-03-30 13:00:00", "2008-03-30 14:00:00",
+                    "2008-03-30 15:00:00", "2008-03-30 16:00:00",
+                    "2008-03-30 17:00:00", "2008-03-30 18:00:00",
+                    "2008-03-30 19:00:00", "2008-03-30 20:00:00",
+                    "2008-03-30 21:00:00", "2008-03-30 22:00:00",
+                    "2008-03-30 23:00:00", "2008-03-31 00:00:00")
> 
>     checkIdentical(tseq3Test, format(tseq3))
Error in format(tseq3) : object 'tseq3' not found

Enter a frame number, or 0 to exit   

1: checkIdentical(tseq3Test, format(tseq3))
2: format(tseq3)

Selection: 0
> all.equal(tseq3Test, format(tseq3))
Error in format(tseq3) : object 'tseq3' not found

Enter a frame number, or 0 to exit   

1: all.equal(tseq3Test, format(tseq3))
2: all.equal.character(tseq3Test, format(tseq3))
3: attr.all.equal(target, current, ...)
4: mode(current)
5: format(tseq3)

Selection: 0
> 
> tseq3 <- timeSequence( from = from, to = to,
+                           by = "hour", zone = "Zurich", FinCenter = "Zurich")
>     tseq3
Zurich
 [1] [2008-03-30 00:00:00] [2008-03-30 02:00:00] [2008-03-30 03:00:00]
 [4] [2008-03-30 04:00:00] [2008-03-30 05:00:00] [2008-03-30 06:00:00]
 [7] [2008-03-30 07:00:00] [2008-03-30 08:00:00] [2008-03-30 09:00:00]
[10] [2008-03-30 10:00:00] [2008-03-30 11:00:00] [2008-03-30 12:00:00]
[13] [2008-03-30 13:00:00] [2008-03-30 14:00:00] [2008-03-30 15:00:00]
[16] [2008-03-30 16:00:00] [2008-03-30 17:00:00] [2008-03-30 18:00:00]
[19] [2008-03-30 19:00:00] [2008-03-30 20:00:00] [2008-03-30 21:00:00]
[22] [2008-03-30 22:00:00] [2008-03-30 23:00:00] [2008-03-31 00:00:00]
> all.equal(tseq3Test, format(tseq3))
[1] "1 string mismatch"
> (tseq3Test == format(tseq3))
 [1]  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[13]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
> tseq3Test[2]
[1] "2008-03-30 01:00:00"
> format(tseq3)[2]
[1] "2008-03-30 02:00:00"
> devtools::check()
══ Building ═══════════════════════════════════════════════════════════════════════════════════
Setting env vars:
• CFLAGS    : -Wall -pedantic -fdiagnostics-color=always
• CXXFLAGS  : -Wall -pedantic -fdiagnostics-color=always
• CXX11FLAGS: -Wall -pedantic -fdiagnostics-color=always
• CXX14FLAGS: -Wall -pedantic -fdiagnostics-color=always
• CXX17FLAGS: -Wall -pedantic -fdiagnostics-color=always
• CXX20FLAGS: -Wall -pedantic -fdiagnostics-color=always
✔  checking for file ‘/home/georgi/repos/rmetrics/pkg/timeDate/DESCRIPTION’
─  preparing ‘timeDate’:
✔  checking DESCRIPTION meta-information
─  checking for LF line-endings in source and make files and shell scripts
─  checking for empty or unneeded directories
   Removed empty directory ‘timeDate/docs’
   Removed empty directory ‘timeDate/revdep’
   Removed empty directory ‘timeDate/work’
─  looking to see if a ‘data/datalist’ file should be added
─  building ‘timeDate_4021.107.tar.gz’
   
══ Checking ═══════════════════════════════════════════════════════════════════════════════════
Setting env vars:
• _R_CHECK_CRAN_INCOMING_USE_ASPELL_           : TRUE
• _R_CHECK_CRAN_INCOMING_REMOTE_               : FALSE
• _R_CHECK_CRAN_INCOMING_                      : FALSE
• _R_CHECK_FORCE_SUGGESTS_                     : FALSE
• _R_CHECK_PACKAGES_USED_IGNORE_UNUSED_IMPORTS_: FALSE
• NOT_CRAN                                     : true
── R CMD check ────────────────────────────────────────────────────────────────────────────────
─  using log directory ‘/tmp/RtmpLyvWJc/filee9b5414a975c/timeDate.Rcheck’
─  using R version 4.2.2 Patched (2022-11-10 r83330)
─  using platform: x86_64-pc-linux-gnu (64-bit)
─  using session charset: UTF-8
─  using options ‘--no-manual --as-cran’
✔  checking for file ‘timeDate/DESCRIPTION’
─  this is package ‘timeDate’ version ‘4021.107’
✔  checking package namespace information
✔  checking package dependencies (789ms)
✔  checking if this is a source package
✔  checking if there is a namespace
✔  checking for executable files (434ms)
✔  checking for hidden files and directories
✔  checking for portable file names
✔  checking for sufficient/correct file permissions
✔  checking whether package ‘timeDate’ can be installed (9.1s)
✔  checking installed package size
✔  checking package directory
✔  checking for future file timestamps (405ms)
✔  checking DESCRIPTION meta-information
✔  checking top-level files
✔  checking for left-over files
✔  checking index information
✔  checking package subdirectories
✔  checking R files for non-ASCII characters
✔  checking R files for syntax errors
✔  checking whether the package can be loaded
✔  checking whether the package can be loaded with stated dependencies
✔  checking whether the package can be unloaded cleanly
✔  checking whether the namespace can be loaded with stated dependencies
✔  checking whether the namespace can be unloaded cleanly
✔  checking loading without being on the library search path
✔  checking dependencies in R code (1s)
✔  checking S3 generic/method consistency (706ms)
✔  checking replacement functions
✔  checking foreign function calls (1.2s)
─  checking R code for possible problems ... [15s/15s] OK (14.9s)
✔  checking Rd files (393ms)
✔  checking Rd metadata
✔  checking Rd line widths
✔  checking Rd cross-references
✔  checking for missing documentation entries
✔  checking for code/documentation mismatches (871ms)
✔  checking Rd \usage sections (995ms)
✔  checking Rd contents
✔  checking for unstated dependencies in examples
✔  checking R/sysdata.rda
✔  checking line endings in Makefiles
✔  checking for GNU extensions in Makefiles
✔  checking include directives in Makefiles
✔  checking examples (2s)
✔  checking for unstated dependencies in ‘tests’
─  checking tests
─  Running ‘doRUnit.R’ (1.2s)
E  Some test files failed
   Running the tests in ‘tests/doRUnit.R’ failed.
   Last 13 lines of output:
     Number of errors: 0 
     Number of failures: 1 
     
      
     1 Test Suite : 
     timeDate unit testing - 57 test functions, 0 errors, 1 failure
     FAILURE in test.seq.Zurich: Error in checkIdentical(format(seq(iso1, by = "min", length.out = 24 *  : 
       FALSE 
      
     Error in eval(ei, envir) : 
     
     unit testing failed (#test failures: 1, R errors: 0)
     
     Calls: source -> withVisible -> eval -> eval
     Execution halted
✔  checking for non-standard things in the check directory
✔  checking for detritus in the temp directory
   
   See
     ‘/tmp/RtmpLyvWJc/filee9b5414a975c/timeDate.Rcheck/00check.log’
   for details.
   
   
── R CMD check results ───────────────────────────────────────────────── timeDate 4021.107 ────
Duration: 37.5s

❯ checking tests ...
  See below...

── Test failures ───────────────────────────────────────────────────────────────── doRUnit ────

> #### doRUnit.R --- Run RUnit tests
> ####------------------------------------------------------------------------
> 
> ### Origianlly follows Gregor Gojanc's example in CRAN package  'gdata'
> ### and the corresponding section in the R Wiki:
> ###  http://wiki.r-project.org/rwiki/doku.php?id=developers:runit
> 
> ### MM: Vastly changed:  This should also be "runnable" for *installed*
> ##              package which has no ./tests/
> ## ----> put the bulk of the code e.g. in  ../inst/unitTests/runTests.R :
> 
> if(require("RUnit", quietly = TRUE)) {
+ 
+   ## --- Setup ---
+ 
+   wd <- getwd()
+   pkg <- sub("\\.Rcheck$", '', basename(dirname(wd)))
+ 
+   library(package=pkg, character.only=TRUE)
+ 
+   path <- system.file("unitTests", package = pkg)
+ 
+   stopifnot(file.exists(path), file.info(path.expand(path))$isdir)
+ 
+   source(file.path(path, "runTests.R"), echo = TRUE)
+ }

> pkg <- "timeDate"

> if (require("RUnit", quietly = TRUE)) {
+     library(package = pkg, character.only = TRUE)
+     if (!(exists("path") && file.exists(path))) 
+     .... [TRUNCATED] 


Executing test function test.POSIX  ...  [1] "2006-01-01 GMT" "2006-02-01 GMT" "2006-03-01 GMT" "2006-04-01 GMT"
 [5] "2006-05-01 GMT" "2006-06-01 GMT" "2006-07-01 GMT" "2006-08-01 GMT"
 [9] "2006-09-01 GMT" "2006-10-01 GMT" "2006-11-01 GMT" "2006-12-01 GMT"
[1] "POSIXct" "POSIXt" 
GMT
 [1] [2006-01-01] [2006-02-01] [2006-03-01] [2006-04-01] [2006-05-01]
 [6] [2006-06-01] [2006-07-01] [2006-08-01] [2006-09-01] [2006-10-01]
[11] [2006-11-01] [2006-12-01]
 [1] "2006-01-01" "2006-02-01" "2006-03-01" "2006-04-01" "2006-05-01"
 [6] "2006-06-01" "2006-07-01" "2006-08-01" "2006-09-01" "2006-10-01"
[11] "2006-11-01" "2006-12-01"
GMT
 [1] [2006-01-01] [2006-02-01] [2006-03-01] [2006-04-01] [2006-05-01]
 [6] [2006-06-01] [2006-07-01] [2006-08-01] [2006-09-01] [2006-10-01]
[11] [2006-11-01] [2006-12-01]
 [1] "2006-01-01" "2006-02-01" "2006-03-01" "2006-04-01" "2006-05-01"
 [6] "2006-06-01" "2006-07-01" "2006-08-01" "2006-09-01" "2006-10-01"
[11] "2006-11-01" "2006-12-01"
NewYork
 [1] [2006-01-01] [2006-02-01] [2006-03-01] [2006-04-01] [2006-05-01]
 [6] [2006-06-01] [2006-07-01] [2006-08-01] [2006-09-01] [2006-10-01]
[11] [2006-11-01] [2006-12-01]
 [1] "2006-01-01" "2006-02-01" "2006-03-01" "2006-04-01" "2006-05-01"
 [6] "2006-06-01" "2006-07-01" "2006-08-01" "2006-09-01" "2006-10-01"
[11] "2006-11-01" "2006-12-01"
NewYork
 [1] [2005-12-31 19:00:00] [2006-01-31 19:00:00] [2006-02-28 19:00:00]
 [4] [2006-03-31 19:00:00] [2006-04-30 20:00:00] [2006-05-31 20:00:00]
 [7] [2006-06-30 20:00:00] [2006-07-31 20:00:00] [2006-08-31 20:00:00]
[10] [2006-09-30 20:00:00] [2006-10-31 19:00:00] [2006-11-30 19:00:00]
 [1] "2005-12-31 19:00:00" "2006-01-31 19:00:00" "2006-02-28 19:00:00"
 [4] "2006-03-31 19:00:00" "2006-04-30 20:00:00" "2006-05-31 20:00:00"
 [7] "2006-06-30 20:00:00" "2006-07-31 20:00:00" "2006-08-31 20:00:00"
[10] "2006-09-30 20:00:00" "2006-10-31 19:00:00" "2006-11-30 19:00:00"
 done successfully.



Executing test function test.asDate  ... GMT
[1] [2006-06-01] [2006-12-01]
[1] "2006-06-01" "2006-12-01"
NewYork
[1] [2006-06-01] [2006-12-01]
[1] "2006-06-01" "2006-12-01"
 done successfully.



Executing test function test.asTimeDate  ... GMT
[1] [2006-06-01 10:00:00] [2006-12-01 10:00:00]
[1] "2006-06-01 10:00:00" "2006-12-01 10:00:00"
NewYork
[1] [2006-06-01 10:00:00] [2006-12-01 10:00:00]
[1] "2006-06-01 10:00:00" "2006-12-01 10:00:00"
NewYork
[1] [2006-06-01 06:00:00] [2006-12-01 05:00:00]
[1] "2006-06-01 06:00:00" "2006-12-01 05:00:00"
 done successfully.



Executing test function test.displayMethods  ... myFinCenter 
  "NewYork" 
NewYork
 [1] [2022-01-01] [2022-02-01] [2022-03-01] [2022-04-01] [2022-05-01]
 [6] [2022-06-01] [2022-07-01] [2022-08-01] [2022-09-01] [2022-10-01]
[11] [2022-11-01] [2022-12-01]
Object:        DT
Start Record:  2006-01-01
End Record:    2006-12-01
Observations:  12
Format:        %Y-%m-%d
FinCenter:     NewYork
[1] "2006-07-01"
 done successfully.



Executing test function test.midnightStandard  ... [1] "2001-01-01 00:00:00" "2007-01-31 00:00:00"
[1] "2001-01-01 16:00:00"
[1] "2001-02-01 00:00:00" "2001-01-31 23:10:20"
[1] "2001-02-01 00:00:00 GMT" "2001-01-31 23:10:20 GMT"
[1] "2010-01-01 GMT" "2010-10-10 GMT"
[1] "2001-02-01 00:00:00" "2001-01-31 23:10:00" "2006-01-01 00:00:00"
[1] "2001-01-31 00:00:00"
 done successfully.



Executing test function test.sysTimeDate  ... Zurich
[1] [2022-11-24 23:11:11]
GMT
[1] [2022-11-24 22:11:11]
NewYork
[1] [2022-11-24 17:11:11]
[1] "timeDate"
attr(,"package")
[1] "timeDate"
[1] "Date"
 done successfully.



Executing test function test.timeCalendar  ...  done successfully.



Executing test function test.timeDate  ... myFinCenter 
      "GMT" 
[1] "2006-01-10" "2006-01-20" "2006-01-30"
GMT
[1] [2006-01-10] [2006-01-20] [2006-01-30]
GMT
[1] [2006-01-10 10:00:00] [2006-01-20 10:00:00] [2006-01-30 10:00:00]
[1] "2006-01-10 10:00" "2006-01-20 10:00" "2006-01-30 10:00"
GMT
[1] [2006-01-10 10:00:00] [2006-01-20 10:00:00] [2006-01-30 10:00:00]
GMT
[1] [2001-01-01]
GMT
[1] [2001-01-01]
GMT
[1] [2001-01-01]
GMT
[1] [2001-01-01 16:00:00]
GMT
[1] [2001-01-01 16:00:00]
GMT
[1] [2001-01-01]
GMT
[1] [2001-01-01]
GMT
[1] [2001-01-01]
GMT
[1] [2001-01-01 16:00:00]
GMT
[1] [2001-01-01 16:00:00]
GMT
[1] [2001-01-01 00:00:00] [2001-01-01 16:00:00]
GMT
[1] [2001-01-01 00:00:00] [2001-01-01 16:00:00]
Zurich
[1] [2001-01-01 01:00:00]
Zurich
[1] [2001-01-01 01:00:00]
Zurich
[1] [2001-01-01 01:00:00]
Zurich
[1] [2001-01-01 17:00:00]
Zurich
[1] [2001-01-01 17:00:00]
Zurich
[1] [2001-01-01 01:00:00] [2001-01-01 17:00:00]
Zurich
[1] [2001-01-01 01:00:00] [2001-01-01 17:00:00]
GMT
[1] [2006-03-01] [2006-06-01] [2006-09-01] [2006-12-01]
GMT
[1] [2006-12-15]
 done successfully.



Executing test function test.timeSequence  ...  done successfully.



Executing test function test.whichFormat  ... [1] "%Y%m%d"
[1] "%Y%m%d%H%M"
[1] "%Y%m%d%H%M%S"
[1] "%Y%m%d%H%M"
[1] "%Y%m%d%H%M%S"
[1] "%Y-%m-%d"
[1] "%Y-%m-%d %H:%M"
[1] "%Y-%m-%d %H:%M:%S"
[1] "%Y-%m-%d %H:%M"
[1] "%Y-%m-%d %H:%M:%S"
[1] "%m/%d/%Y"
[1] "%d-%b-%Y"
 done successfully.



Executing test function test.as  ...  done successfully.



Executing test function test.asTimeDate  ...  done successfully.



Executing test function test.atoms  ...  done successfully.



Executing test function test.julian  ...  done successfully.



Executing test function test.months  ...  done successfully.



Executing test function test.dst1.print  ...  done successfully.



Executing test function test.dst2.print  ...  done successfully.



Executing test function test.zurich  ...  done successfully.



Executing test function test.listFinCenter  ...  done successfully.



Executing test function test.myFinCenter  ...  done successfully.



Executing test function test.rulesFinCenter  ...  done successfully.



Executing test function test.holiday  ...  done successfully.



Executing test function test.holidayLONDON  ... Europe/London
 [1] [2022-01-03] [2022-04-15] [2022-04-18] [2022-05-02] [2022-06-02]
 [6] [2022-06-03] [2022-08-29] [2022-09-19] [2022-12-26] [2022-12-27]
 done successfully.



Executing test function test.holidayNERC  ... Eastern
[1] [2022-01-01] [2022-05-30] [2022-07-04] [2022-09-05] [2022-11-24]
[6] [2022-12-26]
Eastern
[1] [2022-01-01] [2022-05-30] [2022-07-04] [2022-09-05] [2022-11-24]
[6] [2022-12-26]
 done successfully.



Executing test function test.holidayNYSE  ... NewYork
[1] [2022-01-17] [2022-02-21] [2022-04-15] [2022-05-30] [2022-06-20]
[6] [2022-07-04] [2022-09-05] [2022-11-24] [2022-12-26]
NewYork
[1] [2022-01-17] [2022-02-21] [2022-04-15] [2022-05-30] [2022-06-20]
[6] [2022-07-04] [2022-09-05] [2022-11-24] [2022-12-26]
 done successfully.



Executing test function test.holidayZURICH  ...  done successfully.



Executing test function test.easter  ...  done successfully.



Executing test function test.holiday  ... 2022-11-27 Advent1st 
2022-12-04 Advent2nd 
2022-12-11 Advent3rd 
2022-12-18 Advent4th 
2022-11-01 AllSaints 
2022-11-02 AllSouls 
2022-03-25 Annunciation 
2022-05-26 Ascension 
2022-03-02 AshWednesday 
2022-08-15 AssumptionOfMary 
2022-09-08 BirthOfVirginMary 
2022-12-26 BoxingDay 
2022-07-01 CACanadaDay 
2022-08-01 CACivicProvincialHoliday 
2022-09-05 CALabourDay 
2022-10-10 CAThanksgivingDay 
2022-05-23 CAVictoriaDay 
2022-05-26 CHAscension 
2022-01-02 CHBerchtoldsDay 
2022-08-01 CHConfederationDay 
2022-09-12 CHKnabenschiessen 
2022-04-18 CHSechselaeuten 
2022-11-11 CaRemembranceDay 
2022-09-14 CelebrationOfHolyCross 
2022-11-20 ChristTheKing 
2022-12-25 ChristmasDay 
2022-12-24 ChristmasEve 
2022-06-16 CorpusChristi 
2022-05-26 DEAscension 
2022-12-24 DEChristmasEve 
2022-06-16 DECorpusChristi 
2022-10-03 DEGermanUnity 
2022-12-31 DENewYearsEve 
2022-04-17 Easter 
2022-04-18 EasterMonday 
2022-04-17 EasterSunday 
2022-01-06 Epiphany 
2022-11-01 FRAllSaints 
2022-11-11 FRArmisticeDay 
2022-05-26 FRAscension 
2022-08-15 FRAssumptionVirginMary 
2022-07-14 FRBastilleDay 
2022-05-08 FRFetDeLaVictoire1945 
2022-05-02 GBEarlyMayBankHoliday 
1999-12-31 GBMilleniumDay 
2022-06-02 GBSpringBankHoliday 
2022-08-29 GBSummerBankHoliday 
2022-04-15 GoodFriday 
2022-11-01 ITAllSaints 
2022-08-15 ITAssumptionOfVirginMary 
2022-01-06 ITEpiphany 
2022-12-08 ITImmaculateConception 
2022-04-25 ITLiberationDay 
2022-12-07 ITStAmrose 
2022-09-24 JPAutumnalEquinox 
2022-12-31 JPBankHolidayDec31 
2022-01-02 JPBankHolidayJan2 
2022-01-03 JPBankHolidayJan3 
2022-11-03 JPBunkaNoHi 
2022-05-05 JPChildrensDay 
2022-01-15 JPComingOfAgeDay 
2022-05-03 JPConstitutionDay 
2022-11-23 JPEmperorsBirthday 
2022-01-01 JPGantan 
2022-04-29 JPGreeneryDay 
2022-10-10 JPHealthandSportsDay 
2022-09-15 JPKeirouNOhi 
2022-02-11 JPKenkokuKinenNoHi 
2022-05-03 JPKenpouKinenBi 
2022-11-23 JPKinrouKanshaNoHi 
2022-05-05 JPKodomoNoHi 
2022-05-04 JPKokuminNoKyujitu 
2022-07-20 JPMarineDay 
2022-04-29 JPMidoriNoHi 
2022-02-11 JPNatFoundationDay 
2022-05-04 JPNationHoliday 
2022-11-03 JPNationalCultureDay 
2022-01-01 JPNewYearsDay 
2022-09-15 JPRespectForTheAgedDay 
2022-01-15 JPSeijinNoHi 
2022-09-24 JPShuubunNoHi 
2022-10-10 JPTaiikuNoHi 
2022-11-23 JPTennouTanjyouBi 
2022-11-23 JPThanksgivingDay 
2022-07-20 JPUmiNoHi 
2022-05-01 LaborDay 
2022-09-29 MassOfArchangels 
2022-01-01 NewYearsDay 
2022-04-10 PalmSunday 
2022-06-05 Pentecost 
2022-06-06 PentecostMonday 
2022-02-02 PresentationOfLord 
2022-02-27 Quinquagesima 
2022-05-22 RogationSunday 
2022-02-13 Septuagesima 
2022-01-01 SolemnityOfMary 
2022-08-06 TransfigurationOfLord 
2022-06-12 TrinitySunday 
2022-03-07 USCPulaskisBirthday 
2022-12-25 USChristmasDay 
2022-10-10 USColumbusDay 
2022-05-30 USDecorationMemorialDay 
2022-11-08 USElectionDay 
2022-04-15 USGoodFriday 
2022-01-20 USInaugurationDay 
2022-07-04 USIndependenceDay 
2022-06-19 USJuneteenthNationalIndependenceDay 
2022-09-05 USLaborDay 
2022-02-12 USLincolnsBirthday 
2022-01-17 USMLKingsBirthday 
2022-05-30 USMemorialDay 
2022-01-01 USNewYearsDay 
2022-02-21 USPresidentsDay 
2022-11-24 USThanksgivingDay 
2022-11-11 USVeteransDay 
2022-02-22 USWashingtonsBirthday 
 done successfully.



Executing test function test.listHolidays  ...  done successfully.



Executing test function test.timeDateMathOps  ...  done successfully.



Executing test function test.timeDateOrdering  ... Formal class 'timeDate' [package "timeDate"] with 3 slots
  ..@ Data     : POSIXct[1:12], format: "2007-01-01 15:00:00" "2007-02-01 15:00:00" ...
  ..@ format   : chr "%Y-%m-%d %H:%M:%S"
  ..@ FinCenter: chr "NewYork"
Formal class 'timeDate' [package "timeDate"] with 3 slots
  ..@ Data     : POSIXct[1:12], format: "2007-01-01 15:00:00" "2007-02-01 15:00:00" ...
  ..@ format   : chr "%Y-%m-%d %H:%M:%S"
  ..@ FinCenter: chr "Zurich"
GMT
 [1] [2022-02-01] [2022-03-01] [2022-07-01] [2022-09-01] [2022-01-01]
 [6] [2022-05-01] [2022-10-01] [2022-11-01] [2022-12-01] [2022-06-01]
[11] [2022-04-01] [2022-08-01]
GMT
[1] [2022-11-24] [2022-11-23] [2022-11-22] [2022-11-21] [2022-11-20]
[6] [2022-11-19]
 done successfully.



Executing test function test.timeFirstDayInMonth  ...  done successfully.



Executing test function test.timeFirstDayInQuarter  ...  done successfully.



Executing test function test.timeLastDayInMonth  ...  done successfully.



Executing test function test.timeLastDayInQuarter  ...  done successfully.



Executing test function test.timeLastNdayInMonth  ...  done successfully.



Executing test function test.timeNdayOnOrAfter  ...  done successfully.



Executing test function test.timeNdayOnOrBefore  ...  done successfully.



Executing test function test.timeNthNdayInMonth  ...  done successfully.



Executing test function test.Easter  ... Zurich
[1] [2006-04-09] [2006-04-10] [2006-04-11] [2006-04-12] [2006-04-13]
[6] [2006-04-14] [2006-04-15] [2006-04-16]
Zurich
[1] [2006-04-09] [2006-04-10] [2006-04-11] [2006-04-12] [2006-04-13]
[6] [2006-04-14] [2006-04-15] [2006-04-16]
 done successfully.



Executing test function test.blockStart  ...  done successfully.



Executing test function test.cut  ... GMT
[1] [2006-04-14]
GMT
[1] [2006-04-17]
GMT
[1] [2006-04-14] [2006-04-15] [2006-04-16]
GMT
[1] [2006-04-14] [2006-04-15] [2006-04-16]
 done successfully.



Executing test function test.dayOfWeek  ...  done successfully.



Executing test function test.holidayNYSE  ...  done successfully.



Executing test function test.isBizday  ...  done successfully.



Executing test function test.isHoliday  ...  done successfully.



Executing test function test.isWeekday  ...  done successfully.



Executing test function test.isWeekend  ...  done successfully.



Executing test function test.start  ... GMT
[1] [2022-01-01]
GMT
[1] [2022-12-01]
 done successfully.



Executing test function test.subset  ...  done successfully.



Executing test function test.AAA  ... [1] "Pacific/Auckland"
 done successfully.



Executing test function test.dayOfWeek  ...  done successfully.



Executing test function test.dayOfYear  ...  done successfully.



Executing test function test.isWeekday  ...  done successfully.



Executing test function test.isWeekend  ...  done successfully.



Executing test function test.seq.GMT  ...  done successfully.



Executing test function test.seq.Zurich  ... Timing stopped at: 0.006 0 0.006
Error in checkIdentical(format(seq(iso1, by = "min", length.out = 24 *  : 
  FALSE 
 
In addition: There were 32 warnings (use warnings() to see them)
 done successfully.

RUNIT TEST PROTOCOL -- Fri Nov 25 11:11:12 2022 
*********************************************** 
Number of test functions: 57 
Number of errors: 0 
Number of failures: 1 

 
1 Test Suite : 
timeDate unit testing - 57 test functions, 0 errors, 1 failure
FAILURE in test.seq.Zurich: Error in checkIdentical(format(seq(iso1, by = "min", length.out = 24 *  : 
  FALSE 
 
Error in eval(ei, envir) : 

unit testing failed (#test failures: 1, R errors: 0)

Calls: source -> withVisible -> eval -> eval
Execution halted

1 error ✖ | 0 warnings ✔ | 0 notes ✔
> iso1 <- ISOdate(2000,3,25, tz = "Europe/Zurich")
> iso2 <- ISOdate(2000,3,26,  tz = "Europe/Zurich")
> td1 <- timeDate(iso1, zone = "Zurich", FinCenter = "Zurich")
> td2 <- timeDate(iso2, zone = "Zurich", FinCenter = "Zurich")
> checkIdentical(
+                    format(seq(iso1, iso2 , length.out = 12)),
+                    format(seq(td1, td2 , length.out = 12))
+                    )
[1] TRUE
> checkIdentical(
+                    format(seq(iso1, by = "min", length.out = 24*60)),
+                    format(seq(td1, by = "min", length.out = 24*60))
+                    )
Error in checkIdentical(format(seq(iso1, by = "min", length.out = 24 *  : 
  FALSE 
 

Enter a frame number, or 0 to exit   

1: checkIdentical(format(seq(iso1, by = "min", length.out = 24 * 60)), format(

Selection: 0
> td1
Zurich
[1] [2000-03-25 12:00:00]
> iso1
[1] "2000-03-25 12:00:00 CET"
> checkIdentical(
+                    format(seq(iso1, by = "min", length.out = 24*60)),
+                    format(seq(td1, by = "min", length.out = 24*60))
+                    )
Error in checkIdentical(format(seq(iso1, by = "min", length.out = 24 *  : 
  FALSE 
 

Enter a frame number, or 0 to exit   

1: checkIdentical(format(seq(iso1, by = "min", length.out = 24 * 60)), format(

Selection: 0
*** output flushed ***
> all.equal(format(seq(iso1, by = "min", length.out = 24*60)),
            format(seq(td1, by = "min", length.out = 24*60)))
all.equal(format(seq(iso1, by = "min", length.out = 24*60)),
+             format(seq(td1, by = "min", length.out = 24*60)))
[1] "60 string mismatches"
> head(format(seq(iso1, by = "min", length.out = 24*60)))
[1] "2000-03-25 12:00:00" "2000-03-25 12:01:00" "2000-03-25 12:02:00"
[4] "2000-03-25 12:03:00" "2000-03-25 12:04:00" "2000-03-25 12:05:00"
> head(format(seq(td1, by = "min", length.out = 24*60)))
[1] "2000-03-25 12:00:00" "2000-03-25 12:01:00" "2000-03-25 12:02:00"
[4] "2000-03-25 12:03:00" "2000-03-25 12:04:00" "2000-03-25 12:05:00"
> all.equal(format(seq(iso1, by = "min", length.out = 24*60)),
            format(seq(td1, by = "min", length.out = 24*60)))
 all.equal(format(seq(iso1, by = "min", length.out = 24*60)),
+             format(seq(td1, by = "min", length.out = 24*60)))
[1] "60 string mismatches"
>  length(all.equal(format(seq(iso1, by = "min", length.out = 24*60)),
            format(seq(td1, by = "min", length.out = 24*60))))

+             format(seq(td1, by = "min", length.out = 24*60))))
[1] 1
>  length(format(seq(iso1, by = "min", length.out = 24*60)))
[1] 1440
> packageDescription("waldo")
*** output flushed ***
> waldo::compare(format(seq(iso1, by = "min", length.out = 24*60)),
            format(seq(td1, by = "min", length.out = 24*60)))
waldo::compare(format(seq(iso1, by = "min", length.out = 24*60)),
+             format(seq(td1, by = "min", length.out = 24*60)))
      old                   | new                                  
[778] "2000-03-26 00:57:00" | "2000-03-26 00:57:00" [778]          
[779] "2000-03-26 00:58:00" | "2000-03-26 00:58:00" [779]          
[780] "2000-03-26 00:59:00" | "2000-03-26 00:59:00" [780]          
[781] "2000-03-26 01:00:00" - "2000-03-26 02:00:00" [781]          
[782] "2000-03-26 01:01:00" - "2000-03-26 02:01:00" [782]          
[783] "2000-03-26 01:02:00" - "2000-03-26 02:02:00" [783]          
[784] "2000-03-26 01:03:00" - "2000-03-26 02:03:00" [784]          
[785] "2000-03-26 01:04:00" - "2000-03-26 02:04:00" [785]          
[786] "2000-03-26 01:05:00" - "2000-03-26 02:05:00" [786]          
[787] "2000-03-26 01:06:00" - "2000-03-26 02:06:00" [787]          
  ... ...                     ...                   and 56 more ...
> ?ISOdate
> ISOdate
function (year, month, day, hour = 12, min = 0, sec = 0, tz = "GMT") 
ISOdatetime(year, month, day, hour, min, sec, tz)
<bytecode: 0x56399dd201a0>
<environment: namespace:base>
> ISOdatetime
function (year, month, day, hour, min, sec, tz = "") 
{
    if (min(vapply(list(year, month, day, hour, min, sec), length, 
        1, USE.NAMES = FALSE)) == 0L) 
        .POSIXct(numeric(), tz = tz)
    else {
        x <- paste(year, month, day, hour, min, sec, sep = "-")
        as.POSIXct(strptime(x, "%Y-%m-%d-%H-%M-%OS", tz = tz), 
            tz = tz)
    }
}
<bytecode: 0x56399dd1f528>
<environment: namespace:base>
> devtools::check()
*** output flushed ***
> devtools::check()
══ Building ═══════════════════════════════════════════════════════════════════════════════════
Setting env vars:
• CFLAGS    : -Wall -pedantic -fdiagnostics-color=always
• CXXFLAGS  : -Wall -pedantic -fdiagnostics-color=always
• CXX11FLAGS: -Wall -pedantic -fdiagnostics-color=always
• CXX14FLAGS: -Wall -pedantic -fdiagnostics-color=always
• CXX17FLAGS: -Wall -pedantic -fdiagnostics-color=always
• CXX20FLAGS: -Wall -pedantic -fdiagnostics-color=always
✔  checking for file ‘/home/georgi/repos/rmetrics/pkg/timeDate/DESCRIPTION’
─  preparing ‘timeDate’:
✔  checking DESCRIPTION meta-information
─  checking for LF line-endings in source and make files and shell scripts
─  checking for empty or unneeded directories
   Removed empty directory ‘timeDate/docs’
   Removed empty directory ‘timeDate/revdep’
   Removed empty directory ‘timeDate/work’
─  looking to see if a ‘data/datalist’ file should be added
─  building ‘timeDate_4021.107.tar.gz’
   
══ Checking ═══════════════════════════════════════════════════════════════════════════════════
Setting env vars:
• _R_CHECK_CRAN_INCOMING_USE_ASPELL_           : TRUE
• _R_CHECK_CRAN_INCOMING_REMOTE_               : FALSE
• _R_CHECK_CRAN_INCOMING_                      : FALSE
• _R_CHECK_FORCE_SUGGESTS_                     : FALSE
• _R_CHECK_PACKAGES_USED_IGNORE_UNUSED_IMPORTS_: FALSE
• NOT_CRAN                                     : true
── R CMD check ────────────────────────────────────────────────────────────────────────────────
─  using log directory ‘/tmp/RtmpLyvWJc/filee9b5244a7419/timeDate.Rcheck’
─  using R version 4.2.2 Patched (2022-11-10 r83330)
─  using platform: x86_64-pc-linux-gnu (64-bit)
─  using session charset: UTF-8
─  using options ‘--no-manual --as-cran’
✔  checking for file ‘timeDate/DESCRIPTION’
─  this is package ‘timeDate’ version ‘4021.107’
✔  checking package namespace information
✔  checking package dependencies (900ms)
✔  checking if this is a source package
✔  checking if there is a namespace
✔  checking for executable files (431ms)
✔  checking for hidden files and directories
✔  checking for portable file names
✔  checking for sufficient/correct file permissions
✔  checking whether package ‘timeDate’ can be installed (9.1s)
✔  checking installed package size
✔  checking package directory
✔  checking for future file timestamps
✔  checking DESCRIPTION meta-information
✔  checking top-level files
✔  checking for left-over files
✔  checking index information
✔  checking package subdirectories
✔  checking R files for non-ASCII characters
✔  checking R files for syntax errors
✔  checking whether the package can be loaded
✔  checking whether the package can be loaded with stated dependencies
✔  checking whether the package can be unloaded cleanly
✔  checking whether the namespace can be loaded with stated dependencies
✔  checking whether the namespace can be unloaded cleanly
✔  checking loading without being on the library search path
✔  checking dependencies in R code (1.1s)
✔  checking S3 generic/method consistency (697ms)
✔  checking replacement functions
✔  checking foreign function calls (1.2s)
─  checking R code for possible problems ... [15s/15s] OK (14.6s)
✔  checking Rd files (397ms)
✔  checking Rd metadata
✔  checking Rd line widths
✔  checking Rd cross-references
✔  checking for missing documentation entries
✔  checking for code/documentation mismatches (860ms)
✔  checking Rd \usage sections (1s)
✔  checking Rd contents
✔  checking for unstated dependencies in examples
✔  checking R/sysdata.rda
✔  checking line endings in Makefiles
✔  checking for GNU extensions in Makefiles
✔  checking include directives in Makefiles
✔  checking examples (2.1s)
✔  checking for unstated dependencies in ‘tests’
─  checking tests
✔  Running ‘doRUnit.R’ (1.2s)
✔  checking for non-standard things in the check directory
✔  checking for detritus in the temp directory
   
   
── R CMD check results ───────────────────────────────────────────────── timeDate 4021.107 ────
Duration: 36.9s

0 errors ✔ | 0 warnings ✔ | 0 notes ✔
> >weekdays
Error: unexpected '>' in ">"
No suitable frames for recover()
> ?weekdays
> dayOfWeek
function(x)
{
    # A function implemented by Diethelm Wuertz
    # and modified by Yohan Chalabi

    # Description:
    #   Returns day of week for time date objects

    # Arguments:
    #   x - an object of class "timeDate"

    # Example:
    #   weekDay(Sys.timeDate())
    #   weekDay(timeSequence("2005-05-15", "2005-07-15"))

    # FUNCTION:
    stopifnot(inherits(x, "timeDate"))

    # Get Day of Week:
    wd <- c("Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat")
    n <- as.POSIXlt(x, tz = "GMT")$wday + 1
    wdays <- wd[n]
    names(wdays) <- format(x)

    # Return Value:
    wdays
}
<environment: namespace:timeDate>
> methods(weekdays)
[1] weekdays.Date   weekdays.POSIXt
see '?methods' for accessing help and source code
> timeCalendar
*** output flushed ***
> args(timeCalendar)
function (y = getRmetricsOptions("currentYear"), m = 1:12, d = 1, 
    h = 0, min = 0, s = 0, zone = "", FinCenter = "") 
NULL
> Sofia
*** output flushed ***
> pkgdown::build_site()
*** output flushed ***
> pkgdown::build_site()
*** output flushed ***
> 
No suitable frames for recover()
> Save workspace image? [y/n/c]: n


Process R finished at Fri Nov 25 08:07:17 2022
